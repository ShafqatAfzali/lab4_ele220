
ELE220_LAB_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009040  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08009210  08009210  0000a210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093a0  080093a0  0000b0d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080093a0  080093a0  0000a3a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093a8  080093a8  0000b0d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093a8  080093a8  0000a3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080093ac  080093ac  0000a3ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d4  20000000  080093b0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008c98  200000d4  08009484  0000b0d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008d6c  08009484  0000bd6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b0d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ebfe  00000000  00000000  0000b104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d1f  00000000  00000000  00029d02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001880  00000000  00000000  0002ea28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012da  00000000  00000000  000302a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000672e  00000000  00000000  00031582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002020f  00000000  00000000  00037cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9284  00000000  00000000  00057ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00141143  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006930  00000000  00000000  00141188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00147ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000d4 	.word	0x200000d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080091f8 	.word	0x080091f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000d8 	.word	0x200000d8
 800020c:	080091f8 	.word	0x080091f8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MyPrintf>:

/* For convenience, define a pointer to UART handle */
UART_HandleTypeDef *uart_handle_p = &huart2;

void MyPrintf(const char *fmt, ...)
{
 80005ec:	b40f      	push	{r0, r1, r2, r3}
 80005ee:	b590      	push	{r4, r7, lr}
 80005f0:	b0a3      	sub	sp, #140	@ 0x8c
 80005f2:	af00      	add	r7, sp, #0

	/* va_list is a type to hold information about variable arguments */
	va_list args;
	
	/* va_start must be called before accessing variable argument list */
	va_start(args, fmt);
 80005f4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80005f8:	607b      	str	r3, [r7, #4]
	 * the number of arguments in that list is fixed when you compile the program.
	 *
	 * The vsnprintf() function converts each entry in the argument list according
	 * to the corresponding format specifier in format. The format has the same form
	 * and function as the format string for the printf() function. */
	vsnprintf(buff, PRINT_BUFFER_SIZE, fmt, args);
 80005fa:	f107 0008 	add.w	r0, r7, #8
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8000604:	2180      	movs	r1, #128	@ 0x80
 8000606:	f008 f90d 	bl	8008824 <vsniprintf>

	/* va_end should be executed before the function returns whenever
	 * va_start has been previously used in that function */
	va_end(args);
	
	HAL_UART_Transmit(uart_handle_p, (uint8_t *)buff, strlen(buff), 10);
 800060a:	4b0b      	ldr	r3, [pc, #44]	@ (8000638 <MyPrintf+0x4c>)
 800060c:	681c      	ldr	r4, [r3, #0]
 800060e:	f107 0308 	add.w	r3, r7, #8
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff fdfc 	bl	8000210 <strlen>
 8000618:	4603      	mov	r3, r0
 800061a:	b29a      	uxth	r2, r3
 800061c:	f107 0108 	add.w	r1, r7, #8
 8000620:	230a      	movs	r3, #10
 8000622:	4620      	mov	r0, r4
 8000624:	f003 fb96 	bl	8003d54 <HAL_UART_Transmit>
}
 8000628:	bf00      	nop
 800062a:	378c      	adds	r7, #140	@ 0x8c
 800062c:	46bd      	mov	sp, r7
 800062e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000632:	b004      	add	sp, #16
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	20000000 	.word	0x20000000

0800063c <Idle_Thread_Func>:
osSemaphoreId_t semaphor_id;



void Idle_Thread_Func(void *arg)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
    while (true) {
		HAL_GPIO_WritePin(SLEEP_LED_GPIO_Port, SLEEP_LED_Pin,GPIO_PIN_SET);
 8000644:	2201      	movs	r2, #1
 8000646:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800064a:	4806      	ldr	r0, [pc, #24]	@ (8000664 <Idle_Thread_Func+0x28>)
 800064c:	f002 f8fc 	bl	8002848 <HAL_GPIO_WritePin>

    	__WFE();
 8000650:	bf20      	wfe

		HAL_GPIO_WritePin(SLEEP_LED_GPIO_Port, SLEEP_LED_Pin,GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000658:	4802      	ldr	r0, [pc, #8]	@ (8000664 <Idle_Thread_Func+0x28>)
 800065a:	f002 f8f5 	bl	8002848 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SLEEP_LED_GPIO_Port, SLEEP_LED_Pin,GPIO_PIN_SET);
 800065e:	bf00      	nop
 8000660:	e7f0      	b.n	8000644 <Idle_Thread_Func+0x8>
 8000662:	bf00      	nop
 8000664:	40020000 	.word	0x40020000

08000668 <Thread_Func>:
    }
}


void Thread_Func(void *arg)
{
 8000668:	b5b0      	push	{r4, r5, r7, lr}
 800066a:	b08c      	sub	sp, #48	@ 0x30
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
    uint32_t thread_number = (uint32_t) arg;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	62fb      	str	r3, [r7, #44]	@ 0x2c
    thread_props this_thread_props = my_thread_props[thread_number];
 8000674:	494e      	ldr	r1, [pc, #312]	@ (80007b0 <Thread_Func+0x148>)
 8000676:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000678:	4613      	mov	r3, r2
 800067a:	00db      	lsls	r3, r3, #3
 800067c:	1a9b      	subs	r3, r3, r2
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	440b      	add	r3, r1
 8000682:	f107 0408 	add.w	r4, r7, #8
 8000686:	461d      	mov	r5, r3
 8000688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800068c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000690:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    if(!this_thread_props.led_pin_def){
 8000694:	7e3b      	ldrb	r3, [r7, #24]
 8000696:	f083 0301 	eor.w	r3, r3, #1
 800069a:	b2db      	uxtb	r3, r3
 800069c:	2b00      	cmp	r3, #0
 800069e:	d005      	beq.n	80006ac <Thread_Func+0x44>
        HAL_GPIO_WritePin(this_thread_props.EXT_LED_GPIO_Port, this_thread_props.EXT_LED_Pin, GPIO_PIN_SET);
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	89b9      	ldrh	r1, [r7, #12]
 80006a4:	2201      	movs	r2, #1
 80006a6:	4618      	mov	r0, r3
 80006a8:	f002 f8ce 	bl	8002848 <HAL_GPIO_WritePin>
    }

    while(true){
        uint32_t my_flag = osEventFlagsWait(getSwitcheventflag_id(), this_thread_props.thread_flags, osFlagsWaitAny, osWaitForever);
 80006ac:	f000 fa32 	bl	8000b14 <getSwitcheventflag_id>
 80006b0:	69f9      	ldr	r1, [r7, #28]
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295
 80006b6:	2200      	movs	r2, #0
 80006b8:	f004 f918 	bl	80048ec <osEventFlagsWait>
 80006bc:	62b8      	str	r0, [r7, #40]	@ 0x28

        if(my_flag & this_thread_props.thread_flags) {
 80006be:	69fa      	ldr	r2, [r7, #28]
 80006c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006c2:	4013      	ands	r3, r2
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d06e      	beq.n	80007a6 <Thread_Func+0x13e>
            this_thread_props.led_active = true;
 80006c8:	2301      	movs	r3, #1
 80006ca:	767b      	strb	r3, [r7, #25]
            osEventFlagsClear(getSwitcheventflag_id(), this_thread_props.thread_flags);
 80006cc:	f000 fa22 	bl	8000b14 <getSwitcheventflag_id>
 80006d0:	4602      	mov	r2, r0
 80006d2:	69fb      	ldr	r3, [r7, #28]
 80006d4:	4619      	mov	r1, r3
 80006d6:	4610      	mov	r0, r2
 80006d8:	f004 f8b6 	bl	8004848 <osEventFlagsClear>
        }


        while (this_thread_props.led_active){
 80006dc:	e063      	b.n	80007a6 <Thread_Func+0x13e>
            osSemaphoreAcquire(semaphor_id, osWaitForever);
 80006de:	4b35      	ldr	r3, [pc, #212]	@ (80007b4 <Thread_Func+0x14c>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f04f 31ff 	mov.w	r1, #4294967295
 80006e6:	4618      	mov	r0, r3
 80006e8:	f004 f9ee 	bl	8004ac8 <osSemaphoreAcquire>

            if(this_thread_props.led_pin_def){
 80006ec:	7e3b      	ldrb	r3, [r7, #24]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d020      	beq.n	8000734 <Thread_Func+0xcc>
                HAL_GPIO_WritePin(this_thread_props.EXT_LED_GPIO_Port, this_thread_props.EXT_LED_Pin, GPIO_PIN_SET);
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	89b9      	ldrh	r1, [r7, #12]
 80006f6:	2201      	movs	r2, #1
 80006f8:	4618      	mov	r0, r3
 80006fa:	f002 f8a5 	bl	8002848 <HAL_GPIO_WritePin>
                MyPrintf("\nLED %u ON", (thread_number+1));
 80006fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000700:	3301      	adds	r3, #1
 8000702:	4619      	mov	r1, r3
 8000704:	482c      	ldr	r0, [pc, #176]	@ (80007b8 <Thread_Func+0x150>)
 8000706:	f7ff ff71 	bl	80005ec <MyPrintf>
                osDelay(this_thread_props.led_delay);
 800070a:	693b      	ldr	r3, [r7, #16]
 800070c:	4618      	mov	r0, r3
 800070e:	f003 fffe 	bl	800470e <osDelay>

                HAL_GPIO_WritePin(this_thread_props.EXT_LED_GPIO_Port, this_thread_props.EXT_LED_Pin, GPIO_PIN_RESET);
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	89b9      	ldrh	r1, [r7, #12]
 8000716:	2200      	movs	r2, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f002 f895 	bl	8002848 <HAL_GPIO_WritePin>
                MyPrintf("\nLED %u OFF", (thread_number+1));
 800071e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000720:	3301      	adds	r3, #1
 8000722:	4619      	mov	r1, r3
 8000724:	4825      	ldr	r0, [pc, #148]	@ (80007bc <Thread_Func+0x154>)
 8000726:	f7ff ff61 	bl	80005ec <MyPrintf>
                osDelay(this_thread_props.led_delay);
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	4618      	mov	r0, r3
 800072e:	f003 ffee 	bl	800470e <osDelay>
 8000732:	e01f      	b.n	8000774 <Thread_Func+0x10c>
            } else{
                HAL_GPIO_WritePin(this_thread_props.EXT_LED_GPIO_Port, this_thread_props.EXT_LED_Pin, GPIO_PIN_RESET);
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	89b9      	ldrh	r1, [r7, #12]
 8000738:	2200      	movs	r2, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f002 f884 	bl	8002848 <HAL_GPIO_WritePin>
                MyPrintf("\nLED %u ON", (thread_number+1));
 8000740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000742:	3301      	adds	r3, #1
 8000744:	4619      	mov	r1, r3
 8000746:	481c      	ldr	r0, [pc, #112]	@ (80007b8 <Thread_Func+0x150>)
 8000748:	f7ff ff50 	bl	80005ec <MyPrintf>
                osDelay(this_thread_props.led_delay);
 800074c:	693b      	ldr	r3, [r7, #16]
 800074e:	4618      	mov	r0, r3
 8000750:	f003 ffdd 	bl	800470e <osDelay>

                HAL_GPIO_WritePin(this_thread_props.EXT_LED_GPIO_Port, this_thread_props.EXT_LED_Pin, GPIO_PIN_SET);
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	89b9      	ldrh	r1, [r7, #12]
 8000758:	2201      	movs	r2, #1
 800075a:	4618      	mov	r0, r3
 800075c:	f002 f874 	bl	8002848 <HAL_GPIO_WritePin>
                MyPrintf("\nLED %u OFF", (thread_number+1));
 8000760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000762:	3301      	adds	r3, #1
 8000764:	4619      	mov	r1, r3
 8000766:	4815      	ldr	r0, [pc, #84]	@ (80007bc <Thread_Func+0x154>)
 8000768:	f7ff ff40 	bl	80005ec <MyPrintf>
                osDelay(this_thread_props.led_delay);
 800076c:	693b      	ldr	r3, [r7, #16]
 800076e:	4618      	mov	r0, r3
 8000770:	f003 ffcd 	bl	800470e <osDelay>
            }

            osSemaphoreRelease(semaphor_id);
 8000774:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <Thread_Func+0x14c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4618      	mov	r0, r3
 800077a:	f004 f9f7 	bl	8004b6c <osSemaphoreRelease>
            uint32_t now_flag = osEventFlagsGet(getSwitcheventflag_id());
 800077e:	f000 f9c9 	bl	8000b14 <getSwitcheventflag_id>
 8000782:	4603      	mov	r3, r0
 8000784:	4618      	mov	r0, r3
 8000786:	f004 f890 	bl	80048aa <osEventFlagsGet>
 800078a:	6278      	str	r0, [r7, #36]	@ 0x24
            if(now_flag){
 800078c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800078e:	2b00      	cmp	r3, #0
 8000790:	d009      	beq.n	80007a6 <Thread_Func+0x13e>
            	this_thread_props.led_active = false;
 8000792:	2300      	movs	r3, #0
 8000794:	767b      	strb	r3, [r7, #25]
            	osEventFlagsClear(getSwitcheventflag_id(), this_thread_props.thread_flags);
 8000796:	f000 f9bd 	bl	8000b14 <getSwitcheventflag_id>
 800079a:	4602      	mov	r2, r0
 800079c:	69fb      	ldr	r3, [r7, #28]
 800079e:	4619      	mov	r1, r3
 80007a0:	4610      	mov	r0, r2
 80007a2:	f004 f851 	bl	8004848 <osEventFlagsClear>
        while (this_thread_props.led_active){
 80007a6:	7e7b      	ldrb	r3, [r7, #25]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d198      	bne.n	80006de <Thread_Func+0x76>
    while(true){
 80007ac:	e77e      	b.n	80006ac <Thread_Func+0x44>
 80007ae:	bf00      	nop
 80007b0:	20000004 	.word	0x20000004
 80007b4:	200000f0 	.word	0x200000f0
 80007b8:	08009250 	.word	0x08009250
 80007bc:	0800925c 	.word	0x0800925c

080007c0 <My_Threads_Init>:
    }
}


bool My_Threads_Init(uint32_t nmb_of_leds)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08c      	sub	sp, #48	@ 0x30
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]


	if(nmb_of_leds>4){
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2b04      	cmp	r3, #4
 80007cc:	d904      	bls.n	80007d8 <My_Threads_Init+0x18>
		MyPrintf("\ntoo many leds to turn on");
 80007ce:	4834      	ldr	r0, [pc, #208]	@ (80008a0 <My_Threads_Init+0xe0>)
 80007d0:	f7ff ff0c 	bl	80005ec <MyPrintf>
		return false;
 80007d4:	2300      	movs	r3, #0
 80007d6:	e05f      	b.n	8000898 <My_Threads_Init+0xd8>
	} else{

		semaphor_id=osSemaphoreNew(nmb_of_leds,nmb_of_leds,NULL);
 80007d8:	2200      	movs	r2, #0
 80007da:	6879      	ldr	r1, [r7, #4]
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f004 f8ea 	bl	80049b6 <osSemaphoreNew>
 80007e2:	4603      	mov	r3, r0
 80007e4:	4a2f      	ldr	r2, [pc, #188]	@ (80008a4 <My_Threads_Init+0xe4>)
 80007e6:	6013      	str	r3, [r2, #0]
		MyPrintf("\n%u token at start",osSemaphoreGetCount(semaphor_id));
 80007e8:	4b2e      	ldr	r3, [pc, #184]	@ (80008a4 <My_Threads_Init+0xe4>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f004 fa01 	bl	8004bf4 <osSemaphoreGetCount>
 80007f2:	4603      	mov	r3, r0
 80007f4:	4619      	mov	r1, r3
 80007f6:	482c      	ldr	r0, [pc, #176]	@ (80008a8 <My_Threads_Init+0xe8>)
 80007f8:	f7ff fef8 	bl	80005ec <MyPrintf>

		for(int i=0; i<4; i++){
 80007fc:	2300      	movs	r3, #0
 80007fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000800:	e034      	b.n	800086c <My_Threads_Init+0xac>
			osThreadAttr_t thread_spes={};
 8000802:	f107 0308 	add.w	r3, r7, #8
 8000806:	2224      	movs	r2, #36	@ 0x24
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f008 f818 	bl	8008840 <memset>

			thread_spes.name=my_thread_props[i].thread_name;
 8000810:	4926      	ldr	r1, [pc, #152]	@ (80008ac <My_Threads_Init+0xec>)
 8000812:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000814:	4613      	mov	r3, r2
 8000816:	00db      	lsls	r3, r3, #3
 8000818:	1a9b      	subs	r3, r3, r2
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	440b      	add	r3, r1
 800081e:	330c      	adds	r3, #12
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	60bb      	str	r3, [r7, #8]

			my_thread_props[i].thread_id = osThreadNew(Thread_Func, (void*)(uint32_t)i, &thread_spes);
 8000824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000826:	f107 0208 	add.w	r2, r7, #8
 800082a:	4619      	mov	r1, r3
 800082c:	4820      	ldr	r0, [pc, #128]	@ (80008b0 <My_Threads_Init+0xf0>)
 800082e:	f003 fedb 	bl	80045e8 <osThreadNew>
 8000832:	4601      	mov	r1, r0
 8000834:	481d      	ldr	r0, [pc, #116]	@ (80008ac <My_Threads_Init+0xec>)
 8000836:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000838:	4613      	mov	r3, r2
 800083a:	00db      	lsls	r3, r3, #3
 800083c:	1a9b      	subs	r3, r3, r2
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	4403      	add	r3, r0
 8000842:	3318      	adds	r3, #24
 8000844:	6019      	str	r1, [r3, #0]
			//MyPrintf("\n!!!!!!!!!!!!!  starta thread %i  !!!!!!!!!!!!!",i);
			if(my_thread_props[i].thread_id==NULL){
 8000846:	4919      	ldr	r1, [pc, #100]	@ (80008ac <My_Threads_Init+0xec>)
 8000848:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800084a:	4613      	mov	r3, r2
 800084c:	00db      	lsls	r3, r3, #3
 800084e:	1a9b      	subs	r3, r3, r2
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	440b      	add	r3, r1
 8000854:	3318      	adds	r3, #24
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d104      	bne.n	8000866 <My_Threads_Init+0xa6>
				MyPrintf("failed to create thread %i",i);
 800085c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800085e:	4815      	ldr	r0, [pc, #84]	@ (80008b4 <My_Threads_Init+0xf4>)
 8000860:	f7ff fec4 	bl	80005ec <MyPrintf>
 8000864:	e005      	b.n	8000872 <My_Threads_Init+0xb2>
		for(int i=0; i<4; i++){
 8000866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000868:	3301      	adds	r3, #1
 800086a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800086c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800086e:	2b03      	cmp	r3, #3
 8000870:	ddc7      	ble.n	8000802 <My_Threads_Init+0x42>
			}
		}


		//lager idle thread slik at det går i sleep mode når denne kjøres;
	    osThreadAttr_t idle_spes = {};
 8000872:	f107 0308 	add.w	r3, r7, #8
 8000876:	2224      	movs	r2, #36	@ 0x24
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f007 ffe0 	bl	8008840 <memset>
	    idle_spes.name="idle_thread";
 8000880:	4b0d      	ldr	r3, [pc, #52]	@ (80008b8 <My_Threads_Init+0xf8>)
 8000882:	60bb      	str	r3, [r7, #8]
	    idle_spes.priority=osPriorityIdle;
 8000884:	2301      	movs	r3, #1
 8000886:	623b      	str	r3, [r7, #32]
	    osThreadNew(Idle_Thread_Func, NULL, &idle_spes);
 8000888:	f107 0308 	add.w	r3, r7, #8
 800088c:	461a      	mov	r2, r3
 800088e:	2100      	movs	r1, #0
 8000890:	480a      	ldr	r0, [pc, #40]	@ (80008bc <My_Threads_Init+0xfc>)
 8000892:	f003 fea9 	bl	80045e8 <osThreadNew>

		return true;
 8000896:	2301      	movs	r3, #1
	}



}
 8000898:	4618      	mov	r0, r3
 800089a:	3730      	adds	r7, #48	@ 0x30
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	08009268 	.word	0x08009268
 80008a4:	200000f0 	.word	0x200000f0
 80008a8:	08009284 	.word	0x08009284
 80008ac:	20000004 	.word	0x20000004
 80008b0:	08000669 	.word	0x08000669
 80008b4:	08009298 	.word	0x08009298
 80008b8:	080092b4 	.word	0x080092b4
 80008bc:	0800063d 	.word	0x0800063d

080008c0 <SwitchMonitor>:
    switch_action_t action;
} switch_message_t;

#define SwitchMonitorInterruptCB HAL_GPIO_EXTI_Callback

void SwitchMonitor(void *arg) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
    switch_message_t msg;

    while(true) {
        if (osMessageQueueGet(queue_id, &msg, NULL, osWaitForever) == osOK) {
 80008c8:	4b37      	ldr	r3, [pc, #220]	@ (80009a8 <SwitchMonitor+0xe8>)
 80008ca:	6818      	ldr	r0, [r3, #0]
 80008cc:	f107 010c 	add.w	r1, r7, #12
 80008d0:	f04f 33ff 	mov.w	r3, #4294967295
 80008d4:	2200      	movs	r2, #0
 80008d6:	f004 fa81 	bl	8004ddc <osMessageQueueGet>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d1f3      	bne.n	80008c8 <SwitchMonitor+0x8>
            uint8_t switch_num = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	75fb      	strb	r3, [r7, #23]
            const char *action_str = "";
 80008e4:	4b31      	ldr	r3, [pc, #196]	@ (80009ac <SwitchMonitor+0xec>)
 80008e6:	613b      	str	r3, [r7, #16]

            switch(msg.pin) {
 80008e8:	89bb      	ldrh	r3, [r7, #12]
 80008ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80008ee:	d010      	beq.n	8000912 <SwitchMonitor+0x52>
 80008f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80008f4:	dc16      	bgt.n	8000924 <SwitchMonitor+0x64>
 80008f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80008fa:	d007      	beq.n	800090c <SwitchMonitor+0x4c>
 80008fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000900:	dc10      	bgt.n	8000924 <SwitchMonitor+0x64>
 8000902:	2b10      	cmp	r3, #16
 8000904:	d008      	beq.n	8000918 <SwitchMonitor+0x58>
 8000906:	2b20      	cmp	r3, #32
 8000908:	d009      	beq.n	800091e <SwitchMonitor+0x5e>
 800090a:	e00b      	b.n	8000924 <SwitchMonitor+0x64>
                case SW1_Pin: switch_num = 1; break;
 800090c:	2301      	movs	r3, #1
 800090e:	75fb      	strb	r3, [r7, #23]
 8000910:	e00b      	b.n	800092a <SwitchMonitor+0x6a>
                case SW2_Pin: switch_num = 2; break;
 8000912:	2302      	movs	r3, #2
 8000914:	75fb      	strb	r3, [r7, #23]
 8000916:	e008      	b.n	800092a <SwitchMonitor+0x6a>
                case SW3_Pin: switch_num = 3; break;
 8000918:	2303      	movs	r3, #3
 800091a:	75fb      	strb	r3, [r7, #23]
 800091c:	e005      	b.n	800092a <SwitchMonitor+0x6a>
                case SW4_Pin: switch_num = 4; break;
 800091e:	2304      	movs	r3, #4
 8000920:	75fb      	strb	r3, [r7, #23]
 8000922:	e002      	b.n	800092a <SwitchMonitor+0x6a>
                default: switch_num = 0; break;
 8000924:	2300      	movs	r3, #0
 8000926:	75fb      	strb	r3, [r7, #23]
 8000928:	bf00      	nop
            }

            if (msg.action == SWITCH_PRESSED) {
 800092a:	7bbb      	ldrb	r3, [r7, #14]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d12f      	bne.n	8000990 <SwitchMonitor+0xd0>
                action_str = "pressed";
 8000930:	4b1f      	ldr	r3, [pc, #124]	@ (80009b0 <SwitchMonitor+0xf0>)
 8000932:	613b      	str	r3, [r7, #16]

                switch(msg.pin) {
 8000934:	89bb      	ldrh	r3, [r7, #12]
 8000936:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800093a:	d014      	beq.n	8000966 <SwitchMonitor+0xa6>
 800093c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000940:	dc28      	bgt.n	8000994 <SwitchMonitor+0xd4>
 8000942:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000946:	d007      	beq.n	8000958 <SwitchMonitor+0x98>
 8000948:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800094c:	dc22      	bgt.n	8000994 <SwitchMonitor+0xd4>
 800094e:	2b10      	cmp	r3, #16
 8000950:	d010      	beq.n	8000974 <SwitchMonitor+0xb4>
 8000952:	2b20      	cmp	r3, #32
 8000954:	d015      	beq.n	8000982 <SwitchMonitor+0xc2>
 8000956:	e01d      	b.n	8000994 <SwitchMonitor+0xd4>
                    case SW1_Pin:
                        osEventFlagsSet(eventflag_id, EVENT_FLAG_SWITCH_1_PRESSED);
 8000958:	4b16      	ldr	r3, [pc, #88]	@ (80009b4 <SwitchMonitor+0xf4>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2101      	movs	r1, #1
 800095e:	4618      	mov	r0, r3
 8000960:	f003 ff30 	bl	80047c4 <osEventFlagsSet>
                        break;
 8000964:	e016      	b.n	8000994 <SwitchMonitor+0xd4>
                    case SW2_Pin:
                        osEventFlagsSet(eventflag_id, EVENT_FLAG_SWITCH_2_PRESSED);
 8000966:	4b13      	ldr	r3, [pc, #76]	@ (80009b4 <SwitchMonitor+0xf4>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2102      	movs	r1, #2
 800096c:	4618      	mov	r0, r3
 800096e:	f003 ff29 	bl	80047c4 <osEventFlagsSet>
                        break;
 8000972:	e00f      	b.n	8000994 <SwitchMonitor+0xd4>
                    case SW3_Pin:
                        osEventFlagsSet(eventflag_id, EVENT_FLAG_SWITCH_3_PRESSED);
 8000974:	4b0f      	ldr	r3, [pc, #60]	@ (80009b4 <SwitchMonitor+0xf4>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2104      	movs	r1, #4
 800097a:	4618      	mov	r0, r3
 800097c:	f003 ff22 	bl	80047c4 <osEventFlagsSet>
                        break;
 8000980:	e008      	b.n	8000994 <SwitchMonitor+0xd4>
                    case SW4_Pin:
                        osEventFlagsSet(eventflag_id, EVENT_FLAG_SWITCH_4_PRESSED);
 8000982:	4b0c      	ldr	r3, [pc, #48]	@ (80009b4 <SwitchMonitor+0xf4>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2108      	movs	r1, #8
 8000988:	4618      	mov	r0, r3
 800098a:	f003 ff1b 	bl	80047c4 <osEventFlagsSet>
                        break;
 800098e:	e001      	b.n	8000994 <SwitchMonitor+0xd4>
                }
            } else {
                action_str = "released";
 8000990:	4b09      	ldr	r3, [pc, #36]	@ (80009b8 <SwitchMonitor+0xf8>)
 8000992:	613b      	str	r3, [r7, #16]
            }

            if (switch_num > 0) {
 8000994:	7dfb      	ldrb	r3, [r7, #23]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d096      	beq.n	80008c8 <SwitchMonitor+0x8>
                MyPrintf("Switch %d is %s\n", switch_num, action_str);
 800099a:	7dfb      	ldrb	r3, [r7, #23]
 800099c:	693a      	ldr	r2, [r7, #16]
 800099e:	4619      	mov	r1, r3
 80009a0:	4806      	ldr	r0, [pc, #24]	@ (80009bc <SwitchMonitor+0xfc>)
 80009a2:	f7ff fe23 	bl	80005ec <MyPrintf>
        if (osMessageQueueGet(queue_id, &msg, NULL, osWaitForever) == osOK) {
 80009a6:	e78f      	b.n	80008c8 <SwitchMonitor+0x8>
 80009a8:	200000f4 	.word	0x200000f4
 80009ac:	080092c0 	.word	0x080092c0
 80009b0:	080092c4 	.word	0x080092c4
 80009b4:	200000f8 	.word	0x200000f8
 80009b8:	080092cc 	.word	0x080092cc
 80009bc:	080092d8 	.word	0x080092d8

080009c0 <HAL_GPIO_EXTI_Callback>:
            }
        }
    }
}

void SwitchMonitorInterruptCB(uint16_t pin) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTI_CLEAR_IT(pin);
 80009ca:	4a2a      	ldr	r2, [pc, #168]	@ (8000a74 <HAL_GPIO_EXTI_Callback+0xb4>)
 80009cc:	88fb      	ldrh	r3, [r7, #6]
 80009ce:	6153      	str	r3, [r2, #20]

    switch_message_t msg;
    msg.pin = pin;
 80009d0:	88fb      	ldrh	r3, [r7, #6]
 80009d2:	813b      	strh	r3, [r7, #8]

    GPIO_TypeDef* port = NULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]

    switch(pin) {
 80009d8:	88fb      	ldrh	r3, [r7, #6]
 80009da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80009de:	d010      	beq.n	8000a02 <HAL_GPIO_EXTI_Callback+0x42>
 80009e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80009e4:	dc41      	bgt.n	8000a6a <HAL_GPIO_EXTI_Callback+0xaa>
 80009e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80009ea:	d007      	beq.n	80009fc <HAL_GPIO_EXTI_Callback+0x3c>
 80009ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80009f0:	dc3b      	bgt.n	8000a6a <HAL_GPIO_EXTI_Callback+0xaa>
 80009f2:	2b10      	cmp	r3, #16
 80009f4:	d008      	beq.n	8000a08 <HAL_GPIO_EXTI_Callback+0x48>
 80009f6:	2b20      	cmp	r3, #32
 80009f8:	d009      	beq.n	8000a0e <HAL_GPIO_EXTI_Callback+0x4e>
        case SW1_Pin: port = SW1_GPIO_Port; break;
        case SW2_Pin: port = SW2_GPIO_Port; break;
        case SW3_Pin: port = SW3_GPIO_Port; break;
        case SW4_Pin: port = SW4_GPIO_Port; break;
        default: return;
 80009fa:	e036      	b.n	8000a6a <HAL_GPIO_EXTI_Callback+0xaa>
        case SW1_Pin: port = SW1_GPIO_Port; break;
 80009fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000a78 <HAL_GPIO_EXTI_Callback+0xb8>)
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	e008      	b.n	8000a14 <HAL_GPIO_EXTI_Callback+0x54>
        case SW2_Pin: port = SW2_GPIO_Port; break;
 8000a02:	4b1e      	ldr	r3, [pc, #120]	@ (8000a7c <HAL_GPIO_EXTI_Callback+0xbc>)
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	e005      	b.n	8000a14 <HAL_GPIO_EXTI_Callback+0x54>
        case SW3_Pin: port = SW3_GPIO_Port; break;
 8000a08:	4b1c      	ldr	r3, [pc, #112]	@ (8000a7c <HAL_GPIO_EXTI_Callback+0xbc>)
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	e002      	b.n	8000a14 <HAL_GPIO_EXTI_Callback+0x54>
        case SW4_Pin: port = SW4_GPIO_Port; break;
 8000a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000a7c <HAL_GPIO_EXTI_Callback+0xbc>)
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	bf00      	nop
    }

    if(pin==SW1_Pin || pin==SW3_Pin){
 8000a14:	88fb      	ldrh	r3, [r7, #6]
 8000a16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000a1a:	d002      	beq.n	8000a22 <HAL_GPIO_EXTI_Callback+0x62>
 8000a1c:	88fb      	ldrh	r3, [r7, #6]
 8000a1e:	2b10      	cmp	r3, #16
 8000a20:	d10d      	bne.n	8000a3e <HAL_GPIO_EXTI_Callback+0x7e>
        if (HAL_GPIO_ReadPin(port, pin) == GPIO_PIN_RESET) {
 8000a22:	88fb      	ldrh	r3, [r7, #6]
 8000a24:	4619      	mov	r1, r3
 8000a26:	68f8      	ldr	r0, [r7, #12]
 8000a28:	f001 fef6 	bl	8002818 <HAL_GPIO_ReadPin>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d102      	bne.n	8000a38 <HAL_GPIO_EXTI_Callback+0x78>
            msg.action = SWITCH_PRESSED;
 8000a32:	2300      	movs	r3, #0
 8000a34:	72bb      	strb	r3, [r7, #10]
        if (HAL_GPIO_ReadPin(port, pin) == GPIO_PIN_RESET) {
 8000a36:	e00f      	b.n	8000a58 <HAL_GPIO_EXTI_Callback+0x98>
        } else {
            msg.action = SWITCH_RELEASED;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	72bb      	strb	r3, [r7, #10]
        if (HAL_GPIO_ReadPin(port, pin) == GPIO_PIN_RESET) {
 8000a3c:	e00c      	b.n	8000a58 <HAL_GPIO_EXTI_Callback+0x98>
        }
    } else{
        if (HAL_GPIO_ReadPin(port, pin) == GPIO_PIN_RESET) {
 8000a3e:	88fb      	ldrh	r3, [r7, #6]
 8000a40:	4619      	mov	r1, r3
 8000a42:	68f8      	ldr	r0, [r7, #12]
 8000a44:	f001 fee8 	bl	8002818 <HAL_GPIO_ReadPin>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d102      	bne.n	8000a54 <HAL_GPIO_EXTI_Callback+0x94>
            msg.action = SWITCH_RELEASED;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	72bb      	strb	r3, [r7, #10]
 8000a52:	e001      	b.n	8000a58 <HAL_GPIO_EXTI_Callback+0x98>
        } else {
            msg.action = SWITCH_PRESSED;
 8000a54:	2300      	movs	r3, #0
 8000a56:	72bb      	strb	r3, [r7, #10]
        }
    }


    osMessageQueuePut(queue_id, &msg, 0, 0);
 8000a58:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000a5a:	6818      	ldr	r0, [r3, #0]
 8000a5c:	f107 0108 	add.w	r1, r7, #8
 8000a60:	2300      	movs	r3, #0
 8000a62:	2200      	movs	r2, #0
 8000a64:	f004 f95a 	bl	8004d1c <osMessageQueuePut>
 8000a68:	e000      	b.n	8000a6c <HAL_GPIO_EXTI_Callback+0xac>
        default: return;
 8000a6a:	bf00      	nop
}
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40013c00 	.word	0x40013c00
 8000a78:	40020000 	.word	0x40020000
 8000a7c:	40020400 	.word	0x40020400
 8000a80:	200000f4 	.word	0x200000f4

08000a84 <SwitchMonitorInit>:

bool SwitchMonitorInit(void) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	@ 0x28
 8000a88:	af00      	add	r7, sp, #0
	queue_id = osMessageQueueNew(16, sizeof(switch_message_t), NULL);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2104      	movs	r1, #4
 8000a8e:	2010      	movs	r0, #16
 8000a90:	f004 f8d0 	bl	8004c34 <osMessageQueueNew>
 8000a94:	4603      	mov	r3, r0
 8000a96:	4a1a      	ldr	r2, [pc, #104]	@ (8000b00 <SwitchMonitorInit+0x7c>)
 8000a98:	6013      	str	r3, [r2, #0]
    if (queue_id == NULL) {
 8000a9a:	4b19      	ldr	r3, [pc, #100]	@ (8000b00 <SwitchMonitorInit+0x7c>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d101      	bne.n	8000aa6 <SwitchMonitorInit+0x22>
        return false;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	e028      	b.n	8000af8 <SwitchMonitorInit+0x74>
    }

    eventflag_id = osEventFlagsNew(NULL);
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f003 fe4c 	bl	8004744 <osEventFlagsNew>
 8000aac:	4603      	mov	r3, r0
 8000aae:	4a15      	ldr	r2, [pc, #84]	@ (8000b04 <SwitchMonitorInit+0x80>)
 8000ab0:	6013      	str	r3, [r2, #0]
    if (eventflag_id == NULL) {
 8000ab2:	4b14      	ldr	r3, [pc, #80]	@ (8000b04 <SwitchMonitorInit+0x80>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d101      	bne.n	8000abe <SwitchMonitorInit+0x3a>
        return false;
 8000aba:	2300      	movs	r3, #0
 8000abc:	e01c      	b.n	8000af8 <SwitchMonitorInit+0x74>
    }

    const osThreadAttr_t switch_monitor_attributes = {
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	2224      	movs	r2, #36	@ 0x24
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f007 febb 	bl	8008840 <memset>
 8000aca:	4b0f      	ldr	r3, [pc, #60]	@ (8000b08 <SwitchMonitorInit+0x84>)
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ad2:	61bb      	str	r3, [r7, #24]
 8000ad4:	2318      	movs	r3, #24
 8000ad6:	61fb      	str	r3, [r7, #28]
        .name = "SwitchMonitor",
        .stack_size = 1024,
        .priority = osPriorityNormal,
    };

    switch_monitor_thread = osThreadNew(SwitchMonitor, NULL, &switch_monitor_attributes);
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	461a      	mov	r2, r3
 8000adc:	2100      	movs	r1, #0
 8000ade:	480b      	ldr	r0, [pc, #44]	@ (8000b0c <SwitchMonitorInit+0x88>)
 8000ae0:	f003 fd82 	bl	80045e8 <osThreadNew>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b10 <SwitchMonitorInit+0x8c>)
 8000ae8:	6013      	str	r3, [r2, #0]
    if (switch_monitor_thread == NULL) {
 8000aea:	4b09      	ldr	r3, [pc, #36]	@ (8000b10 <SwitchMonitorInit+0x8c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d101      	bne.n	8000af6 <SwitchMonitorInit+0x72>
        return false;
 8000af2:	2300      	movs	r3, #0
 8000af4:	e000      	b.n	8000af8 <SwitchMonitorInit+0x74>
    }

    return true;
 8000af6:	2301      	movs	r3, #1
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3728      	adds	r7, #40	@ 0x28
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	200000f4 	.word	0x200000f4
 8000b04:	200000f8 	.word	0x200000f8
 8000b08:	080092ec 	.word	0x080092ec
 8000b0c:	080008c1 	.word	0x080008c1
 8000b10:	200000fc 	.word	0x200000fc

08000b14 <getSwitcheventflag_id>:

osEventFlagsId_t getSwitcheventflag_id(void) {
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
    return eventflag_id;
 8000b18:	4b03      	ldr	r3, [pc, #12]	@ (8000b28 <getSwitcheventflag_id+0x14>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	200000f8 	.word	0x200000f8

08000b2c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b32:	463b      	mov	r3, r7
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b3e:	4b21      	ldr	r3, [pc, #132]	@ (8000bc4 <MX_ADC1_Init+0x98>)
 8000b40:	4a21      	ldr	r2, [pc, #132]	@ (8000bc8 <MX_ADC1_Init+0x9c>)
 8000b42:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b44:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc4 <MX_ADC1_Init+0x98>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000bc4 <MX_ADC1_Init+0x98>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000b50:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc4 <MX_ADC1_Init+0x98>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b56:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc4 <MX_ADC1_Init+0x98>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b5c:	4b19      	ldr	r3, [pc, #100]	@ (8000bc4 <MX_ADC1_Init+0x98>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b64:	4b17      	ldr	r3, [pc, #92]	@ (8000bc4 <MX_ADC1_Init+0x98>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b6a:	4b16      	ldr	r3, [pc, #88]	@ (8000bc4 <MX_ADC1_Init+0x98>)
 8000b6c:	4a17      	ldr	r2, [pc, #92]	@ (8000bcc <MX_ADC1_Init+0xa0>)
 8000b6e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b70:	4b14      	ldr	r3, [pc, #80]	@ (8000bc4 <MX_ADC1_Init+0x98>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b76:	4b13      	ldr	r3, [pc, #76]	@ (8000bc4 <MX_ADC1_Init+0x98>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b7c:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <MX_ADC1_Init+0x98>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc4 <MX_ADC1_Init+0x98>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b8a:	480e      	ldr	r0, [pc, #56]	@ (8000bc4 <MX_ADC1_Init+0x98>)
 8000b8c:	f000 fd3a 	bl	8001604 <HAL_ADC_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000b96:	f000 fa99 	bl	80010cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000b9a:	2311      	movs	r3, #17
 8000b9c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ba6:	463b      	mov	r3, r7
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4806      	ldr	r0, [pc, #24]	@ (8000bc4 <MX_ADC1_Init+0x98>)
 8000bac:	f000 fe9c 	bl	80018e8 <HAL_ADC_ConfigChannel>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000bb6:	f000 fa89 	bl	80010cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000100 	.word	0x20000100
 8000bc8:	40012000 	.word	0x40012000
 8000bcc:	0f000001 	.word	0x0f000001

08000bd0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000be2:	4b22      	ldr	r3, [pc, #136]	@ (8000c6c <MX_ADC2_Init+0x9c>)
 8000be4:	4a22      	ldr	r2, [pc, #136]	@ (8000c70 <MX_ADC2_Init+0xa0>)
 8000be6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000be8:	4b20      	ldr	r3, [pc, #128]	@ (8000c6c <MX_ADC2_Init+0x9c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000bee:	4b1f      	ldr	r3, [pc, #124]	@ (8000c6c <MX_ADC2_Init+0x9c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000bf4:	4b1d      	ldr	r3, [pc, #116]	@ (8000c6c <MX_ADC2_Init+0x9c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000bfa:	4b1c      	ldr	r3, [pc, #112]	@ (8000c6c <MX_ADC2_Init+0x9c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000c00:	4b1a      	ldr	r3, [pc, #104]	@ (8000c6c <MX_ADC2_Init+0x9c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000c08:	4b18      	ldr	r3, [pc, #96]	@ (8000c6c <MX_ADC2_Init+0x9c>)
 8000c0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000c10:	4b16      	ldr	r3, [pc, #88]	@ (8000c6c <MX_ADC2_Init+0x9c>)
 8000c12:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c16:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c18:	4b14      	ldr	r3, [pc, #80]	@ (8000c6c <MX_ADC2_Init+0x9c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000c1e:	4b13      	ldr	r3, [pc, #76]	@ (8000c6c <MX_ADC2_Init+0x9c>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000c24:	4b11      	ldr	r3, [pc, #68]	@ (8000c6c <MX_ADC2_Init+0x9c>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c6c <MX_ADC2_Init+0x9c>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c32:	480e      	ldr	r0, [pc, #56]	@ (8000c6c <MX_ADC2_Init+0x9c>)
 8000c34:	f000 fce6 	bl	8001604 <HAL_ADC_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 8000c3e:	f000 fa45 	bl	80010cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c46:	2301      	movs	r3, #1
 8000c48:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c4e:	463b      	mov	r3, r7
 8000c50:	4619      	mov	r1, r3
 8000c52:	4806      	ldr	r0, [pc, #24]	@ (8000c6c <MX_ADC2_Init+0x9c>)
 8000c54:	f000 fe48 	bl	80018e8 <HAL_ADC_ConfigChannel>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 8000c5e:	f000 fa35 	bl	80010cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c62:	bf00      	nop
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000148 	.word	0x20000148
 8000c70:	40012100 	.word	0x40012100

08000c74 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	@ 0x28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a41      	ldr	r2, [pc, #260]	@ (8000d98 <HAL_ADC_MspInit+0x124>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d116      	bne.n	8000cc4 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]
 8000c9a:	4b40      	ldr	r3, [pc, #256]	@ (8000d9c <HAL_ADC_MspInit+0x128>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c9e:	4a3f      	ldr	r2, [pc, #252]	@ (8000d9c <HAL_ADC_MspInit+0x128>)
 8000ca0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ca4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ca6:	4b3d      	ldr	r3, [pc, #244]	@ (8000d9c <HAL_ADC_MspInit+0x128>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2105      	movs	r1, #5
 8000cb6:	2012      	movs	r0, #18
 8000cb8:	f001 f906 	bl	8001ec8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000cbc:	2012      	movs	r0, #18
 8000cbe:	f001 f91f 	bl	8001f00 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000cc2:	e065      	b.n	8000d90 <HAL_ADC_MspInit+0x11c>
  else if(adcHandle->Instance==ADC2)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a35      	ldr	r2, [pc, #212]	@ (8000da0 <HAL_ADC_MspInit+0x12c>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d160      	bne.n	8000d90 <HAL_ADC_MspInit+0x11c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	4b32      	ldr	r3, [pc, #200]	@ (8000d9c <HAL_ADC_MspInit+0x128>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd6:	4a31      	ldr	r2, [pc, #196]	@ (8000d9c <HAL_ADC_MspInit+0x128>)
 8000cd8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cde:	4b2f      	ldr	r3, [pc, #188]	@ (8000d9c <HAL_ADC_MspInit+0x128>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ce2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	4b2b      	ldr	r3, [pc, #172]	@ (8000d9c <HAL_ADC_MspInit+0x128>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	4a2a      	ldr	r2, [pc, #168]	@ (8000d9c <HAL_ADC_MspInit+0x128>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfa:	4b28      	ldr	r3, [pc, #160]	@ (8000d9c <HAL_ADC_MspInit+0x128>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d06:	2301      	movs	r3, #1
 8000d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	4619      	mov	r1, r3
 8000d18:	4822      	ldr	r0, [pc, #136]	@ (8000da4 <HAL_ADC_MspInit+0x130>)
 8000d1a:	f001 fbe9 	bl	80024f0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8000d1e:	4b22      	ldr	r3, [pc, #136]	@ (8000da8 <HAL_ADC_MspInit+0x134>)
 8000d20:	4a22      	ldr	r2, [pc, #136]	@ (8000dac <HAL_ADC_MspInit+0x138>)
 8000d22:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8000d24:	4b20      	ldr	r3, [pc, #128]	@ (8000da8 <HAL_ADC_MspInit+0x134>)
 8000d26:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000d2a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000da8 <HAL_ADC_MspInit+0x134>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d32:	4b1d      	ldr	r3, [pc, #116]	@ (8000da8 <HAL_ADC_MspInit+0x134>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000d38:	4b1b      	ldr	r3, [pc, #108]	@ (8000da8 <HAL_ADC_MspInit+0x134>)
 8000d3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d3e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d40:	4b19      	ldr	r3, [pc, #100]	@ (8000da8 <HAL_ADC_MspInit+0x134>)
 8000d42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d46:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d48:	4b17      	ldr	r3, [pc, #92]	@ (8000da8 <HAL_ADC_MspInit+0x134>)
 8000d4a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d4e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000d50:	4b15      	ldr	r3, [pc, #84]	@ (8000da8 <HAL_ADC_MspInit+0x134>)
 8000d52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d56:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000d58:	4b13      	ldr	r3, [pc, #76]	@ (8000da8 <HAL_ADC_MspInit+0x134>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d5e:	4b12      	ldr	r3, [pc, #72]	@ (8000da8 <HAL_ADC_MspInit+0x134>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000d64:	4810      	ldr	r0, [pc, #64]	@ (8000da8 <HAL_ADC_MspInit+0x134>)
 8000d66:	f001 f8d9 	bl	8001f1c <HAL_DMA_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <HAL_ADC_MspInit+0x100>
      Error_Handler();
 8000d70:	f000 f9ac 	bl	80010cc <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a0c      	ldr	r2, [pc, #48]	@ (8000da8 <HAL_ADC_MspInit+0x134>)
 8000d78:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d7a:	4a0b      	ldr	r2, [pc, #44]	@ (8000da8 <HAL_ADC_MspInit+0x134>)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2105      	movs	r1, #5
 8000d84:	2012      	movs	r0, #18
 8000d86:	f001 f89f 	bl	8001ec8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000d8a:	2012      	movs	r0, #18
 8000d8c:	f001 f8b8 	bl	8001f00 <HAL_NVIC_EnableIRQ>
}
 8000d90:	bf00      	nop
 8000d92:	3728      	adds	r7, #40	@ 0x28
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40012000 	.word	0x40012000
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40012100 	.word	0x40012100
 8000da4:	40020000 	.word	0x40020000
 8000da8:	20000190 	.word	0x20000190
 8000dac:	40026440 	.word	0x40026440

08000db0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <MX_DMA_Init+0x3c>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	4a0b      	ldr	r2, [pc, #44]	@ (8000dec <MX_DMA_Init+0x3c>)
 8000dc0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc6:	4b09      	ldr	r3, [pc, #36]	@ (8000dec <MX_DMA_Init+0x3c>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2105      	movs	r1, #5
 8000dd6:	203a      	movs	r0, #58	@ 0x3a
 8000dd8:	f001 f876 	bl	8001ec8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000ddc:	203a      	movs	r0, #58	@ 0x3a
 8000dde:	f001 f88f 	bl	8001f00 <HAL_NVIC_EnableIRQ>

}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800

08000df0 <configureTimerForRunTimeStats>:
void vApplicationIdleHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0

}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0
return 0;
 8000e02:	2300      	movs	r3, #0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000e20:	4a04      	ldr	r2, [pc, #16]	@ (8000e34 <MX_FREERTOS_Init+0x18>)
 8000e22:	2100      	movs	r1, #0
 8000e24:	4804      	ldr	r0, [pc, #16]	@ (8000e38 <MX_FREERTOS_Init+0x1c>)
 8000e26:	f003 fbdf 	bl	80045e8 <osThreadNew>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	4a03      	ldr	r2, [pc, #12]	@ (8000e3c <MX_FREERTOS_Init+0x20>)
 8000e2e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	08009328 	.word	0x08009328
 8000e38:	08000e41 	.word	0x08000e41
 8000e3c:	200001f0 	.word	0x200001f0

08000e40 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	//HAL_GPIO_TogglePin(EXT_LED2_GPIO_Port, EXT_LED2_Pin);
	//MyPrintf("\nrtos running");
    osDelay(1000);
 8000e48:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e4c:	f003 fc5f 	bl	800470e <osDelay>
 8000e50:	e7fa      	b.n	8000e48 <StartDefaultTask+0x8>
	...

08000e54 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5a:	f107 030c 	add.w	r3, r7, #12
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
 8000e68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	4b43      	ldr	r3, [pc, #268]	@ (8000f7c <MX_GPIO_Init+0x128>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	4a42      	ldr	r2, [pc, #264]	@ (8000f7c <MX_GPIO_Init+0x128>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7a:	4b40      	ldr	r3, [pc, #256]	@ (8000f7c <MX_GPIO_Init+0x128>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	4b3c      	ldr	r3, [pc, #240]	@ (8000f7c <MX_GPIO_Init+0x128>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	4a3b      	ldr	r2, [pc, #236]	@ (8000f7c <MX_GPIO_Init+0x128>)
 8000e90:	f043 0302 	orr.w	r3, r3, #2
 8000e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e96:	4b39      	ldr	r3, [pc, #228]	@ (8000f7c <MX_GPIO_Init+0x128>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EXT_LED3_Pin|EXT_LED1_Pin|EXT_LED4_Pin|SLEEP_LED_Pin, GPIO_PIN_RESET);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f44f 619c 	mov.w	r1, #1248	@ 0x4e0
 8000ea8:	4835      	ldr	r0, [pc, #212]	@ (8000f80 <MX_GPIO_Init+0x12c>)
 8000eaa:	f001 fccd 	bl	8002848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_LED2_GPIO_Port, EXT_LED2_Pin, GPIO_PIN_RESET);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2140      	movs	r1, #64	@ 0x40
 8000eb2:	4834      	ldr	r0, [pc, #208]	@ (8000f84 <MX_GPIO_Init+0x130>)
 8000eb4:	f001 fcc8 	bl	8002848 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EXT_LED3_Pin EXT_LED1_Pin EXT_LED4_Pin SLEEP_LED_Pin */
  GPIO_InitStruct.Pin = EXT_LED3_Pin|EXT_LED1_Pin|EXT_LED4_Pin|SLEEP_LED_Pin;
 8000eb8:	f44f 639c 	mov.w	r3, #1248	@ 0x4e0
 8000ebc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eca:	f107 030c 	add.w	r3, r7, #12
 8000ece:	4619      	mov	r1, r3
 8000ed0:	482b      	ldr	r0, [pc, #172]	@ (8000f80 <MX_GPIO_Init+0x12c>)
 8000ed2:	f001 fb0d 	bl	80024f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin SW4_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|SW4_Pin;
 8000ed6:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8000eda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000edc:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000ee0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee6:	f107 030c 	add.w	r3, r7, #12
 8000eea:	4619      	mov	r1, r3
 8000eec:	4825      	ldr	r0, [pc, #148]	@ (8000f84 <MX_GPIO_Init+0x130>)
 8000eee:	f001 faff 	bl	80024f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8000ef2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ef6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000ef8:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000efc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000efe:	2301      	movs	r3, #1
 8000f00:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8000f02:	f107 030c 	add.w	r3, r7, #12
 8000f06:	4619      	mov	r1, r3
 8000f08:	481d      	ldr	r0, [pc, #116]	@ (8000f80 <MX_GPIO_Init+0x12c>)
 8000f0a:	f001 faf1 	bl	80024f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW3_Pin */
  GPIO_InitStruct.Pin = SW3_Pin;
 8000f0e:	2310      	movs	r3, #16
 8000f10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f12:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000f16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SW3_GPIO_Port, &GPIO_InitStruct);
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	4619      	mov	r1, r3
 8000f22:	4818      	ldr	r0, [pc, #96]	@ (8000f84 <MX_GPIO_Init+0x130>)
 8000f24:	f001 fae4 	bl	80024f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_LED2_Pin */
  GPIO_InitStruct.Pin = EXT_LED2_Pin;
 8000f28:	2340      	movs	r3, #64	@ 0x40
 8000f2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EXT_LED2_GPIO_Port, &GPIO_InitStruct);
 8000f38:	f107 030c 	add.w	r3, r7, #12
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4811      	ldr	r0, [pc, #68]	@ (8000f84 <MX_GPIO_Init+0x130>)
 8000f40:	f001 fad6 	bl	80024f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2105      	movs	r1, #5
 8000f48:	200a      	movs	r0, #10
 8000f4a:	f000 ffbd 	bl	8001ec8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000f4e:	200a      	movs	r0, #10
 8000f50:	f000 ffd6 	bl	8001f00 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2105      	movs	r1, #5
 8000f58:	2017      	movs	r0, #23
 8000f5a:	f000 ffb5 	bl	8001ec8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f5e:	2017      	movs	r0, #23
 8000f60:	f000 ffce 	bl	8001f00 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2105      	movs	r1, #5
 8000f68:	2028      	movs	r0, #40	@ 0x28
 8000f6a:	f000 ffad 	bl	8001ec8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f6e:	2028      	movs	r0, #40	@ 0x28
 8000f70:	f000 ffc6 	bl	8001f00 <HAL_NVIC_EnableIRQ>

}
 8000f74:	bf00      	nop
 8000f76:	3720      	adds	r7, #32
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40020000 	.word	0x40020000
 8000f84:	40020400 	.word	0x40020400

08000f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8c:	f000 faf8 	bl	8001580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f90:	f000 f81e 	bl	8000fd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f94:	f7ff ff5e 	bl	8000e54 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f98:	f7ff ff0a 	bl	8000db0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f9c:	f000 fa54 	bl	8001448 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000fa0:	f7ff fdc4 	bl	8000b2c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000fa4:	f7ff fe14 	bl	8000bd0 <MX_ADC2_Init>
  MX_TIM3_Init();
 8000fa8:	f000 f9de 	bl	8001368 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 8000fac:	f003 fad2 	bl	8004554 <osKernelInitialize>
  SwitchMonitorInit();
 8000fb0:	f7ff fd68 	bl	8000a84 <SwitchMonitorInit>
  My_Threads_Init(2);
 8000fb4:	2002      	movs	r0, #2
 8000fb6:	f7ff fc03 	bl	80007c0 <My_Threads_Init>
  MyPrintf("\nhello");
 8000fba:	4804      	ldr	r0, [pc, #16]	@ (8000fcc <main+0x44>)
 8000fbc:	f7ff fb16 	bl	80005ec <MyPrintf>
  MX_FREERTOS_Init();
 8000fc0:	f7ff ff2c 	bl	8000e1c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000fc4:	f003 faea 	bl	800459c <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <main+0x40>
 8000fcc:	08009308 	.word	0x08009308

08000fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b094      	sub	sp, #80	@ 0x50
 8000fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd6:	f107 031c 	add.w	r3, r7, #28
 8000fda:	2234      	movs	r2, #52	@ 0x34
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f007 fc2e 	bl	8008840 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe4:	f107 0308 	add.w	r3, r7, #8
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	4b29      	ldr	r3, [pc, #164]	@ (80010a0 <SystemClock_Config+0xd0>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffc:	4a28      	ldr	r2, [pc, #160]	@ (80010a0 <SystemClock_Config+0xd0>)
 8000ffe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001002:	6413      	str	r3, [r2, #64]	@ 0x40
 8001004:	4b26      	ldr	r3, [pc, #152]	@ (80010a0 <SystemClock_Config+0xd0>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001008:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001010:	2300      	movs	r3, #0
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	4b23      	ldr	r3, [pc, #140]	@ (80010a4 <SystemClock_Config+0xd4>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800101c:	4a21      	ldr	r2, [pc, #132]	@ (80010a4 <SystemClock_Config+0xd4>)
 800101e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001022:	6013      	str	r3, [r2, #0]
 8001024:	4b1f      	ldr	r3, [pc, #124]	@ (80010a4 <SystemClock_Config+0xd4>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800102c:	603b      	str	r3, [r7, #0]
 800102e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001030:	2302      	movs	r3, #2
 8001032:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001034:	2301      	movs	r3, #1
 8001036:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001038:	2310      	movs	r3, #16
 800103a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800103c:	2302      	movs	r3, #2
 800103e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001040:	2300      	movs	r3, #0
 8001042:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001044:	2308      	movs	r3, #8
 8001046:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001048:	2332      	movs	r3, #50	@ 0x32
 800104a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800104c:	2302      	movs	r3, #2
 800104e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001050:	2302      	movs	r3, #2
 8001052:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001054:	2302      	movs	r3, #2
 8001056:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001058:	f107 031c 	add.w	r3, r7, #28
 800105c:	4618      	mov	r0, r3
 800105e:	f001 ff1b 	bl	8002e98 <HAL_RCC_OscConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001068:	f000 f830 	bl	80010cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800106c:	230f      	movs	r3, #15
 800106e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001070:	2302      	movs	r3, #2
 8001072:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001078:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800107c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800107e:	2300      	movs	r3, #0
 8001080:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001082:	f107 0308 	add.w	r3, r7, #8
 8001086:	2101      	movs	r1, #1
 8001088:	4618      	mov	r0, r3
 800108a:	f001 fc0f 	bl	80028ac <HAL_RCC_ClockConfig>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001094:	f000 f81a 	bl	80010cc <Error_Handler>
  }
}
 8001098:	bf00      	nop
 800109a:	3750      	adds	r7, #80	@ 0x50
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40007000 	.word	0x40007000

080010a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a04      	ldr	r2, [pc, #16]	@ (80010c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d101      	bne.n	80010be <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80010ba:	f000 fa83 	bl	80015c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40001400 	.word	0x40001400

080010cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d0:	b672      	cpsid	i
}
 80010d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010d4:	bf00      	nop
 80010d6:	e7fd      	b.n	80010d4 <Error_Handler+0x8>

080010d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	607b      	str	r3, [r7, #4]
 80010e2:	4b12      	ldr	r3, [pc, #72]	@ (800112c <HAL_MspInit+0x54>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e6:	4a11      	ldr	r2, [pc, #68]	@ (800112c <HAL_MspInit+0x54>)
 80010e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ee:	4b0f      	ldr	r3, [pc, #60]	@ (800112c <HAL_MspInit+0x54>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	603b      	str	r3, [r7, #0]
 80010fe:	4b0b      	ldr	r3, [pc, #44]	@ (800112c <HAL_MspInit+0x54>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001102:	4a0a      	ldr	r2, [pc, #40]	@ (800112c <HAL_MspInit+0x54>)
 8001104:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001108:	6413      	str	r3, [r2, #64]	@ 0x40
 800110a:	4b08      	ldr	r3, [pc, #32]	@ (800112c <HAL_MspInit+0x54>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001112:	603b      	str	r3, [r7, #0]
 8001114:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	210f      	movs	r1, #15
 800111a:	f06f 0001 	mvn.w	r0, #1
 800111e:	f000 fed3 	bl	8001ec8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800

08001130 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08e      	sub	sp, #56	@ 0x38
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001138:	2300      	movs	r3, #0
 800113a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800113c:	2300      	movs	r3, #0
 800113e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	4b33      	ldr	r3, [pc, #204]	@ (8001214 <HAL_InitTick+0xe4>)
 8001146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001148:	4a32      	ldr	r2, [pc, #200]	@ (8001214 <HAL_InitTick+0xe4>)
 800114a:	f043 0320 	orr.w	r3, r3, #32
 800114e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001150:	4b30      	ldr	r3, [pc, #192]	@ (8001214 <HAL_InitTick+0xe4>)
 8001152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001154:	f003 0320 	and.w	r3, r3, #32
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800115c:	f107 0210 	add.w	r2, r7, #16
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	4611      	mov	r1, r2
 8001166:	4618      	mov	r0, r3
 8001168:	f001 fcba 	bl	8002ae0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800116c:	6a3b      	ldr	r3, [r7, #32]
 800116e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001172:	2b00      	cmp	r3, #0
 8001174:	d103      	bne.n	800117e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001176:	f001 fc8b 	bl	8002a90 <HAL_RCC_GetPCLK1Freq>
 800117a:	6378      	str	r0, [r7, #52]	@ 0x34
 800117c:	e004      	b.n	8001188 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800117e:	f001 fc87 	bl	8002a90 <HAL_RCC_GetPCLK1Freq>
 8001182:	4603      	mov	r3, r0
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800118a:	4a23      	ldr	r2, [pc, #140]	@ (8001218 <HAL_InitTick+0xe8>)
 800118c:	fba2 2303 	umull	r2, r3, r2, r3
 8001190:	0c9b      	lsrs	r3, r3, #18
 8001192:	3b01      	subs	r3, #1
 8001194:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001196:	4b21      	ldr	r3, [pc, #132]	@ (800121c <HAL_InitTick+0xec>)
 8001198:	4a21      	ldr	r2, [pc, #132]	@ (8001220 <HAL_InitTick+0xf0>)
 800119a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800119c:	4b1f      	ldr	r3, [pc, #124]	@ (800121c <HAL_InitTick+0xec>)
 800119e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011a2:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80011a4:	4a1d      	ldr	r2, [pc, #116]	@ (800121c <HAL_InitTick+0xec>)
 80011a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011a8:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80011aa:	4b1c      	ldr	r3, [pc, #112]	@ (800121c <HAL_InitTick+0xec>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b0:	4b1a      	ldr	r3, [pc, #104]	@ (800121c <HAL_InitTick+0xec>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b6:	4b19      	ldr	r3, [pc, #100]	@ (800121c <HAL_InitTick+0xec>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 80011bc:	4817      	ldr	r0, [pc, #92]	@ (800121c <HAL_InitTick+0xec>)
 80011be:	f002 f909 	bl	80033d4 <HAL_TIM_Base_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80011c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d11b      	bne.n	8001208 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80011d0:	4812      	ldr	r0, [pc, #72]	@ (800121c <HAL_InitTick+0xec>)
 80011d2:	f002 f94f 	bl	8003474 <HAL_TIM_Base_Start_IT>
 80011d6:	4603      	mov	r3, r0
 80011d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80011dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d111      	bne.n	8001208 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80011e4:	2037      	movs	r0, #55	@ 0x37
 80011e6:	f000 fe8b 	bl	8001f00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2b0f      	cmp	r3, #15
 80011ee:	d808      	bhi.n	8001202 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80011f0:	2200      	movs	r2, #0
 80011f2:	6879      	ldr	r1, [r7, #4]
 80011f4:	2037      	movs	r0, #55	@ 0x37
 80011f6:	f000 fe67 	bl	8001ec8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001224 <HAL_InitTick+0xf4>)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6013      	str	r3, [r2, #0]
 8001200:	e002      	b.n	8001208 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001208:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800120c:	4618      	mov	r0, r3
 800120e:	3738      	adds	r7, #56	@ 0x38
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40023800 	.word	0x40023800
 8001218:	431bde83 	.word	0x431bde83
 800121c:	200001f4 	.word	0x200001f4
 8001220:	40001400 	.word	0x40001400
 8001224:	20000078 	.word	0x20000078

08001228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800122c:	bf00      	nop
 800122e:	e7fd      	b.n	800122c <NMI_Handler+0x4>

08001230 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <HardFault_Handler+0x4>

08001238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <MemManage_Handler+0x4>

08001240 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <BusFault_Handler+0x4>

08001248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800124c:	bf00      	nop
 800124e:	e7fd      	b.n	800124c <UsageFault_Handler+0x4>

08001250 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW3_Pin);
 8001262:	2010      	movs	r0, #16
 8001264:	f001 fb0a 	bl	800287c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}

0800126c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001270:	4803      	ldr	r0, [pc, #12]	@ (8001280 <ADC_IRQHandler+0x14>)
 8001272:	f000 fa0a 	bl	800168a <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001276:	4803      	ldr	r0, [pc, #12]	@ (8001284 <ADC_IRQHandler+0x18>)
 8001278:	f000 fa07 	bl	800168a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000100 	.word	0x20000100
 8001284:	20000148 	.word	0x20000148

08001288 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW4_Pin);
 800128c:	2020      	movs	r0, #32
 800128e:	f001 faf5 	bl	800287c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW1_Pin);
 8001292:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001296:	f001 faf1 	bl	800287c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}

0800129e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW2_Pin);
 80012a2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80012a6:	f001 fae9 	bl	800287c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80012b4:	4802      	ldr	r0, [pc, #8]	@ (80012c0 <TIM7_IRQHandler+0x10>)
 80012b6:	f002 f94d 	bl	8003554 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200001f4 	.word	0x200001f4

080012c4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80012c8:	4802      	ldr	r0, [pc, #8]	@ (80012d4 <DMA2_Stream2_IRQHandler+0x10>)
 80012ca:	f000 fed5 	bl	8002078 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000190 	.word	0x20000190

080012d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012e0:	4a14      	ldr	r2, [pc, #80]	@ (8001334 <_sbrk+0x5c>)
 80012e2:	4b15      	ldr	r3, [pc, #84]	@ (8001338 <_sbrk+0x60>)
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012ec:	4b13      	ldr	r3, [pc, #76]	@ (800133c <_sbrk+0x64>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d102      	bne.n	80012fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f4:	4b11      	ldr	r3, [pc, #68]	@ (800133c <_sbrk+0x64>)
 80012f6:	4a12      	ldr	r2, [pc, #72]	@ (8001340 <_sbrk+0x68>)
 80012f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012fa:	4b10      	ldr	r3, [pc, #64]	@ (800133c <_sbrk+0x64>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	429a      	cmp	r2, r3
 8001306:	d207      	bcs.n	8001318 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001308:	f007 fb00 	bl	800890c <__errno>
 800130c:	4603      	mov	r3, r0
 800130e:	220c      	movs	r2, #12
 8001310:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001312:	f04f 33ff 	mov.w	r3, #4294967295
 8001316:	e009      	b.n	800132c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001318:	4b08      	ldr	r3, [pc, #32]	@ (800133c <_sbrk+0x64>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800131e:	4b07      	ldr	r3, [pc, #28]	@ (800133c <_sbrk+0x64>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	4a05      	ldr	r2, [pc, #20]	@ (800133c <_sbrk+0x64>)
 8001328:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800132a:	68fb      	ldr	r3, [r7, #12]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20020000 	.word	0x20020000
 8001338:	00000400 	.word	0x00000400
 800133c:	2000023c 	.word	0x2000023c
 8001340:	20008d70 	.word	0x20008d70

08001344 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001348:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <SystemInit+0x20>)
 800134a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800134e:	4a05      	ldr	r2, [pc, #20]	@ (8001364 <SystemInit+0x20>)
 8001350:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001354:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800136e:	f107 0308 	add.w	r3, r7, #8
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800137c:	463b      	mov	r3, r7
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001384:	4b1d      	ldr	r3, [pc, #116]	@ (80013fc <MX_TIM3_Init+0x94>)
 8001386:	4a1e      	ldr	r2, [pc, #120]	@ (8001400 <MX_TIM3_Init+0x98>)
 8001388:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 39;
 800138a:	4b1c      	ldr	r3, [pc, #112]	@ (80013fc <MX_TIM3_Init+0x94>)
 800138c:	2227      	movs	r2, #39	@ 0x27
 800138e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001390:	4b1a      	ldr	r3, [pc, #104]	@ (80013fc <MX_TIM3_Init+0x94>)
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 24999;
 8001396:	4b19      	ldr	r3, [pc, #100]	@ (80013fc <MX_TIM3_Init+0x94>)
 8001398:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 800139c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139e:	4b17      	ldr	r3, [pc, #92]	@ (80013fc <MX_TIM3_Init+0x94>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a4:	4b15      	ldr	r3, [pc, #84]	@ (80013fc <MX_TIM3_Init+0x94>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013aa:	4814      	ldr	r0, [pc, #80]	@ (80013fc <MX_TIM3_Init+0x94>)
 80013ac:	f002 f812 	bl	80033d4 <HAL_TIM_Base_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80013b6:	f7ff fe89 	bl	80010cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013c0:	f107 0308 	add.w	r3, r7, #8
 80013c4:	4619      	mov	r1, r3
 80013c6:	480d      	ldr	r0, [pc, #52]	@ (80013fc <MX_TIM3_Init+0x94>)
 80013c8:	f002 f9b4 	bl	8003734 <HAL_TIM_ConfigClockSource>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80013d2:	f7ff fe7b 	bl	80010cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013d6:	2320      	movs	r3, #32
 80013d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013de:	463b      	mov	r3, r7
 80013e0:	4619      	mov	r1, r3
 80013e2:	4806      	ldr	r0, [pc, #24]	@ (80013fc <MX_TIM3_Init+0x94>)
 80013e4:	f002 fbd6 	bl	8003b94 <HAL_TIMEx_MasterConfigSynchronization>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80013ee:	f7ff fe6d 	bl	80010cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013f2:	bf00      	nop
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000240 	.word	0x20000240
 8001400:	40000400 	.word	0x40000400

08001404 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a0b      	ldr	r2, [pc, #44]	@ (8001440 <HAL_TIM_Base_MspInit+0x3c>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d10d      	bne.n	8001432 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	4b0a      	ldr	r3, [pc, #40]	@ (8001444 <HAL_TIM_Base_MspInit+0x40>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141e:	4a09      	ldr	r2, [pc, #36]	@ (8001444 <HAL_TIM_Base_MspInit+0x40>)
 8001420:	f043 0302 	orr.w	r3, r3, #2
 8001424:	6413      	str	r3, [r2, #64]	@ 0x40
 8001426:	4b07      	ldr	r3, [pc, #28]	@ (8001444 <HAL_TIM_Base_MspInit+0x40>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001432:	bf00      	nop
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	40000400 	.word	0x40000400
 8001444:	40023800 	.word	0x40023800

08001448 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800144c:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <MX_USART2_UART_Init+0x4c>)
 800144e:	4a12      	ldr	r2, [pc, #72]	@ (8001498 <MX_USART2_UART_Init+0x50>)
 8001450:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001452:	4b10      	ldr	r3, [pc, #64]	@ (8001494 <MX_USART2_UART_Init+0x4c>)
 8001454:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001458:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800145a:	4b0e      	ldr	r3, [pc, #56]	@ (8001494 <MX_USART2_UART_Init+0x4c>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001460:	4b0c      	ldr	r3, [pc, #48]	@ (8001494 <MX_USART2_UART_Init+0x4c>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001466:	4b0b      	ldr	r3, [pc, #44]	@ (8001494 <MX_USART2_UART_Init+0x4c>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800146c:	4b09      	ldr	r3, [pc, #36]	@ (8001494 <MX_USART2_UART_Init+0x4c>)
 800146e:	220c      	movs	r2, #12
 8001470:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001472:	4b08      	ldr	r3, [pc, #32]	@ (8001494 <MX_USART2_UART_Init+0x4c>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001478:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <MX_USART2_UART_Init+0x4c>)
 800147a:	2200      	movs	r2, #0
 800147c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800147e:	4805      	ldr	r0, [pc, #20]	@ (8001494 <MX_USART2_UART_Init+0x4c>)
 8001480:	f002 fc18 	bl	8003cb4 <HAL_UART_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800148a:	f7ff fe1f 	bl	80010cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000288 	.word	0x20000288
 8001498:	40004400 	.word	0x40004400

0800149c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08a      	sub	sp, #40	@ 0x28
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a19      	ldr	r2, [pc, #100]	@ (8001520 <HAL_UART_MspInit+0x84>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d12b      	bne.n	8001516 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	4b18      	ldr	r3, [pc, #96]	@ (8001524 <HAL_UART_MspInit+0x88>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c6:	4a17      	ldr	r2, [pc, #92]	@ (8001524 <HAL_UART_MspInit+0x88>)
 80014c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ce:	4b15      	ldr	r3, [pc, #84]	@ (8001524 <HAL_UART_MspInit+0x88>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	4b11      	ldr	r3, [pc, #68]	@ (8001524 <HAL_UART_MspInit+0x88>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	4a10      	ldr	r2, [pc, #64]	@ (8001524 <HAL_UART_MspInit+0x88>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001524 <HAL_UART_MspInit+0x88>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014f6:	230c      	movs	r3, #12
 80014f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001502:	2303      	movs	r3, #3
 8001504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001506:	2307      	movs	r3, #7
 8001508:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	4619      	mov	r1, r3
 8001510:	4805      	ldr	r0, [pc, #20]	@ (8001528 <HAL_UART_MspInit+0x8c>)
 8001512:	f000 ffed 	bl	80024f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001516:	bf00      	nop
 8001518:	3728      	adds	r7, #40	@ 0x28
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40004400 	.word	0x40004400
 8001524:	40023800 	.word	0x40023800
 8001528:	40020000 	.word	0x40020000

0800152c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800152c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001564 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001530:	f7ff ff08 	bl	8001344 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001534:	480c      	ldr	r0, [pc, #48]	@ (8001568 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001536:	490d      	ldr	r1, [pc, #52]	@ (800156c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001538:	4a0d      	ldr	r2, [pc, #52]	@ (8001570 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800153a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800153c:	e002      	b.n	8001544 <LoopCopyDataInit>

0800153e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800153e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001542:	3304      	adds	r3, #4

08001544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001548:	d3f9      	bcc.n	800153e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800154a:	4a0a      	ldr	r2, [pc, #40]	@ (8001574 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800154c:	4c0a      	ldr	r4, [pc, #40]	@ (8001578 <LoopFillZerobss+0x22>)
  movs r3, #0
 800154e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001550:	e001      	b.n	8001556 <LoopFillZerobss>

08001552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001554:	3204      	adds	r2, #4

08001556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001558:	d3fb      	bcc.n	8001552 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800155a:	f007 f9dd 	bl	8008918 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800155e:	f7ff fd13 	bl	8000f88 <main>
  bx  lr    
 8001562:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001564:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800156c:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8001570:	080093b0 	.word	0x080093b0
  ldr r2, =_sbss
 8001574:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 8001578:	20008d6c 	.word	0x20008d6c

0800157c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800157c:	e7fe      	b.n	800157c <CAN1_RX0_IRQHandler>
	...

08001580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001584:	4b0e      	ldr	r3, [pc, #56]	@ (80015c0 <HAL_Init+0x40>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a0d      	ldr	r2, [pc, #52]	@ (80015c0 <HAL_Init+0x40>)
 800158a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800158e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001590:	4b0b      	ldr	r3, [pc, #44]	@ (80015c0 <HAL_Init+0x40>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a0a      	ldr	r2, [pc, #40]	@ (80015c0 <HAL_Init+0x40>)
 8001596:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800159a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800159c:	4b08      	ldr	r3, [pc, #32]	@ (80015c0 <HAL_Init+0x40>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a07      	ldr	r2, [pc, #28]	@ (80015c0 <HAL_Init+0x40>)
 80015a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015a8:	2003      	movs	r0, #3
 80015aa:	f000 fc82 	bl	8001eb2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ae:	200f      	movs	r0, #15
 80015b0:	f7ff fdbe 	bl	8001130 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015b4:	f7ff fd90 	bl	80010d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40023c00 	.word	0x40023c00

080015c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015c8:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <HAL_IncTick+0x20>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b06      	ldr	r3, [pc, #24]	@ (80015e8 <HAL_IncTick+0x24>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4413      	add	r3, r2
 80015d4:	4a04      	ldr	r2, [pc, #16]	@ (80015e8 <HAL_IncTick+0x24>)
 80015d6:	6013      	str	r3, [r2, #0]
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	2000007c 	.word	0x2000007c
 80015e8:	200002d0 	.word	0x200002d0

080015ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  return uwTick;
 80015f0:	4b03      	ldr	r3, [pc, #12]	@ (8001600 <HAL_GetTick+0x14>)
 80015f2:	681b      	ldr	r3, [r3, #0]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	200002d0 	.word	0x200002d0

08001604 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800160c:	2300      	movs	r3, #0
 800160e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e033      	b.n	8001682 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161e:	2b00      	cmp	r3, #0
 8001620:	d109      	bne.n	8001636 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff fb26 	bl	8000c74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163a:	f003 0310 	and.w	r3, r3, #16
 800163e:	2b00      	cmp	r3, #0
 8001640:	d118      	bne.n	8001674 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001646:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800164a:	f023 0302 	bic.w	r3, r3, #2
 800164e:	f043 0202 	orr.w	r2, r3, #2
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f000 fa78 	bl	8001b4c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001666:	f023 0303 	bic.w	r3, r3, #3
 800166a:	f043 0201 	orr.w	r2, r3, #1
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	641a      	str	r2, [r3, #64]	@ 0x40
 8001672:	e001      	b.n	8001678 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001680:	7bfb      	ldrb	r3, [r7, #15]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b086      	sub	sp, #24
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	f003 0320 	and.w	r3, r3, #32
 80016b8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d049      	beq.n	8001754 <HAL_ADC_IRQHandler+0xca>
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d046      	beq.n	8001754 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ca:	f003 0310 	and.w	r3, r3, #16
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d105      	bne.n	80016de <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d12b      	bne.n	8001744 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d127      	bne.n	8001744 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016fa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d006      	beq.n	8001710 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800170c:	2b00      	cmp	r3, #0
 800170e:	d119      	bne.n	8001744 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 0220 	bic.w	r2, r2, #32
 800171e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001724:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001730:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d105      	bne.n	8001744 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173c:	f043 0201 	orr.w	r2, r3, #1
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 f8b0 	bl	80018aa <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f06f 0212 	mvn.w	r2, #18
 8001752:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f003 0304 	and.w	r3, r3, #4
 800175a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001762:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d057      	beq.n	800181a <HAL_ADC_IRQHandler+0x190>
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d054      	beq.n	800181a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001774:	f003 0310 	and.w	r3, r3, #16
 8001778:	2b00      	cmp	r3, #0
 800177a:	d105      	bne.n	8001788 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001780:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d139      	bne.n	800180a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800179c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d006      	beq.n	80017b2 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d12b      	bne.n	800180a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d124      	bne.n	800180a <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d11d      	bne.n	800180a <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d119      	bne.n	800180a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80017e4:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d105      	bne.n	800180a <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	f043 0201 	orr.w	r2, r3, #1
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 fa9a 	bl	8001d44 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f06f 020c 	mvn.w	r2, #12
 8001818:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001828:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d017      	beq.n	8001860 <HAL_ADC_IRQHandler+0x1d6>
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d014      	beq.n	8001860 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	2b01      	cmp	r3, #1
 8001842:	d10d      	bne.n	8001860 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001848:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f000 f834 	bl	80018be <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f06f 0201 	mvn.w	r2, #1
 800185e:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f003 0320 	and.w	r3, r3, #32
 8001866:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800186e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d015      	beq.n	80018a2 <HAL_ADC_IRQHandler+0x218>
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d012      	beq.n	80018a2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001880:	f043 0202 	orr.w	r2, r3, #2
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f06f 0220 	mvn.w	r2, #32
 8001890:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 f81d 	bl	80018d2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f06f 0220 	mvn.w	r2, #32
 80018a0:	601a      	str	r2, [r3, #0]
  }
}
 80018a2:	bf00      	nop
 80018a4:	3718      	adds	r7, #24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b083      	sub	sp, #12
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
	...

080018e8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80018f2:	2300      	movs	r3, #0
 80018f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d101      	bne.n	8001904 <HAL_ADC_ConfigChannel+0x1c>
 8001900:	2302      	movs	r3, #2
 8001902:	e113      	b.n	8001b2c <HAL_ADC_ConfigChannel+0x244>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b09      	cmp	r3, #9
 8001912:	d925      	bls.n	8001960 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	68d9      	ldr	r1, [r3, #12]
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	b29b      	uxth	r3, r3
 8001920:	461a      	mov	r2, r3
 8001922:	4613      	mov	r3, r2
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	4413      	add	r3, r2
 8001928:	3b1e      	subs	r3, #30
 800192a:	2207      	movs	r2, #7
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43da      	mvns	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	400a      	ands	r2, r1
 8001938:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	68d9      	ldr	r1, [r3, #12]
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	b29b      	uxth	r3, r3
 800194a:	4618      	mov	r0, r3
 800194c:	4603      	mov	r3, r0
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	4403      	add	r3, r0
 8001952:	3b1e      	subs	r3, #30
 8001954:	409a      	lsls	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	430a      	orrs	r2, r1
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	e022      	b.n	80019a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6919      	ldr	r1, [r3, #16]
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	b29b      	uxth	r3, r3
 800196c:	461a      	mov	r2, r3
 800196e:	4613      	mov	r3, r2
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	4413      	add	r3, r2
 8001974:	2207      	movs	r2, #7
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43da      	mvns	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	400a      	ands	r2, r1
 8001982:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6919      	ldr	r1, [r3, #16]
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	689a      	ldr	r2, [r3, #8]
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	b29b      	uxth	r3, r3
 8001994:	4618      	mov	r0, r3
 8001996:	4603      	mov	r3, r0
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	4403      	add	r3, r0
 800199c:	409a      	lsls	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b06      	cmp	r3, #6
 80019ac:	d824      	bhi.n	80019f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685a      	ldr	r2, [r3, #4]
 80019b8:	4613      	mov	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	3b05      	subs	r3, #5
 80019c0:	221f      	movs	r2, #31
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43da      	mvns	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	400a      	ands	r2, r1
 80019ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	b29b      	uxth	r3, r3
 80019dc:	4618      	mov	r0, r3
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	4613      	mov	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	3b05      	subs	r3, #5
 80019ea:	fa00 f203 	lsl.w	r2, r0, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	430a      	orrs	r2, r1
 80019f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80019f6:	e04c      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b0c      	cmp	r3, #12
 80019fe:	d824      	bhi.n	8001a4a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	3b23      	subs	r3, #35	@ 0x23
 8001a12:	221f      	movs	r2, #31
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43da      	mvns	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	400a      	ands	r2, r1
 8001a20:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	4618      	mov	r0, r3
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	4613      	mov	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	3b23      	subs	r3, #35	@ 0x23
 8001a3c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	430a      	orrs	r2, r1
 8001a46:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a48:	e023      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	4613      	mov	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	3b41      	subs	r3, #65	@ 0x41
 8001a5c:	221f      	movs	r2, #31
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43da      	mvns	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	400a      	ands	r2, r1
 8001a6a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	4618      	mov	r0, r3
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685a      	ldr	r2, [r3, #4]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	3b41      	subs	r3, #65	@ 0x41
 8001a86:	fa00 f203 	lsl.w	r2, r0, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a92:	4b29      	ldr	r3, [pc, #164]	@ (8001b38 <HAL_ADC_ConfigChannel+0x250>)
 8001a94:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a28      	ldr	r2, [pc, #160]	@ (8001b3c <HAL_ADC_ConfigChannel+0x254>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d10f      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x1d8>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b12      	cmp	r3, #18
 8001aa6:	d10b      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a1d      	ldr	r2, [pc, #116]	@ (8001b3c <HAL_ADC_ConfigChannel+0x254>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d12b      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x23a>
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a1c      	ldr	r2, [pc, #112]	@ (8001b40 <HAL_ADC_ConfigChannel+0x258>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d003      	beq.n	8001adc <HAL_ADC_ConfigChannel+0x1f4>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b11      	cmp	r3, #17
 8001ada:	d122      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a11      	ldr	r2, [pc, #68]	@ (8001b40 <HAL_ADC_ConfigChannel+0x258>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d111      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001afe:	4b11      	ldr	r3, [pc, #68]	@ (8001b44 <HAL_ADC_ConfigChannel+0x25c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a11      	ldr	r2, [pc, #68]	@ (8001b48 <HAL_ADC_ConfigChannel+0x260>)
 8001b04:	fba2 2303 	umull	r2, r3, r2, r3
 8001b08:	0c9a      	lsrs	r2, r3, #18
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b14:	e002      	b.n	8001b1c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f9      	bne.n	8001b16 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	40012300 	.word	0x40012300
 8001b3c:	40012000 	.word	0x40012000
 8001b40:	10000012 	.word	0x10000012
 8001b44:	20000074 	.word	0x20000074
 8001b48:	431bde83 	.word	0x431bde83

08001b4c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b54:	4b79      	ldr	r3, [pc, #484]	@ (8001d3c <ADC_Init+0x1f0>)
 8001b56:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6859      	ldr	r1, [r3, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	021a      	lsls	r2, r3, #8
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001ba4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6859      	ldr	r1, [r3, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	689a      	ldr	r2, [r3, #8]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6899      	ldr	r1, [r3, #8]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68da      	ldr	r2, [r3, #12]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bde:	4a58      	ldr	r2, [pc, #352]	@ (8001d40 <ADC_Init+0x1f4>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d022      	beq.n	8001c2a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001bf2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6899      	ldr	r1, [r3, #8]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6899      	ldr	r1, [r3, #8]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	e00f      	b.n	8001c4a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c48:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 0202 	bic.w	r2, r2, #2
 8001c58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6899      	ldr	r1, [r3, #8]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	7e1b      	ldrb	r3, [r3, #24]
 8001c64:	005a      	lsls	r2, r3, #1
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d01b      	beq.n	8001cb0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	685a      	ldr	r2, [r3, #4]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c86:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001c96:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6859      	ldr	r1, [r3, #4]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	035a      	lsls	r2, r3, #13
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	430a      	orrs	r2, r1
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	e007      	b.n	8001cc0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cbe:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001cce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	051a      	lsls	r2, r3, #20
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001cf4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6899      	ldr	r1, [r3, #8]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d02:	025a      	lsls	r2, r3, #9
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689a      	ldr	r2, [r3, #8]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6899      	ldr	r1, [r3, #8]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	029a      	lsls	r2, r3, #10
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	609a      	str	r2, [r3, #8]
}
 8001d30:	bf00      	nop
 8001d32:	3714      	adds	r7, #20
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	40012300 	.word	0x40012300
 8001d40:	0f000001 	.word	0x0f000001

08001d44 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d68:	4b0c      	ldr	r3, [pc, #48]	@ (8001d9c <__NVIC_SetPriorityGrouping+0x44>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d74:	4013      	ands	r3, r2
 8001d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d8a:	4a04      	ldr	r2, [pc, #16]	@ (8001d9c <__NVIC_SetPriorityGrouping+0x44>)
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	60d3      	str	r3, [r2, #12]
}
 8001d90:	bf00      	nop
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001da4:	4b04      	ldr	r3, [pc, #16]	@ (8001db8 <__NVIC_GetPriorityGrouping+0x18>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	0a1b      	lsrs	r3, r3, #8
 8001daa:	f003 0307 	and.w	r3, r3, #7
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	db0b      	blt.n	8001de6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	f003 021f 	and.w	r2, r3, #31
 8001dd4:	4907      	ldr	r1, [pc, #28]	@ (8001df4 <__NVIC_EnableIRQ+0x38>)
 8001dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dda:	095b      	lsrs	r3, r3, #5
 8001ddc:	2001      	movs	r0, #1
 8001dde:	fa00 f202 	lsl.w	r2, r0, r2
 8001de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	e000e100 	.word	0xe000e100

08001df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	6039      	str	r1, [r7, #0]
 8001e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	db0a      	blt.n	8001e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	490c      	ldr	r1, [pc, #48]	@ (8001e44 <__NVIC_SetPriority+0x4c>)
 8001e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e16:	0112      	lsls	r2, r2, #4
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e20:	e00a      	b.n	8001e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	4908      	ldr	r1, [pc, #32]	@ (8001e48 <__NVIC_SetPriority+0x50>)
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	3b04      	subs	r3, #4
 8001e30:	0112      	lsls	r2, r2, #4
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	440b      	add	r3, r1
 8001e36:	761a      	strb	r2, [r3, #24]
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	e000e100 	.word	0xe000e100
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b089      	sub	sp, #36	@ 0x24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	f1c3 0307 	rsb	r3, r3, #7
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	bf28      	it	cs
 8001e6a:	2304      	movcs	r3, #4
 8001e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3304      	adds	r3, #4
 8001e72:	2b06      	cmp	r3, #6
 8001e74:	d902      	bls.n	8001e7c <NVIC_EncodePriority+0x30>
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	3b03      	subs	r3, #3
 8001e7a:	e000      	b.n	8001e7e <NVIC_EncodePriority+0x32>
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e80:	f04f 32ff 	mov.w	r2, #4294967295
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43da      	mvns	r2, r3
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	401a      	ands	r2, r3
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e94:	f04f 31ff 	mov.w	r1, #4294967295
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9e:	43d9      	mvns	r1, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea4:	4313      	orrs	r3, r2
         );
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3724      	adds	r7, #36	@ 0x24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff ff4c 	bl	8001d58 <__NVIC_SetPriorityGrouping>
}
 8001ec0:	bf00      	nop
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
 8001ed4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eda:	f7ff ff61 	bl	8001da0 <__NVIC_GetPriorityGrouping>
 8001ede:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	68b9      	ldr	r1, [r7, #8]
 8001ee4:	6978      	ldr	r0, [r7, #20]
 8001ee6:	f7ff ffb1 	bl	8001e4c <NVIC_EncodePriority>
 8001eea:	4602      	mov	r2, r0
 8001eec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ef0:	4611      	mov	r1, r2
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff ff80 	bl	8001df8 <__NVIC_SetPriority>
}
 8001ef8:	bf00      	nop
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff ff54 	bl	8001dbc <__NVIC_EnableIRQ>
}
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f28:	f7ff fb60 	bl	80015ec <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e099      	b.n	800206c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0201 	bic.w	r2, r2, #1
 8001f56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f58:	e00f      	b.n	8001f7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f5a:	f7ff fb47 	bl	80015ec <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b05      	cmp	r3, #5
 8001f66:	d908      	bls.n	8001f7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2203      	movs	r2, #3
 8001f72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e078      	b.n	800206c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1e8      	bne.n	8001f5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	4b38      	ldr	r3, [pc, #224]	@ (8002074 <HAL_DMA_Init+0x158>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd0:	2b04      	cmp	r3, #4
 8001fd2:	d107      	bne.n	8001fe4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	f023 0307 	bic.w	r3, r3, #7
 8001ffa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	4313      	orrs	r3, r2
 8002004:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200a:	2b04      	cmp	r3, #4
 800200c:	d117      	bne.n	800203e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	4313      	orrs	r3, r2
 8002016:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00e      	beq.n	800203e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 f9e9 	bl	80023f8 <DMA_CheckFifoParam>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d008      	beq.n	800203e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2240      	movs	r2, #64	@ 0x40
 8002030:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800203a:	2301      	movs	r3, #1
 800203c:	e016      	b.n	800206c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f9a0 	bl	800238c <DMA_CalcBaseAndBitshift>
 800204c:	4603      	mov	r3, r0
 800204e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002054:	223f      	movs	r2, #63	@ 0x3f
 8002056:	409a      	lsls	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	f010803f 	.word	0xf010803f

08002078 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002084:	4b8e      	ldr	r3, [pc, #568]	@ (80022c0 <HAL_DMA_IRQHandler+0x248>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a8e      	ldr	r2, [pc, #568]	@ (80022c4 <HAL_DMA_IRQHandler+0x24c>)
 800208a:	fba2 2303 	umull	r2, r3, r2, r3
 800208e:	0a9b      	lsrs	r3, r3, #10
 8002090:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002096:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a2:	2208      	movs	r2, #8
 80020a4:	409a      	lsls	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	4013      	ands	r3, r2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d01a      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d013      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0204 	bic.w	r2, r2, #4
 80020ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d0:	2208      	movs	r2, #8
 80020d2:	409a      	lsls	r2, r3
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020dc:	f043 0201 	orr.w	r2, r3, #1
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e8:	2201      	movs	r2, #1
 80020ea:	409a      	lsls	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4013      	ands	r3, r2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d012      	beq.n	800211a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00b      	beq.n	800211a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002106:	2201      	movs	r2, #1
 8002108:	409a      	lsls	r2, r3
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002112:	f043 0202 	orr.w	r2, r3, #2
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800211e:	2204      	movs	r2, #4
 8002120:	409a      	lsls	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4013      	ands	r3, r2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d012      	beq.n	8002150 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00b      	beq.n	8002150 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800213c:	2204      	movs	r2, #4
 800213e:	409a      	lsls	r2, r3
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002148:	f043 0204 	orr.w	r2, r3, #4
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002154:	2210      	movs	r2, #16
 8002156:	409a      	lsls	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4013      	ands	r3, r2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d043      	beq.n	80021e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b00      	cmp	r3, #0
 800216c:	d03c      	beq.n	80021e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002172:	2210      	movs	r2, #16
 8002174:	409a      	lsls	r2, r3
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d018      	beq.n	80021ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d108      	bne.n	80021a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219a:	2b00      	cmp	r3, #0
 800219c:	d024      	beq.n	80021e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	4798      	blx	r3
 80021a6:	e01f      	b.n	80021e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d01b      	beq.n	80021e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	4798      	blx	r3
 80021b8:	e016      	b.n	80021e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d107      	bne.n	80021d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 0208 	bic.w	r2, r2, #8
 80021d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ec:	2220      	movs	r2, #32
 80021ee:	409a      	lsls	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 808f 	beq.w	8002318 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0310 	and.w	r3, r3, #16
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 8087 	beq.w	8002318 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800220e:	2220      	movs	r2, #32
 8002210:	409a      	lsls	r2, r3
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b05      	cmp	r3, #5
 8002220:	d136      	bne.n	8002290 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 0216 	bic.w	r2, r2, #22
 8002230:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	695a      	ldr	r2, [r3, #20]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002240:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002246:	2b00      	cmp	r3, #0
 8002248:	d103      	bne.n	8002252 <HAL_DMA_IRQHandler+0x1da>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800224e:	2b00      	cmp	r3, #0
 8002250:	d007      	beq.n	8002262 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 0208 	bic.w	r2, r2, #8
 8002260:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002266:	223f      	movs	r2, #63	@ 0x3f
 8002268:	409a      	lsls	r2, r3
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002282:	2b00      	cmp	r3, #0
 8002284:	d07e      	beq.n	8002384 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	4798      	blx	r3
        }
        return;
 800228e:	e079      	b.n	8002384 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d01d      	beq.n	80022da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10d      	bne.n	80022c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d031      	beq.n	8002318 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	4798      	blx	r3
 80022bc:	e02c      	b.n	8002318 <HAL_DMA_IRQHandler+0x2a0>
 80022be:	bf00      	nop
 80022c0:	20000074 	.word	0x20000074
 80022c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d023      	beq.n	8002318 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	4798      	blx	r3
 80022d8:	e01e      	b.n	8002318 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10f      	bne.n	8002308 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0210 	bic.w	r2, r2, #16
 80022f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800231c:	2b00      	cmp	r3, #0
 800231e:	d032      	beq.n	8002386 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	2b00      	cmp	r3, #0
 800232a:	d022      	beq.n	8002372 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2205      	movs	r2, #5
 8002330:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0201 	bic.w	r2, r2, #1
 8002342:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	3301      	adds	r3, #1
 8002348:	60bb      	str	r3, [r7, #8]
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	429a      	cmp	r2, r3
 800234e:	d307      	bcc.n	8002360 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f2      	bne.n	8002344 <HAL_DMA_IRQHandler+0x2cc>
 800235e:	e000      	b.n	8002362 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002360:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002376:	2b00      	cmp	r3, #0
 8002378:	d005      	beq.n	8002386 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	4798      	blx	r3
 8002382:	e000      	b.n	8002386 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002384:	bf00      	nop
    }
  }
}
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	b2db      	uxtb	r3, r3
 800239a:	3b10      	subs	r3, #16
 800239c:	4a14      	ldr	r2, [pc, #80]	@ (80023f0 <DMA_CalcBaseAndBitshift+0x64>)
 800239e:	fba2 2303 	umull	r2, r3, r2, r3
 80023a2:	091b      	lsrs	r3, r3, #4
 80023a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023a6:	4a13      	ldr	r2, [pc, #76]	@ (80023f4 <DMA_CalcBaseAndBitshift+0x68>)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4413      	add	r3, r2
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	461a      	mov	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	d909      	bls.n	80023ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80023c2:	f023 0303 	bic.w	r3, r3, #3
 80023c6:	1d1a      	adds	r2, r3, #4
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	659a      	str	r2, [r3, #88]	@ 0x58
 80023cc:	e007      	b.n	80023de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80023d6:	f023 0303 	bic.w	r3, r3, #3
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	aaaaaaab 	.word	0xaaaaaaab
 80023f4:	08009364 	.word	0x08009364

080023f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002408:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d11f      	bne.n	8002452 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	2b03      	cmp	r3, #3
 8002416:	d856      	bhi.n	80024c6 <DMA_CheckFifoParam+0xce>
 8002418:	a201      	add	r2, pc, #4	@ (adr r2, 8002420 <DMA_CheckFifoParam+0x28>)
 800241a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800241e:	bf00      	nop
 8002420:	08002431 	.word	0x08002431
 8002424:	08002443 	.word	0x08002443
 8002428:	08002431 	.word	0x08002431
 800242c:	080024c7 	.word	0x080024c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002434:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d046      	beq.n	80024ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002440:	e043      	b.n	80024ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002446:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800244a:	d140      	bne.n	80024ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002450:	e03d      	b.n	80024ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800245a:	d121      	bne.n	80024a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2b03      	cmp	r3, #3
 8002460:	d837      	bhi.n	80024d2 <DMA_CheckFifoParam+0xda>
 8002462:	a201      	add	r2, pc, #4	@ (adr r2, 8002468 <DMA_CheckFifoParam+0x70>)
 8002464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002468:	08002479 	.word	0x08002479
 800246c:	0800247f 	.word	0x0800247f
 8002470:	08002479 	.word	0x08002479
 8002474:	08002491 	.word	0x08002491
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	73fb      	strb	r3, [r7, #15]
      break;
 800247c:	e030      	b.n	80024e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002482:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d025      	beq.n	80024d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800248e:	e022      	b.n	80024d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002494:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002498:	d11f      	bne.n	80024da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800249e:	e01c      	b.n	80024da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d903      	bls.n	80024ae <DMA_CheckFifoParam+0xb6>
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	2b03      	cmp	r3, #3
 80024aa:	d003      	beq.n	80024b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024ac:	e018      	b.n	80024e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	73fb      	strb	r3, [r7, #15]
      break;
 80024b2:	e015      	b.n	80024e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00e      	beq.n	80024de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	73fb      	strb	r3, [r7, #15]
      break;
 80024c4:	e00b      	b.n	80024de <DMA_CheckFifoParam+0xe6>
      break;
 80024c6:	bf00      	nop
 80024c8:	e00a      	b.n	80024e0 <DMA_CheckFifoParam+0xe8>
      break;
 80024ca:	bf00      	nop
 80024cc:	e008      	b.n	80024e0 <DMA_CheckFifoParam+0xe8>
      break;
 80024ce:	bf00      	nop
 80024d0:	e006      	b.n	80024e0 <DMA_CheckFifoParam+0xe8>
      break;
 80024d2:	bf00      	nop
 80024d4:	e004      	b.n	80024e0 <DMA_CheckFifoParam+0xe8>
      break;
 80024d6:	bf00      	nop
 80024d8:	e002      	b.n	80024e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80024da:	bf00      	nop
 80024dc:	e000      	b.n	80024e0 <DMA_CheckFifoParam+0xe8>
      break;
 80024de:	bf00      	nop
    }
  } 
  
  return status; 
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop

080024f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b089      	sub	sp, #36	@ 0x24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024fe:	2300      	movs	r3, #0
 8002500:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002502:	2300      	movs	r3, #0
 8002504:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002506:	2300      	movs	r3, #0
 8002508:	61fb      	str	r3, [r7, #28]
 800250a:	e165      	b.n	80027d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800250c:	2201      	movs	r2, #1
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	4013      	ands	r3, r2
 800251e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	429a      	cmp	r2, r3
 8002526:	f040 8154 	bne.w	80027d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	2b01      	cmp	r3, #1
 8002534:	d005      	beq.n	8002542 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800253e:	2b02      	cmp	r3, #2
 8002540:	d130      	bne.n	80025a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	2203      	movs	r2, #3
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43db      	mvns	r3, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4013      	ands	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4313      	orrs	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002578:	2201      	movs	r2, #1
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	091b      	lsrs	r3, r3, #4
 800258e:	f003 0201 	and.w	r2, r3, #1
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	2b03      	cmp	r3, #3
 80025ae:	d017      	beq.n	80025e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	2203      	movs	r2, #3
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4013      	ands	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 0303 	and.w	r3, r3, #3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d123      	bne.n	8002634 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	08da      	lsrs	r2, r3, #3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3208      	adds	r2, #8
 80025f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	220f      	movs	r2, #15
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	691a      	ldr	r2, [r3, #16]
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	08da      	lsrs	r2, r3, #3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	3208      	adds	r2, #8
 800262e:	69b9      	ldr	r1, [r7, #24]
 8002630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	2203      	movs	r2, #3
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 0203 	and.w	r2, r3, #3
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 80ae 	beq.w	80027d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	4b5d      	ldr	r3, [pc, #372]	@ (80027f0 <HAL_GPIO_Init+0x300>)
 800267c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800267e:	4a5c      	ldr	r2, [pc, #368]	@ (80027f0 <HAL_GPIO_Init+0x300>)
 8002680:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002684:	6453      	str	r3, [r2, #68]	@ 0x44
 8002686:	4b5a      	ldr	r3, [pc, #360]	@ (80027f0 <HAL_GPIO_Init+0x300>)
 8002688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800268a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002692:	4a58      	ldr	r2, [pc, #352]	@ (80027f4 <HAL_GPIO_Init+0x304>)
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	089b      	lsrs	r3, r3, #2
 8002698:	3302      	adds	r3, #2
 800269a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800269e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	220f      	movs	r2, #15
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4013      	ands	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a4f      	ldr	r2, [pc, #316]	@ (80027f8 <HAL_GPIO_Init+0x308>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d025      	beq.n	800270a <HAL_GPIO_Init+0x21a>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a4e      	ldr	r2, [pc, #312]	@ (80027fc <HAL_GPIO_Init+0x30c>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d01f      	beq.n	8002706 <HAL_GPIO_Init+0x216>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a4d      	ldr	r2, [pc, #308]	@ (8002800 <HAL_GPIO_Init+0x310>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d019      	beq.n	8002702 <HAL_GPIO_Init+0x212>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a4c      	ldr	r2, [pc, #304]	@ (8002804 <HAL_GPIO_Init+0x314>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d013      	beq.n	80026fe <HAL_GPIO_Init+0x20e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a4b      	ldr	r2, [pc, #300]	@ (8002808 <HAL_GPIO_Init+0x318>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d00d      	beq.n	80026fa <HAL_GPIO_Init+0x20a>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a4a      	ldr	r2, [pc, #296]	@ (800280c <HAL_GPIO_Init+0x31c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d007      	beq.n	80026f6 <HAL_GPIO_Init+0x206>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a49      	ldr	r2, [pc, #292]	@ (8002810 <HAL_GPIO_Init+0x320>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d101      	bne.n	80026f2 <HAL_GPIO_Init+0x202>
 80026ee:	2306      	movs	r3, #6
 80026f0:	e00c      	b.n	800270c <HAL_GPIO_Init+0x21c>
 80026f2:	2307      	movs	r3, #7
 80026f4:	e00a      	b.n	800270c <HAL_GPIO_Init+0x21c>
 80026f6:	2305      	movs	r3, #5
 80026f8:	e008      	b.n	800270c <HAL_GPIO_Init+0x21c>
 80026fa:	2304      	movs	r3, #4
 80026fc:	e006      	b.n	800270c <HAL_GPIO_Init+0x21c>
 80026fe:	2303      	movs	r3, #3
 8002700:	e004      	b.n	800270c <HAL_GPIO_Init+0x21c>
 8002702:	2302      	movs	r3, #2
 8002704:	e002      	b.n	800270c <HAL_GPIO_Init+0x21c>
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <HAL_GPIO_Init+0x21c>
 800270a:	2300      	movs	r3, #0
 800270c:	69fa      	ldr	r2, [r7, #28]
 800270e:	f002 0203 	and.w	r2, r2, #3
 8002712:	0092      	lsls	r2, r2, #2
 8002714:	4093      	lsls	r3, r2
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4313      	orrs	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800271c:	4935      	ldr	r1, [pc, #212]	@ (80027f4 <HAL_GPIO_Init+0x304>)
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	089b      	lsrs	r3, r3, #2
 8002722:	3302      	adds	r3, #2
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800272a:	4b3a      	ldr	r3, [pc, #232]	@ (8002814 <HAL_GPIO_Init+0x324>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	43db      	mvns	r3, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4013      	ands	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800274e:	4a31      	ldr	r2, [pc, #196]	@ (8002814 <HAL_GPIO_Init+0x324>)
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002754:	4b2f      	ldr	r3, [pc, #188]	@ (8002814 <HAL_GPIO_Init+0x324>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d003      	beq.n	8002778 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002778:	4a26      	ldr	r2, [pc, #152]	@ (8002814 <HAL_GPIO_Init+0x324>)
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800277e:	4b25      	ldr	r3, [pc, #148]	@ (8002814 <HAL_GPIO_Init+0x324>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	43db      	mvns	r3, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4013      	ands	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	4313      	orrs	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002814 <HAL_GPIO_Init+0x324>)
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002814 <HAL_GPIO_Init+0x324>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027cc:	4a11      	ldr	r2, [pc, #68]	@ (8002814 <HAL_GPIO_Init+0x324>)
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	3301      	adds	r3, #1
 80027d6:	61fb      	str	r3, [r7, #28]
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	2b0f      	cmp	r3, #15
 80027dc:	f67f ae96 	bls.w	800250c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027e0:	bf00      	nop
 80027e2:	bf00      	nop
 80027e4:	3724      	adds	r7, #36	@ 0x24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40013800 	.word	0x40013800
 80027f8:	40020000 	.word	0x40020000
 80027fc:	40020400 	.word	0x40020400
 8002800:	40020800 	.word	0x40020800
 8002804:	40020c00 	.word	0x40020c00
 8002808:	40021000 	.word	0x40021000
 800280c:	40021400 	.word	0x40021400
 8002810:	40021800 	.word	0x40021800
 8002814:	40013c00 	.word	0x40013c00

08002818 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	460b      	mov	r3, r1
 8002822:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691a      	ldr	r2, [r3, #16]
 8002828:	887b      	ldrh	r3, [r7, #2]
 800282a:	4013      	ands	r3, r2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d002      	beq.n	8002836 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002830:	2301      	movs	r3, #1
 8002832:	73fb      	strb	r3, [r7, #15]
 8002834:	e001      	b.n	800283a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002836:	2300      	movs	r3, #0
 8002838:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800283a:	7bfb      	ldrb	r3, [r7, #15]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	460b      	mov	r3, r1
 8002852:	807b      	strh	r3, [r7, #2]
 8002854:	4613      	mov	r3, r2
 8002856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002858:	787b      	ldrb	r3, [r7, #1]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800285e:	887a      	ldrh	r2, [r7, #2]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002864:	e003      	b.n	800286e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002866:	887b      	ldrh	r3, [r7, #2]
 8002868:	041a      	lsls	r2, r3, #16
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	619a      	str	r2, [r3, #24]
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
	...

0800287c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002886:	4b08      	ldr	r3, [pc, #32]	@ (80028a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002888:	695a      	ldr	r2, [r3, #20]
 800288a:	88fb      	ldrh	r3, [r7, #6]
 800288c:	4013      	ands	r3, r2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d006      	beq.n	80028a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002892:	4a05      	ldr	r2, [pc, #20]	@ (80028a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002894:	88fb      	ldrh	r3, [r7, #6]
 8002896:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002898:	88fb      	ldrh	r3, [r7, #6]
 800289a:	4618      	mov	r0, r3
 800289c:	f7fe f890 	bl	80009c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80028a0:	bf00      	nop
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40013c00 	.word	0x40013c00

080028ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e0cc      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028c0:	4b68      	ldr	r3, [pc, #416]	@ (8002a64 <HAL_RCC_ClockConfig+0x1b8>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 030f 	and.w	r3, r3, #15
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d90c      	bls.n	80028e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ce:	4b65      	ldr	r3, [pc, #404]	@ (8002a64 <HAL_RCC_ClockConfig+0x1b8>)
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d6:	4b63      	ldr	r3, [pc, #396]	@ (8002a64 <HAL_RCC_ClockConfig+0x1b8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d001      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e0b8      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d020      	beq.n	8002936 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d005      	beq.n	800290c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002900:	4b59      	ldr	r3, [pc, #356]	@ (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	4a58      	ldr	r2, [pc, #352]	@ (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002906:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800290a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0308 	and.w	r3, r3, #8
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002918:	4b53      	ldr	r3, [pc, #332]	@ (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	4a52      	ldr	r2, [pc, #328]	@ (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 800291e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002922:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002924:	4b50      	ldr	r3, [pc, #320]	@ (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	494d      	ldr	r1, [pc, #308]	@ (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	4313      	orrs	r3, r2
 8002934:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d044      	beq.n	80029cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d107      	bne.n	800295a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294a:	4b47      	ldr	r3, [pc, #284]	@ (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d119      	bne.n	800298a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e07f      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b02      	cmp	r3, #2
 8002960:	d003      	beq.n	800296a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002966:	2b03      	cmp	r3, #3
 8002968:	d107      	bne.n	800297a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800296a:	4b3f      	ldr	r3, [pc, #252]	@ (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d109      	bne.n	800298a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e06f      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800297a:	4b3b      	ldr	r3, [pc, #236]	@ (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e067      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800298a:	4b37      	ldr	r3, [pc, #220]	@ (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f023 0203 	bic.w	r2, r3, #3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	4934      	ldr	r1, [pc, #208]	@ (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002998:	4313      	orrs	r3, r2
 800299a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800299c:	f7fe fe26 	bl	80015ec <HAL_GetTick>
 80029a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a2:	e00a      	b.n	80029ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a4:	f7fe fe22 	bl	80015ec <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e04f      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ba:	4b2b      	ldr	r3, [pc, #172]	@ (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 020c 	and.w	r2, r3, #12
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d1eb      	bne.n	80029a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029cc:	4b25      	ldr	r3, [pc, #148]	@ (8002a64 <HAL_RCC_ClockConfig+0x1b8>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 030f 	and.w	r3, r3, #15
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d20c      	bcs.n	80029f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029da:	4b22      	ldr	r3, [pc, #136]	@ (8002a64 <HAL_RCC_ClockConfig+0x1b8>)
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e2:	4b20      	ldr	r3, [pc, #128]	@ (8002a64 <HAL_RCC_ClockConfig+0x1b8>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d001      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e032      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d008      	beq.n	8002a12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a00:	4b19      	ldr	r3, [pc, #100]	@ (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	4916      	ldr	r1, [pc, #88]	@ (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0308 	and.w	r3, r3, #8
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d009      	beq.n	8002a32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a1e:	4b12      	ldr	r3, [pc, #72]	@ (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	490e      	ldr	r1, [pc, #56]	@ (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a32:	f000 f887 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 8002a36:	4602      	mov	r2, r0
 8002a38:	4b0b      	ldr	r3, [pc, #44]	@ (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	091b      	lsrs	r3, r3, #4
 8002a3e:	f003 030f 	and.w	r3, r3, #15
 8002a42:	490a      	ldr	r1, [pc, #40]	@ (8002a6c <HAL_RCC_ClockConfig+0x1c0>)
 8002a44:	5ccb      	ldrb	r3, [r1, r3]
 8002a46:	fa22 f303 	lsr.w	r3, r2, r3
 8002a4a:	4a09      	ldr	r2, [pc, #36]	@ (8002a70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002a4e:	4b09      	ldr	r3, [pc, #36]	@ (8002a74 <HAL_RCC_ClockConfig+0x1c8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fe fb6c 	bl	8001130 <HAL_InitTick>

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40023c00 	.word	0x40023c00
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	0800934c 	.word	0x0800934c
 8002a70:	20000074 	.word	0x20000074
 8002a74:	20000078 	.word	0x20000078

08002a78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a7c:	4b03      	ldr	r3, [pc, #12]	@ (8002a8c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	20000074 	.word	0x20000074

08002a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a94:	f7ff fff0 	bl	8002a78 <HAL_RCC_GetHCLKFreq>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	4b05      	ldr	r3, [pc, #20]	@ (8002ab0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	0a9b      	lsrs	r3, r3, #10
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	4903      	ldr	r1, [pc, #12]	@ (8002ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aa6:	5ccb      	ldrb	r3, [r1, r3]
 8002aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	0800935c 	.word	0x0800935c

08002ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002abc:	f7ff ffdc 	bl	8002a78 <HAL_RCC_GetHCLKFreq>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	4b05      	ldr	r3, [pc, #20]	@ (8002ad8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	0b5b      	lsrs	r3, r3, #13
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	4903      	ldr	r1, [pc, #12]	@ (8002adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ace:	5ccb      	ldrb	r3, [r1, r3]
 8002ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	0800935c 	.word	0x0800935c

08002ae0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	220f      	movs	r2, #15
 8002aee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002af0:	4b12      	ldr	r3, [pc, #72]	@ (8002b3c <HAL_RCC_GetClockConfig+0x5c>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 0203 	and.w	r2, r3, #3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002afc:	4b0f      	ldr	r3, [pc, #60]	@ (8002b3c <HAL_RCC_GetClockConfig+0x5c>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b08:	4b0c      	ldr	r3, [pc, #48]	@ (8002b3c <HAL_RCC_GetClockConfig+0x5c>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002b14:	4b09      	ldr	r3, [pc, #36]	@ (8002b3c <HAL_RCC_GetClockConfig+0x5c>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	08db      	lsrs	r3, r3, #3
 8002b1a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b22:	4b07      	ldr	r3, [pc, #28]	@ (8002b40 <HAL_RCC_GetClockConfig+0x60>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 020f 	and.w	r2, r3, #15
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	601a      	str	r2, [r3, #0]
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	40023c00 	.word	0x40023c00

08002b44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b48:	b0a6      	sub	sp, #152	@ 0x98
 8002b4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002b52:	2300      	movs	r3, #0
 8002b54:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b6a:	4bc8      	ldr	r3, [pc, #800]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0x348>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 030c 	and.w	r3, r3, #12
 8002b72:	2b0c      	cmp	r3, #12
 8002b74:	f200 817e 	bhi.w	8002e74 <HAL_RCC_GetSysClockFreq+0x330>
 8002b78:	a201      	add	r2, pc, #4	@ (adr r2, 8002b80 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b7e:	bf00      	nop
 8002b80:	08002bb5 	.word	0x08002bb5
 8002b84:	08002e75 	.word	0x08002e75
 8002b88:	08002e75 	.word	0x08002e75
 8002b8c:	08002e75 	.word	0x08002e75
 8002b90:	08002bbd 	.word	0x08002bbd
 8002b94:	08002e75 	.word	0x08002e75
 8002b98:	08002e75 	.word	0x08002e75
 8002b9c:	08002e75 	.word	0x08002e75
 8002ba0:	08002bc5 	.word	0x08002bc5
 8002ba4:	08002e75 	.word	0x08002e75
 8002ba8:	08002e75 	.word	0x08002e75
 8002bac:	08002e75 	.word	0x08002e75
 8002bb0:	08002d2f 	.word	0x08002d2f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bb4:	4bb6      	ldr	r3, [pc, #728]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002bb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002bba:	e15f      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bbc:	4bb5      	ldr	r3, [pc, #724]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x350>)
 8002bbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002bc2:	e15b      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bc4:	4bb1      	ldr	r3, [pc, #708]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0x348>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bcc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bd0:	4bae      	ldr	r3, [pc, #696]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0x348>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d031      	beq.n	8002c40 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bdc:	4bab      	ldr	r3, [pc, #684]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0x348>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	099b      	lsrs	r3, r3, #6
 8002be2:	2200      	movs	r2, #0
 8002be4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002be6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002be8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bee:	663b      	str	r3, [r7, #96]	@ 0x60
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	667b      	str	r3, [r7, #100]	@ 0x64
 8002bf4:	4ba7      	ldr	r3, [pc, #668]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x350>)
 8002bf6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002bfa:	462a      	mov	r2, r5
 8002bfc:	fb03 f202 	mul.w	r2, r3, r2
 8002c00:	2300      	movs	r3, #0
 8002c02:	4621      	mov	r1, r4
 8002c04:	fb01 f303 	mul.w	r3, r1, r3
 8002c08:	4413      	add	r3, r2
 8002c0a:	4aa2      	ldr	r2, [pc, #648]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x350>)
 8002c0c:	4621      	mov	r1, r4
 8002c0e:	fba1 1202 	umull	r1, r2, r1, r2
 8002c12:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002c14:	460a      	mov	r2, r1
 8002c16:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002c18:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002c1a:	4413      	add	r3, r2
 8002c1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002c1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c22:	2200      	movs	r2, #0
 8002c24:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c26:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002c28:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002c2c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002c30:	f7fd fb46 	bl	80002c0 <__aeabi_uldivmod>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4613      	mov	r3, r2
 8002c3a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002c3e:	e064      	b.n	8002d0a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c40:	4b92      	ldr	r3, [pc, #584]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0x348>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	099b      	lsrs	r3, r3, #6
 8002c46:	2200      	movs	r2, #0
 8002c48:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c4a:	657a      	str	r2, [r7, #84]	@ 0x54
 8002c4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c54:	2300      	movs	r3, #0
 8002c56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c58:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002c5c:	4622      	mov	r2, r4
 8002c5e:	462b      	mov	r3, r5
 8002c60:	f04f 0000 	mov.w	r0, #0
 8002c64:	f04f 0100 	mov.w	r1, #0
 8002c68:	0159      	lsls	r1, r3, #5
 8002c6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c6e:	0150      	lsls	r0, r2, #5
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4621      	mov	r1, r4
 8002c76:	1a51      	subs	r1, r2, r1
 8002c78:	6139      	str	r1, [r7, #16]
 8002c7a:	4629      	mov	r1, r5
 8002c7c:	eb63 0301 	sbc.w	r3, r3, r1
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	f04f 0300 	mov.w	r3, #0
 8002c8a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c8e:	4659      	mov	r1, fp
 8002c90:	018b      	lsls	r3, r1, #6
 8002c92:	4651      	mov	r1, sl
 8002c94:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c98:	4651      	mov	r1, sl
 8002c9a:	018a      	lsls	r2, r1, #6
 8002c9c:	4651      	mov	r1, sl
 8002c9e:	ebb2 0801 	subs.w	r8, r2, r1
 8002ca2:	4659      	mov	r1, fp
 8002ca4:	eb63 0901 	sbc.w	r9, r3, r1
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cb4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cb8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cbc:	4690      	mov	r8, r2
 8002cbe:	4699      	mov	r9, r3
 8002cc0:	4623      	mov	r3, r4
 8002cc2:	eb18 0303 	adds.w	r3, r8, r3
 8002cc6:	60bb      	str	r3, [r7, #8]
 8002cc8:	462b      	mov	r3, r5
 8002cca:	eb49 0303 	adc.w	r3, r9, r3
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	f04f 0200 	mov.w	r2, #0
 8002cd4:	f04f 0300 	mov.w	r3, #0
 8002cd8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cdc:	4629      	mov	r1, r5
 8002cde:	028b      	lsls	r3, r1, #10
 8002ce0:	4621      	mov	r1, r4
 8002ce2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ce6:	4621      	mov	r1, r4
 8002ce8:	028a      	lsls	r2, r1, #10
 8002cea:	4610      	mov	r0, r2
 8002cec:	4619      	mov	r1, r3
 8002cee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	643b      	str	r3, [r7, #64]	@ 0x40
 8002cf6:	647a      	str	r2, [r7, #68]	@ 0x44
 8002cf8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002cfc:	f7fd fae0 	bl	80002c0 <__aeabi_uldivmod>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	4613      	mov	r3, r2
 8002d06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d0a:	4b60      	ldr	r3, [pc, #384]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0x348>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	0c1b      	lsrs	r3, r3, #16
 8002d10:	f003 0303 	and.w	r3, r3, #3
 8002d14:	3301      	adds	r3, #1
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8002d1c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002d20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002d2c:	e0a6      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d2e:	4b57      	ldr	r3, [pc, #348]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0x348>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d3a:	4b54      	ldr	r3, [pc, #336]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0x348>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d02a      	beq.n	8002d9c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d46:	4b51      	ldr	r3, [pc, #324]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0x348>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	099b      	lsrs	r3, r3, #6
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d50:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d54:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d58:	2100      	movs	r1, #0
 8002d5a:	4b4e      	ldr	r3, [pc, #312]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x350>)
 8002d5c:	fb03 f201 	mul.w	r2, r3, r1
 8002d60:	2300      	movs	r3, #0
 8002d62:	fb00 f303 	mul.w	r3, r0, r3
 8002d66:	4413      	add	r3, r2
 8002d68:	4a4a      	ldr	r2, [pc, #296]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x350>)
 8002d6a:	fba0 1202 	umull	r1, r2, r0, r2
 8002d6e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002d70:	460a      	mov	r2, r1
 8002d72:	673a      	str	r2, [r7, #112]	@ 0x70
 8002d74:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002d76:	4413      	add	r3, r2
 8002d78:	677b      	str	r3, [r7, #116]	@ 0x74
 8002d7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d7e:	2200      	movs	r2, #0
 8002d80:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d82:	637a      	str	r2, [r7, #52]	@ 0x34
 8002d84:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002d88:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002d8c:	f7fd fa98 	bl	80002c0 <__aeabi_uldivmod>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	4613      	mov	r3, r2
 8002d96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002d9a:	e05b      	b.n	8002e54 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d9c:	4b3b      	ldr	r3, [pc, #236]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0x348>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	099b      	lsrs	r3, r3, #6
 8002da2:	2200      	movs	r2, #0
 8002da4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002da6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dae:	623b      	str	r3, [r7, #32]
 8002db0:	2300      	movs	r3, #0
 8002db2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002db4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002db8:	4642      	mov	r2, r8
 8002dba:	464b      	mov	r3, r9
 8002dbc:	f04f 0000 	mov.w	r0, #0
 8002dc0:	f04f 0100 	mov.w	r1, #0
 8002dc4:	0159      	lsls	r1, r3, #5
 8002dc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dca:	0150      	lsls	r0, r2, #5
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	4641      	mov	r1, r8
 8002dd2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002dd6:	4649      	mov	r1, r9
 8002dd8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	f04f 0300 	mov.w	r3, #0
 8002de4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002de8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002dec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002df0:	ebb2 040a 	subs.w	r4, r2, sl
 8002df4:	eb63 050b 	sbc.w	r5, r3, fp
 8002df8:	f04f 0200 	mov.w	r2, #0
 8002dfc:	f04f 0300 	mov.w	r3, #0
 8002e00:	00eb      	lsls	r3, r5, #3
 8002e02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e06:	00e2      	lsls	r2, r4, #3
 8002e08:	4614      	mov	r4, r2
 8002e0a:	461d      	mov	r5, r3
 8002e0c:	4643      	mov	r3, r8
 8002e0e:	18e3      	adds	r3, r4, r3
 8002e10:	603b      	str	r3, [r7, #0]
 8002e12:	464b      	mov	r3, r9
 8002e14:	eb45 0303 	adc.w	r3, r5, r3
 8002e18:	607b      	str	r3, [r7, #4]
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	f04f 0300 	mov.w	r3, #0
 8002e22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e26:	4629      	mov	r1, r5
 8002e28:	028b      	lsls	r3, r1, #10
 8002e2a:	4621      	mov	r1, r4
 8002e2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e30:	4621      	mov	r1, r4
 8002e32:	028a      	lsls	r2, r1, #10
 8002e34:	4610      	mov	r0, r2
 8002e36:	4619      	mov	r1, r3
 8002e38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	61bb      	str	r3, [r7, #24]
 8002e40:	61fa      	str	r2, [r7, #28]
 8002e42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e46:	f7fd fa3b 	bl	80002c0 <__aeabi_uldivmod>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	4613      	mov	r3, r2
 8002e50:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002e54:	4b0d      	ldr	r3, [pc, #52]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0x348>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	0f1b      	lsrs	r3, r3, #28
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002e62:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002e66:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002e72:	e003      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e74:	4b06      	ldr	r3, [pc, #24]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002e76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002e7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3798      	adds	r7, #152	@ 0x98
 8002e84:	46bd      	mov	sp, r7
 8002e86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	00f42400 	.word	0x00f42400
 8002e94:	017d7840 	.word	0x017d7840

08002e98 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e28d      	b.n	80033c6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 8083 	beq.w	8002fbe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002eb8:	4b94      	ldr	r3, [pc, #592]	@ (800310c <HAL_RCC_OscConfig+0x274>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f003 030c 	and.w	r3, r3, #12
 8002ec0:	2b04      	cmp	r3, #4
 8002ec2:	d019      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002ec4:	4b91      	ldr	r3, [pc, #580]	@ (800310c <HAL_RCC_OscConfig+0x274>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 030c 	and.w	r3, r3, #12
        || \
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d106      	bne.n	8002ede <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002ed0:	4b8e      	ldr	r3, [pc, #568]	@ (800310c <HAL_RCC_OscConfig+0x274>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ed8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002edc:	d00c      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ede:	4b8b      	ldr	r3, [pc, #556]	@ (800310c <HAL_RCC_OscConfig+0x274>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002ee6:	2b0c      	cmp	r3, #12
 8002ee8:	d112      	bne.n	8002f10 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eea:	4b88      	ldr	r3, [pc, #544]	@ (800310c <HAL_RCC_OscConfig+0x274>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ef2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ef6:	d10b      	bne.n	8002f10 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef8:	4b84      	ldr	r3, [pc, #528]	@ (800310c <HAL_RCC_OscConfig+0x274>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d05b      	beq.n	8002fbc <HAL_RCC_OscConfig+0x124>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d157      	bne.n	8002fbc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e25a      	b.n	80033c6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f18:	d106      	bne.n	8002f28 <HAL_RCC_OscConfig+0x90>
 8002f1a:	4b7c      	ldr	r3, [pc, #496]	@ (800310c <HAL_RCC_OscConfig+0x274>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a7b      	ldr	r2, [pc, #492]	@ (800310c <HAL_RCC_OscConfig+0x274>)
 8002f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f24:	6013      	str	r3, [r2, #0]
 8002f26:	e01d      	b.n	8002f64 <HAL_RCC_OscConfig+0xcc>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f30:	d10c      	bne.n	8002f4c <HAL_RCC_OscConfig+0xb4>
 8002f32:	4b76      	ldr	r3, [pc, #472]	@ (800310c <HAL_RCC_OscConfig+0x274>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a75      	ldr	r2, [pc, #468]	@ (800310c <HAL_RCC_OscConfig+0x274>)
 8002f38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	4b73      	ldr	r3, [pc, #460]	@ (800310c <HAL_RCC_OscConfig+0x274>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a72      	ldr	r2, [pc, #456]	@ (800310c <HAL_RCC_OscConfig+0x274>)
 8002f44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	e00b      	b.n	8002f64 <HAL_RCC_OscConfig+0xcc>
 8002f4c:	4b6f      	ldr	r3, [pc, #444]	@ (800310c <HAL_RCC_OscConfig+0x274>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a6e      	ldr	r2, [pc, #440]	@ (800310c <HAL_RCC_OscConfig+0x274>)
 8002f52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f56:	6013      	str	r3, [r2, #0]
 8002f58:	4b6c      	ldr	r3, [pc, #432]	@ (800310c <HAL_RCC_OscConfig+0x274>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a6b      	ldr	r2, [pc, #428]	@ (800310c <HAL_RCC_OscConfig+0x274>)
 8002f5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d013      	beq.n	8002f94 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6c:	f7fe fb3e 	bl	80015ec <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f74:	f7fe fb3a 	bl	80015ec <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b64      	cmp	r3, #100	@ 0x64
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e21f      	b.n	80033c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f86:	4b61      	ldr	r3, [pc, #388]	@ (800310c <HAL_RCC_OscConfig+0x274>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d0f0      	beq.n	8002f74 <HAL_RCC_OscConfig+0xdc>
 8002f92:	e014      	b.n	8002fbe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f94:	f7fe fb2a 	bl	80015ec <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f9c:	f7fe fb26 	bl	80015ec <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b64      	cmp	r3, #100	@ 0x64
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e20b      	b.n	80033c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fae:	4b57      	ldr	r3, [pc, #348]	@ (800310c <HAL_RCC_OscConfig+0x274>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f0      	bne.n	8002f9c <HAL_RCC_OscConfig+0x104>
 8002fba:	e000      	b.n	8002fbe <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d06f      	beq.n	80030aa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002fca:	4b50      	ldr	r3, [pc, #320]	@ (800310c <HAL_RCC_OscConfig+0x274>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 030c 	and.w	r3, r3, #12
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d017      	beq.n	8003006 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002fd6:	4b4d      	ldr	r3, [pc, #308]	@ (800310c <HAL_RCC_OscConfig+0x274>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 030c 	and.w	r3, r3, #12
        || \
 8002fde:	2b08      	cmp	r3, #8
 8002fe0:	d105      	bne.n	8002fee <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002fe2:	4b4a      	ldr	r3, [pc, #296]	@ (800310c <HAL_RCC_OscConfig+0x274>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00b      	beq.n	8003006 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fee:	4b47      	ldr	r3, [pc, #284]	@ (800310c <HAL_RCC_OscConfig+0x274>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002ff6:	2b0c      	cmp	r3, #12
 8002ff8:	d11c      	bne.n	8003034 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ffa:	4b44      	ldr	r3, [pc, #272]	@ (800310c <HAL_RCC_OscConfig+0x274>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d116      	bne.n	8003034 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003006:	4b41      	ldr	r3, [pc, #260]	@ (800310c <HAL_RCC_OscConfig+0x274>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d005      	beq.n	800301e <HAL_RCC_OscConfig+0x186>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d001      	beq.n	800301e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e1d3      	b.n	80033c6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800301e:	4b3b      	ldr	r3, [pc, #236]	@ (800310c <HAL_RCC_OscConfig+0x274>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4937      	ldr	r1, [pc, #220]	@ (800310c <HAL_RCC_OscConfig+0x274>)
 800302e:	4313      	orrs	r3, r2
 8003030:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003032:	e03a      	b.n	80030aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d020      	beq.n	800307e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800303c:	4b34      	ldr	r3, [pc, #208]	@ (8003110 <HAL_RCC_OscConfig+0x278>)
 800303e:	2201      	movs	r2, #1
 8003040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003042:	f7fe fad3 	bl	80015ec <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003048:	e008      	b.n	800305c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800304a:	f7fe facf 	bl	80015ec <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e1b4      	b.n	80033c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305c:	4b2b      	ldr	r3, [pc, #172]	@ (800310c <HAL_RCC_OscConfig+0x274>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0f0      	beq.n	800304a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003068:	4b28      	ldr	r3, [pc, #160]	@ (800310c <HAL_RCC_OscConfig+0x274>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4925      	ldr	r1, [pc, #148]	@ (800310c <HAL_RCC_OscConfig+0x274>)
 8003078:	4313      	orrs	r3, r2
 800307a:	600b      	str	r3, [r1, #0]
 800307c:	e015      	b.n	80030aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800307e:	4b24      	ldr	r3, [pc, #144]	@ (8003110 <HAL_RCC_OscConfig+0x278>)
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003084:	f7fe fab2 	bl	80015ec <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800308c:	f7fe faae 	bl	80015ec <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e193      	b.n	80033c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800309e:	4b1b      	ldr	r3, [pc, #108]	@ (800310c <HAL_RCC_OscConfig+0x274>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f0      	bne.n	800308c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d036      	beq.n	8003124 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d016      	beq.n	80030ec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030be:	4b15      	ldr	r3, [pc, #84]	@ (8003114 <HAL_RCC_OscConfig+0x27c>)
 80030c0:	2201      	movs	r2, #1
 80030c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c4:	f7fe fa92 	bl	80015ec <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030cc:	f7fe fa8e 	bl	80015ec <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e173      	b.n	80033c6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030de:	4b0b      	ldr	r3, [pc, #44]	@ (800310c <HAL_RCC_OscConfig+0x274>)
 80030e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0f0      	beq.n	80030cc <HAL_RCC_OscConfig+0x234>
 80030ea:	e01b      	b.n	8003124 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ec:	4b09      	ldr	r3, [pc, #36]	@ (8003114 <HAL_RCC_OscConfig+0x27c>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f2:	f7fe fa7b 	bl	80015ec <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f8:	e00e      	b.n	8003118 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030fa:	f7fe fa77 	bl	80015ec <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d907      	bls.n	8003118 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e15c      	b.n	80033c6 <HAL_RCC_OscConfig+0x52e>
 800310c:	40023800 	.word	0x40023800
 8003110:	42470000 	.word	0x42470000
 8003114:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003118:	4b8a      	ldr	r3, [pc, #552]	@ (8003344 <HAL_RCC_OscConfig+0x4ac>)
 800311a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1ea      	bne.n	80030fa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0304 	and.w	r3, r3, #4
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 8097 	beq.w	8003260 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003132:	2300      	movs	r3, #0
 8003134:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003136:	4b83      	ldr	r3, [pc, #524]	@ (8003344 <HAL_RCC_OscConfig+0x4ac>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10f      	bne.n	8003162 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003142:	2300      	movs	r3, #0
 8003144:	60bb      	str	r3, [r7, #8]
 8003146:	4b7f      	ldr	r3, [pc, #508]	@ (8003344 <HAL_RCC_OscConfig+0x4ac>)
 8003148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314a:	4a7e      	ldr	r2, [pc, #504]	@ (8003344 <HAL_RCC_OscConfig+0x4ac>)
 800314c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003150:	6413      	str	r3, [r2, #64]	@ 0x40
 8003152:	4b7c      	ldr	r3, [pc, #496]	@ (8003344 <HAL_RCC_OscConfig+0x4ac>)
 8003154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800315a:	60bb      	str	r3, [r7, #8]
 800315c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800315e:	2301      	movs	r3, #1
 8003160:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003162:	4b79      	ldr	r3, [pc, #484]	@ (8003348 <HAL_RCC_OscConfig+0x4b0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800316a:	2b00      	cmp	r3, #0
 800316c:	d118      	bne.n	80031a0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800316e:	4b76      	ldr	r3, [pc, #472]	@ (8003348 <HAL_RCC_OscConfig+0x4b0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a75      	ldr	r2, [pc, #468]	@ (8003348 <HAL_RCC_OscConfig+0x4b0>)
 8003174:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003178:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800317a:	f7fe fa37 	bl	80015ec <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003180:	e008      	b.n	8003194 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003182:	f7fe fa33 	bl	80015ec <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e118      	b.n	80033c6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003194:	4b6c      	ldr	r3, [pc, #432]	@ (8003348 <HAL_RCC_OscConfig+0x4b0>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0f0      	beq.n	8003182 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d106      	bne.n	80031b6 <HAL_RCC_OscConfig+0x31e>
 80031a8:	4b66      	ldr	r3, [pc, #408]	@ (8003344 <HAL_RCC_OscConfig+0x4ac>)
 80031aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ac:	4a65      	ldr	r2, [pc, #404]	@ (8003344 <HAL_RCC_OscConfig+0x4ac>)
 80031ae:	f043 0301 	orr.w	r3, r3, #1
 80031b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80031b4:	e01c      	b.n	80031f0 <HAL_RCC_OscConfig+0x358>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	2b05      	cmp	r3, #5
 80031bc:	d10c      	bne.n	80031d8 <HAL_RCC_OscConfig+0x340>
 80031be:	4b61      	ldr	r3, [pc, #388]	@ (8003344 <HAL_RCC_OscConfig+0x4ac>)
 80031c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c2:	4a60      	ldr	r2, [pc, #384]	@ (8003344 <HAL_RCC_OscConfig+0x4ac>)
 80031c4:	f043 0304 	orr.w	r3, r3, #4
 80031c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80031ca:	4b5e      	ldr	r3, [pc, #376]	@ (8003344 <HAL_RCC_OscConfig+0x4ac>)
 80031cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ce:	4a5d      	ldr	r2, [pc, #372]	@ (8003344 <HAL_RCC_OscConfig+0x4ac>)
 80031d0:	f043 0301 	orr.w	r3, r3, #1
 80031d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80031d6:	e00b      	b.n	80031f0 <HAL_RCC_OscConfig+0x358>
 80031d8:	4b5a      	ldr	r3, [pc, #360]	@ (8003344 <HAL_RCC_OscConfig+0x4ac>)
 80031da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031dc:	4a59      	ldr	r2, [pc, #356]	@ (8003344 <HAL_RCC_OscConfig+0x4ac>)
 80031de:	f023 0301 	bic.w	r3, r3, #1
 80031e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80031e4:	4b57      	ldr	r3, [pc, #348]	@ (8003344 <HAL_RCC_OscConfig+0x4ac>)
 80031e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031e8:	4a56      	ldr	r2, [pc, #344]	@ (8003344 <HAL_RCC_OscConfig+0x4ac>)
 80031ea:	f023 0304 	bic.w	r3, r3, #4
 80031ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d015      	beq.n	8003224 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f8:	f7fe f9f8 	bl	80015ec <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031fe:	e00a      	b.n	8003216 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003200:	f7fe f9f4 	bl	80015ec <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800320e:	4293      	cmp	r3, r2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e0d7      	b.n	80033c6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003216:	4b4b      	ldr	r3, [pc, #300]	@ (8003344 <HAL_RCC_OscConfig+0x4ac>)
 8003218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d0ee      	beq.n	8003200 <HAL_RCC_OscConfig+0x368>
 8003222:	e014      	b.n	800324e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003224:	f7fe f9e2 	bl	80015ec <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800322a:	e00a      	b.n	8003242 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800322c:	f7fe f9de 	bl	80015ec <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	f241 3288 	movw	r2, #5000	@ 0x1388
 800323a:	4293      	cmp	r3, r2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e0c1      	b.n	80033c6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003242:	4b40      	ldr	r3, [pc, #256]	@ (8003344 <HAL_RCC_OscConfig+0x4ac>)
 8003244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1ee      	bne.n	800322c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800324e:	7dfb      	ldrb	r3, [r7, #23]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d105      	bne.n	8003260 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003254:	4b3b      	ldr	r3, [pc, #236]	@ (8003344 <HAL_RCC_OscConfig+0x4ac>)
 8003256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003258:	4a3a      	ldr	r2, [pc, #232]	@ (8003344 <HAL_RCC_OscConfig+0x4ac>)
 800325a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800325e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 80ad 	beq.w	80033c4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800326a:	4b36      	ldr	r3, [pc, #216]	@ (8003344 <HAL_RCC_OscConfig+0x4ac>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 030c 	and.w	r3, r3, #12
 8003272:	2b08      	cmp	r3, #8
 8003274:	d060      	beq.n	8003338 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	2b02      	cmp	r3, #2
 800327c:	d145      	bne.n	800330a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800327e:	4b33      	ldr	r3, [pc, #204]	@ (800334c <HAL_RCC_OscConfig+0x4b4>)
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003284:	f7fe f9b2 	bl	80015ec <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800328c:	f7fe f9ae 	bl	80015ec <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e093      	b.n	80033c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800329e:	4b29      	ldr	r3, [pc, #164]	@ (8003344 <HAL_RCC_OscConfig+0x4ac>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1f0      	bne.n	800328c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69da      	ldr	r2, [r3, #28]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	431a      	orrs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b8:	019b      	lsls	r3, r3, #6
 80032ba:	431a      	orrs	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c0:	085b      	lsrs	r3, r3, #1
 80032c2:	3b01      	subs	r3, #1
 80032c4:	041b      	lsls	r3, r3, #16
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032cc:	061b      	lsls	r3, r3, #24
 80032ce:	431a      	orrs	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d4:	071b      	lsls	r3, r3, #28
 80032d6:	491b      	ldr	r1, [pc, #108]	@ (8003344 <HAL_RCC_OscConfig+0x4ac>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032dc:	4b1b      	ldr	r3, [pc, #108]	@ (800334c <HAL_RCC_OscConfig+0x4b4>)
 80032de:	2201      	movs	r2, #1
 80032e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e2:	f7fe f983 	bl	80015ec <HAL_GetTick>
 80032e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e8:	e008      	b.n	80032fc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ea:	f7fe f97f 	bl	80015ec <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e064      	b.n	80033c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032fc:	4b11      	ldr	r3, [pc, #68]	@ (8003344 <HAL_RCC_OscConfig+0x4ac>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d0f0      	beq.n	80032ea <HAL_RCC_OscConfig+0x452>
 8003308:	e05c      	b.n	80033c4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800330a:	4b10      	ldr	r3, [pc, #64]	@ (800334c <HAL_RCC_OscConfig+0x4b4>)
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003310:	f7fe f96c 	bl	80015ec <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003318:	f7fe f968 	bl	80015ec <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e04d      	b.n	80033c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800332a:	4b06      	ldr	r3, [pc, #24]	@ (8003344 <HAL_RCC_OscConfig+0x4ac>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1f0      	bne.n	8003318 <HAL_RCC_OscConfig+0x480>
 8003336:	e045      	b.n	80033c4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d107      	bne.n	8003350 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e040      	b.n	80033c6 <HAL_RCC_OscConfig+0x52e>
 8003344:	40023800 	.word	0x40023800
 8003348:	40007000 	.word	0x40007000
 800334c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003350:	4b1f      	ldr	r3, [pc, #124]	@ (80033d0 <HAL_RCC_OscConfig+0x538>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d030      	beq.n	80033c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003368:	429a      	cmp	r2, r3
 800336a:	d129      	bne.n	80033c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003376:	429a      	cmp	r2, r3
 8003378:	d122      	bne.n	80033c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003380:	4013      	ands	r3, r2
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003386:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003388:	4293      	cmp	r3, r2
 800338a:	d119      	bne.n	80033c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003396:	085b      	lsrs	r3, r3, #1
 8003398:	3b01      	subs	r3, #1
 800339a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800339c:	429a      	cmp	r2, r3
 800339e:	d10f      	bne.n	80033c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d107      	bne.n	80033c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033bc:	429a      	cmp	r2, r3
 80033be:	d001      	beq.n	80033c4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e000      	b.n	80033c6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	40023800 	.word	0x40023800

080033d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e041      	b.n	800346a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d106      	bne.n	8003400 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7fe f802 	bl	8001404 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2202      	movs	r2, #2
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3304      	adds	r3, #4
 8003410:	4619      	mov	r1, r3
 8003412:	4610      	mov	r0, r2
 8003414:	f000 fa7e 	bl	8003914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
	...

08003474 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b01      	cmp	r3, #1
 8003486:	d001      	beq.n	800348c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e04e      	b.n	800352a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68da      	ldr	r2, [r3, #12]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0201 	orr.w	r2, r2, #1
 80034a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a23      	ldr	r2, [pc, #140]	@ (8003538 <HAL_TIM_Base_Start_IT+0xc4>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d022      	beq.n	80034f4 <HAL_TIM_Base_Start_IT+0x80>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034b6:	d01d      	beq.n	80034f4 <HAL_TIM_Base_Start_IT+0x80>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a1f      	ldr	r2, [pc, #124]	@ (800353c <HAL_TIM_Base_Start_IT+0xc8>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d018      	beq.n	80034f4 <HAL_TIM_Base_Start_IT+0x80>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a1e      	ldr	r2, [pc, #120]	@ (8003540 <HAL_TIM_Base_Start_IT+0xcc>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d013      	beq.n	80034f4 <HAL_TIM_Base_Start_IT+0x80>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a1c      	ldr	r2, [pc, #112]	@ (8003544 <HAL_TIM_Base_Start_IT+0xd0>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d00e      	beq.n	80034f4 <HAL_TIM_Base_Start_IT+0x80>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a1b      	ldr	r2, [pc, #108]	@ (8003548 <HAL_TIM_Base_Start_IT+0xd4>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d009      	beq.n	80034f4 <HAL_TIM_Base_Start_IT+0x80>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a19      	ldr	r2, [pc, #100]	@ (800354c <HAL_TIM_Base_Start_IT+0xd8>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d004      	beq.n	80034f4 <HAL_TIM_Base_Start_IT+0x80>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a18      	ldr	r2, [pc, #96]	@ (8003550 <HAL_TIM_Base_Start_IT+0xdc>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d111      	bne.n	8003518 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2b06      	cmp	r3, #6
 8003504:	d010      	beq.n	8003528 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f042 0201 	orr.w	r2, r2, #1
 8003514:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003516:	e007      	b.n	8003528 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 0201 	orr.w	r2, r2, #1
 8003526:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	40010000 	.word	0x40010000
 800353c:	40000400 	.word	0x40000400
 8003540:	40000800 	.word	0x40000800
 8003544:	40000c00 	.word	0x40000c00
 8003548:	40010400 	.word	0x40010400
 800354c:	40014000 	.word	0x40014000
 8003550:	40001800 	.word	0x40001800

08003554 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d020      	beq.n	80035b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d01b      	beq.n	80035b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f06f 0202 	mvn.w	r2, #2
 8003588:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	f003 0303 	and.w	r3, r3, #3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f999 	bl	80038d6 <HAL_TIM_IC_CaptureCallback>
 80035a4:	e005      	b.n	80035b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f98b 	bl	80038c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 f99c 	bl	80038ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	f003 0304 	and.w	r3, r3, #4
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d020      	beq.n	8003604 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f003 0304 	and.w	r3, r3, #4
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d01b      	beq.n	8003604 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f06f 0204 	mvn.w	r2, #4
 80035d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2202      	movs	r2, #2
 80035da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f973 	bl	80038d6 <HAL_TIM_IC_CaptureCallback>
 80035f0:	e005      	b.n	80035fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f965 	bl	80038c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f976 	bl	80038ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b00      	cmp	r3, #0
 800360c:	d020      	beq.n	8003650 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f003 0308 	and.w	r3, r3, #8
 8003614:	2b00      	cmp	r3, #0
 8003616:	d01b      	beq.n	8003650 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f06f 0208 	mvn.w	r2, #8
 8003620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2204      	movs	r2, #4
 8003626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	f003 0303 	and.w	r3, r3, #3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f94d 	bl	80038d6 <HAL_TIM_IC_CaptureCallback>
 800363c:	e005      	b.n	800364a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f93f 	bl	80038c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 f950 	bl	80038ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	f003 0310 	and.w	r3, r3, #16
 8003656:	2b00      	cmp	r3, #0
 8003658:	d020      	beq.n	800369c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f003 0310 	and.w	r3, r3, #16
 8003660:	2b00      	cmp	r3, #0
 8003662:	d01b      	beq.n	800369c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f06f 0210 	mvn.w	r2, #16
 800366c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2208      	movs	r2, #8
 8003672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f927 	bl	80038d6 <HAL_TIM_IC_CaptureCallback>
 8003688:	e005      	b.n	8003696 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f919 	bl	80038c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 f92a 	bl	80038ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00c      	beq.n	80036c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d007      	beq.n	80036c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f06f 0201 	mvn.w	r2, #1
 80036b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7fd fcf4 	bl	80010a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00c      	beq.n	80036e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d007      	beq.n	80036e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80036dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 fade 	bl	8003ca0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00c      	beq.n	8003708 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d007      	beq.n	8003708 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f8fb 	bl	80038fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f003 0320 	and.w	r3, r3, #32
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00c      	beq.n	800372c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f003 0320 	and.w	r3, r3, #32
 8003718:	2b00      	cmp	r3, #0
 800371a:	d007      	beq.n	800372c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f06f 0220 	mvn.w	r2, #32
 8003724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fab0 	bl	8003c8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800372c:	bf00      	nop
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800373e:	2300      	movs	r3, #0
 8003740:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003748:	2b01      	cmp	r3, #1
 800374a:	d101      	bne.n	8003750 <HAL_TIM_ConfigClockSource+0x1c>
 800374c:	2302      	movs	r3, #2
 800374e:	e0b4      	b.n	80038ba <HAL_TIM_ConfigClockSource+0x186>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2202      	movs	r2, #2
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800376e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003776:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003788:	d03e      	beq.n	8003808 <HAL_TIM_ConfigClockSource+0xd4>
 800378a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800378e:	f200 8087 	bhi.w	80038a0 <HAL_TIM_ConfigClockSource+0x16c>
 8003792:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003796:	f000 8086 	beq.w	80038a6 <HAL_TIM_ConfigClockSource+0x172>
 800379a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800379e:	d87f      	bhi.n	80038a0 <HAL_TIM_ConfigClockSource+0x16c>
 80037a0:	2b70      	cmp	r3, #112	@ 0x70
 80037a2:	d01a      	beq.n	80037da <HAL_TIM_ConfigClockSource+0xa6>
 80037a4:	2b70      	cmp	r3, #112	@ 0x70
 80037a6:	d87b      	bhi.n	80038a0 <HAL_TIM_ConfigClockSource+0x16c>
 80037a8:	2b60      	cmp	r3, #96	@ 0x60
 80037aa:	d050      	beq.n	800384e <HAL_TIM_ConfigClockSource+0x11a>
 80037ac:	2b60      	cmp	r3, #96	@ 0x60
 80037ae:	d877      	bhi.n	80038a0 <HAL_TIM_ConfigClockSource+0x16c>
 80037b0:	2b50      	cmp	r3, #80	@ 0x50
 80037b2:	d03c      	beq.n	800382e <HAL_TIM_ConfigClockSource+0xfa>
 80037b4:	2b50      	cmp	r3, #80	@ 0x50
 80037b6:	d873      	bhi.n	80038a0 <HAL_TIM_ConfigClockSource+0x16c>
 80037b8:	2b40      	cmp	r3, #64	@ 0x40
 80037ba:	d058      	beq.n	800386e <HAL_TIM_ConfigClockSource+0x13a>
 80037bc:	2b40      	cmp	r3, #64	@ 0x40
 80037be:	d86f      	bhi.n	80038a0 <HAL_TIM_ConfigClockSource+0x16c>
 80037c0:	2b30      	cmp	r3, #48	@ 0x30
 80037c2:	d064      	beq.n	800388e <HAL_TIM_ConfigClockSource+0x15a>
 80037c4:	2b30      	cmp	r3, #48	@ 0x30
 80037c6:	d86b      	bhi.n	80038a0 <HAL_TIM_ConfigClockSource+0x16c>
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	d060      	beq.n	800388e <HAL_TIM_ConfigClockSource+0x15a>
 80037cc:	2b20      	cmp	r3, #32
 80037ce:	d867      	bhi.n	80038a0 <HAL_TIM_ConfigClockSource+0x16c>
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d05c      	beq.n	800388e <HAL_TIM_ConfigClockSource+0x15a>
 80037d4:	2b10      	cmp	r3, #16
 80037d6:	d05a      	beq.n	800388e <HAL_TIM_ConfigClockSource+0x15a>
 80037d8:	e062      	b.n	80038a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037ea:	f000 f9b3 	bl	8003b54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80037fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	609a      	str	r2, [r3, #8]
      break;
 8003806:	e04f      	b.n	80038a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003818:	f000 f99c 	bl	8003b54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689a      	ldr	r2, [r3, #8]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800382a:	609a      	str	r2, [r3, #8]
      break;
 800382c:	e03c      	b.n	80038a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800383a:	461a      	mov	r2, r3
 800383c:	f000 f910 	bl	8003a60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2150      	movs	r1, #80	@ 0x50
 8003846:	4618      	mov	r0, r3
 8003848:	f000 f969 	bl	8003b1e <TIM_ITRx_SetConfig>
      break;
 800384c:	e02c      	b.n	80038a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800385a:	461a      	mov	r2, r3
 800385c:	f000 f92f 	bl	8003abe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2160      	movs	r1, #96	@ 0x60
 8003866:	4618      	mov	r0, r3
 8003868:	f000 f959 	bl	8003b1e <TIM_ITRx_SetConfig>
      break;
 800386c:	e01c      	b.n	80038a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800387a:	461a      	mov	r2, r3
 800387c:	f000 f8f0 	bl	8003a60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2140      	movs	r1, #64	@ 0x40
 8003886:	4618      	mov	r0, r3
 8003888:	f000 f949 	bl	8003b1e <TIM_ITRx_SetConfig>
      break;
 800388c:	e00c      	b.n	80038a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4619      	mov	r1, r3
 8003898:	4610      	mov	r0, r2
 800389a:	f000 f940 	bl	8003b1e <TIM_ITRx_SetConfig>
      break;
 800389e:	e003      	b.n	80038a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	73fb      	strb	r3, [r7, #15]
      break;
 80038a4:	e000      	b.n	80038a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80038a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b083      	sub	sp, #12
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b083      	sub	sp, #12
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038de:	bf00      	nop
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr

080038ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038ea:	b480      	push	{r7}
 80038ec:	b083      	sub	sp, #12
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038f2:	bf00      	nop
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038fe:	b480      	push	{r7}
 8003900:	b083      	sub	sp, #12
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
	...

08003914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a43      	ldr	r2, [pc, #268]	@ (8003a34 <TIM_Base_SetConfig+0x120>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d013      	beq.n	8003954 <TIM_Base_SetConfig+0x40>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003932:	d00f      	beq.n	8003954 <TIM_Base_SetConfig+0x40>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a40      	ldr	r2, [pc, #256]	@ (8003a38 <TIM_Base_SetConfig+0x124>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d00b      	beq.n	8003954 <TIM_Base_SetConfig+0x40>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a3f      	ldr	r2, [pc, #252]	@ (8003a3c <TIM_Base_SetConfig+0x128>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d007      	beq.n	8003954 <TIM_Base_SetConfig+0x40>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a3e      	ldr	r2, [pc, #248]	@ (8003a40 <TIM_Base_SetConfig+0x12c>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d003      	beq.n	8003954 <TIM_Base_SetConfig+0x40>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a3d      	ldr	r2, [pc, #244]	@ (8003a44 <TIM_Base_SetConfig+0x130>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d108      	bne.n	8003966 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800395a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	4313      	orrs	r3, r2
 8003964:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a32      	ldr	r2, [pc, #200]	@ (8003a34 <TIM_Base_SetConfig+0x120>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d02b      	beq.n	80039c6 <TIM_Base_SetConfig+0xb2>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003974:	d027      	beq.n	80039c6 <TIM_Base_SetConfig+0xb2>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a2f      	ldr	r2, [pc, #188]	@ (8003a38 <TIM_Base_SetConfig+0x124>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d023      	beq.n	80039c6 <TIM_Base_SetConfig+0xb2>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a2e      	ldr	r2, [pc, #184]	@ (8003a3c <TIM_Base_SetConfig+0x128>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d01f      	beq.n	80039c6 <TIM_Base_SetConfig+0xb2>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a2d      	ldr	r2, [pc, #180]	@ (8003a40 <TIM_Base_SetConfig+0x12c>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d01b      	beq.n	80039c6 <TIM_Base_SetConfig+0xb2>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a2c      	ldr	r2, [pc, #176]	@ (8003a44 <TIM_Base_SetConfig+0x130>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d017      	beq.n	80039c6 <TIM_Base_SetConfig+0xb2>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a2b      	ldr	r2, [pc, #172]	@ (8003a48 <TIM_Base_SetConfig+0x134>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d013      	beq.n	80039c6 <TIM_Base_SetConfig+0xb2>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a2a      	ldr	r2, [pc, #168]	@ (8003a4c <TIM_Base_SetConfig+0x138>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d00f      	beq.n	80039c6 <TIM_Base_SetConfig+0xb2>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a29      	ldr	r2, [pc, #164]	@ (8003a50 <TIM_Base_SetConfig+0x13c>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d00b      	beq.n	80039c6 <TIM_Base_SetConfig+0xb2>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a28      	ldr	r2, [pc, #160]	@ (8003a54 <TIM_Base_SetConfig+0x140>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d007      	beq.n	80039c6 <TIM_Base_SetConfig+0xb2>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a27      	ldr	r2, [pc, #156]	@ (8003a58 <TIM_Base_SetConfig+0x144>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d003      	beq.n	80039c6 <TIM_Base_SetConfig+0xb2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a26      	ldr	r2, [pc, #152]	@ (8003a5c <TIM_Base_SetConfig+0x148>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d108      	bne.n	80039d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	689a      	ldr	r2, [r3, #8]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a0e      	ldr	r2, [pc, #56]	@ (8003a34 <TIM_Base_SetConfig+0x120>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d003      	beq.n	8003a06 <TIM_Base_SetConfig+0xf2>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a10      	ldr	r2, [pc, #64]	@ (8003a44 <TIM_Base_SetConfig+0x130>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d103      	bne.n	8003a0e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	691a      	ldr	r2, [r3, #16]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f043 0204 	orr.w	r2, r3, #4
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	601a      	str	r2, [r3, #0]
}
 8003a26:	bf00      	nop
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	40010000 	.word	0x40010000
 8003a38:	40000400 	.word	0x40000400
 8003a3c:	40000800 	.word	0x40000800
 8003a40:	40000c00 	.word	0x40000c00
 8003a44:	40010400 	.word	0x40010400
 8003a48:	40014000 	.word	0x40014000
 8003a4c:	40014400 	.word	0x40014400
 8003a50:	40014800 	.word	0x40014800
 8003a54:	40001800 	.word	0x40001800
 8003a58:	40001c00 	.word	0x40001c00
 8003a5c:	40002000 	.word	0x40002000

08003a60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b087      	sub	sp, #28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	f023 0201 	bic.w	r2, r3, #1
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f023 030a 	bic.w	r3, r3, #10
 8003a9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	621a      	str	r2, [r3, #32]
}
 8003ab2:	bf00      	nop
 8003ab4:	371c      	adds	r7, #28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b087      	sub	sp, #28
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	60f8      	str	r0, [r7, #12]
 8003ac6:	60b9      	str	r1, [r7, #8]
 8003ac8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	f023 0210 	bic.w	r2, r3, #16
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ae8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	031b      	lsls	r3, r3, #12
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003afa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	011b      	lsls	r3, r3, #4
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	621a      	str	r2, [r3, #32]
}
 8003b12:	bf00      	nop
 8003b14:	371c      	adds	r7, #28
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b085      	sub	sp, #20
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
 8003b26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b36:	683a      	ldr	r2, [r7, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	f043 0307 	orr.w	r3, r3, #7
 8003b40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	609a      	str	r2, [r3, #8]
}
 8003b48:	bf00      	nop
 8003b4a:	3714      	adds	r7, #20
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b087      	sub	sp, #28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
 8003b60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	021a      	lsls	r2, r3, #8
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	431a      	orrs	r2, r3
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	609a      	str	r2, [r3, #8]
}
 8003b88:	bf00      	nop
 8003b8a:	371c      	adds	r7, #28
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d101      	bne.n	8003bac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ba8:	2302      	movs	r3, #2
 8003baa:	e05a      	b.n	8003c62 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a21      	ldr	r2, [pc, #132]	@ (8003c70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d022      	beq.n	8003c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bf8:	d01d      	beq.n	8003c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a1d      	ldr	r2, [pc, #116]	@ (8003c74 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d018      	beq.n	8003c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a1b      	ldr	r2, [pc, #108]	@ (8003c78 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d013      	beq.n	8003c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a1a      	ldr	r2, [pc, #104]	@ (8003c7c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d00e      	beq.n	8003c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a18      	ldr	r2, [pc, #96]	@ (8003c80 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d009      	beq.n	8003c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a17      	ldr	r2, [pc, #92]	@ (8003c84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d004      	beq.n	8003c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a15      	ldr	r2, [pc, #84]	@ (8003c88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d10c      	bne.n	8003c50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	40010000 	.word	0x40010000
 8003c74:	40000400 	.word	0x40000400
 8003c78:	40000800 	.word	0x40000800
 8003c7c:	40000c00 	.word	0x40000c00
 8003c80:	40010400 	.word	0x40010400
 8003c84:	40014000 	.word	0x40014000
 8003c88:	40001800 	.word	0x40001800

08003c8c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e042      	b.n	8003d4c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d106      	bne.n	8003ce0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7fd fbde 	bl	800149c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2224      	movs	r2, #36	@ 0x24
 8003ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003cf6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 f973 	bl	8003fe4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	691a      	ldr	r2, [r3, #16]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	695a      	ldr	r2, [r3, #20]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68da      	ldr	r2, [r3, #12]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3708      	adds	r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08a      	sub	sp, #40	@ 0x28
 8003d58:	af02      	add	r7, sp, #8
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	603b      	str	r3, [r7, #0]
 8003d60:	4613      	mov	r3, r2
 8003d62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b20      	cmp	r3, #32
 8003d72:	d175      	bne.n	8003e60 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <HAL_UART_Transmit+0x2c>
 8003d7a:	88fb      	ldrh	r3, [r7, #6]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e06e      	b.n	8003e62 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2221      	movs	r2, #33	@ 0x21
 8003d8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d92:	f7fd fc2b 	bl	80015ec <HAL_GetTick>
 8003d96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	88fa      	ldrh	r2, [r7, #6]
 8003d9c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	88fa      	ldrh	r2, [r7, #6]
 8003da2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dac:	d108      	bne.n	8003dc0 <HAL_UART_Transmit+0x6c>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d104      	bne.n	8003dc0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003db6:	2300      	movs	r3, #0
 8003db8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	61bb      	str	r3, [r7, #24]
 8003dbe:	e003      	b.n	8003dc8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003dc8:	e02e      	b.n	8003e28 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	2180      	movs	r1, #128	@ 0x80
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f000 f848 	bl	8003e6a <UART_WaitOnFlagUntilTimeout>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d005      	beq.n	8003dec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e03a      	b.n	8003e62 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10b      	bne.n	8003e0a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	881b      	ldrh	r3, [r3, #0]
 8003df6:	461a      	mov	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	3302      	adds	r3, #2
 8003e06:	61bb      	str	r3, [r7, #24]
 8003e08:	e007      	b.n	8003e1a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	781a      	ldrb	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	3301      	adds	r3, #1
 8003e18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1cb      	bne.n	8003dca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	2140      	movs	r1, #64	@ 0x40
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 f814 	bl	8003e6a <UART_WaitOnFlagUntilTimeout>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d005      	beq.n	8003e54 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e006      	b.n	8003e62 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2220      	movs	r2, #32
 8003e58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	e000      	b.n	8003e62 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003e60:	2302      	movs	r3, #2
  }
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3720      	adds	r7, #32
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b086      	sub	sp, #24
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	60f8      	str	r0, [r7, #12]
 8003e72:	60b9      	str	r1, [r7, #8]
 8003e74:	603b      	str	r3, [r7, #0]
 8003e76:	4613      	mov	r3, r2
 8003e78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e7a:	e03b      	b.n	8003ef4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e7c:	6a3b      	ldr	r3, [r7, #32]
 8003e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e82:	d037      	beq.n	8003ef4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e84:	f7fd fbb2 	bl	80015ec <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	6a3a      	ldr	r2, [r7, #32]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d302      	bcc.n	8003e9a <UART_WaitOnFlagUntilTimeout+0x30>
 8003e94:	6a3b      	ldr	r3, [r7, #32]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e03a      	b.n	8003f14 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d023      	beq.n	8003ef4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	2b80      	cmp	r3, #128	@ 0x80
 8003eb0:	d020      	beq.n	8003ef4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2b40      	cmp	r3, #64	@ 0x40
 8003eb6:	d01d      	beq.n	8003ef4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b08      	cmp	r3, #8
 8003ec4:	d116      	bne.n	8003ef4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	617b      	str	r3, [r7, #20]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	617b      	str	r3, [r7, #20]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	617b      	str	r3, [r7, #20]
 8003eda:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 f81d 	bl	8003f1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2208      	movs	r2, #8
 8003ee6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e00f      	b.n	8003f14 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	4013      	ands	r3, r2
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	bf0c      	ite	eq
 8003f04:	2301      	moveq	r3, #1
 8003f06:	2300      	movne	r3, #0
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	79fb      	ldrb	r3, [r7, #7]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d0b4      	beq.n	8003e7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3718      	adds	r7, #24
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b095      	sub	sp, #84	@ 0x54
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	330c      	adds	r3, #12
 8003f2a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f2e:	e853 3f00 	ldrex	r3, [r3]
 8003f32:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	330c      	adds	r3, #12
 8003f42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f44:	643a      	str	r2, [r7, #64]	@ 0x40
 8003f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f48:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f4c:	e841 2300 	strex	r3, r2, [r1]
 8003f50:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1e5      	bne.n	8003f24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3314      	adds	r3, #20
 8003f5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f60:	6a3b      	ldr	r3, [r7, #32]
 8003f62:	e853 3f00 	ldrex	r3, [r3]
 8003f66:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	f023 0301 	bic.w	r3, r3, #1
 8003f6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	3314      	adds	r3, #20
 8003f76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f80:	e841 2300 	strex	r3, r2, [r1]
 8003f84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1e5      	bne.n	8003f58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d119      	bne.n	8003fc8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	330c      	adds	r3, #12
 8003f9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	e853 3f00 	ldrex	r3, [r3]
 8003fa2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	f023 0310 	bic.w	r3, r3, #16
 8003faa:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	330c      	adds	r3, #12
 8003fb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fb4:	61ba      	str	r2, [r7, #24]
 8003fb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb8:	6979      	ldr	r1, [r7, #20]
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	e841 2300 	strex	r3, r2, [r1]
 8003fc0:	613b      	str	r3, [r7, #16]
   return(result);
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1e5      	bne.n	8003f94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003fd6:	bf00      	nop
 8003fd8:	3754      	adds	r7, #84	@ 0x54
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
	...

08003fe4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fe8:	b0c0      	sub	sp, #256	@ 0x100
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004000:	68d9      	ldr	r1, [r3, #12]
 8004002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	ea40 0301 	orr.w	r3, r0, r1
 800400c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800400e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004012:	689a      	ldr	r2, [r3, #8]
 8004014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	431a      	orrs	r2, r3
 800401c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	431a      	orrs	r2, r3
 8004024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	4313      	orrs	r3, r2
 800402c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800403c:	f021 010c 	bic.w	r1, r1, #12
 8004040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800404a:	430b      	orrs	r3, r1
 800404c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800404e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800405a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800405e:	6999      	ldr	r1, [r3, #24]
 8004060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	ea40 0301 	orr.w	r3, r0, r1
 800406a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800406c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	4b8f      	ldr	r3, [pc, #572]	@ (80042b0 <UART_SetConfig+0x2cc>)
 8004074:	429a      	cmp	r2, r3
 8004076:	d005      	beq.n	8004084 <UART_SetConfig+0xa0>
 8004078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	4b8d      	ldr	r3, [pc, #564]	@ (80042b4 <UART_SetConfig+0x2d0>)
 8004080:	429a      	cmp	r2, r3
 8004082:	d104      	bne.n	800408e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004084:	f7fe fd18 	bl	8002ab8 <HAL_RCC_GetPCLK2Freq>
 8004088:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800408c:	e003      	b.n	8004096 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800408e:	f7fe fcff 	bl	8002a90 <HAL_RCC_GetPCLK1Freq>
 8004092:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800409a:	69db      	ldr	r3, [r3, #28]
 800409c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040a0:	f040 810c 	bne.w	80042bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040a8:	2200      	movs	r2, #0
 80040aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80040ae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80040b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80040b6:	4622      	mov	r2, r4
 80040b8:	462b      	mov	r3, r5
 80040ba:	1891      	adds	r1, r2, r2
 80040bc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80040be:	415b      	adcs	r3, r3
 80040c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80040c6:	4621      	mov	r1, r4
 80040c8:	eb12 0801 	adds.w	r8, r2, r1
 80040cc:	4629      	mov	r1, r5
 80040ce:	eb43 0901 	adc.w	r9, r3, r1
 80040d2:	f04f 0200 	mov.w	r2, #0
 80040d6:	f04f 0300 	mov.w	r3, #0
 80040da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040e6:	4690      	mov	r8, r2
 80040e8:	4699      	mov	r9, r3
 80040ea:	4623      	mov	r3, r4
 80040ec:	eb18 0303 	adds.w	r3, r8, r3
 80040f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80040f4:	462b      	mov	r3, r5
 80040f6:	eb49 0303 	adc.w	r3, r9, r3
 80040fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80040fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800410a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800410e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004112:	460b      	mov	r3, r1
 8004114:	18db      	adds	r3, r3, r3
 8004116:	653b      	str	r3, [r7, #80]	@ 0x50
 8004118:	4613      	mov	r3, r2
 800411a:	eb42 0303 	adc.w	r3, r2, r3
 800411e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004120:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004124:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004128:	f7fc f8ca 	bl	80002c0 <__aeabi_uldivmod>
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	4b61      	ldr	r3, [pc, #388]	@ (80042b8 <UART_SetConfig+0x2d4>)
 8004132:	fba3 2302 	umull	r2, r3, r3, r2
 8004136:	095b      	lsrs	r3, r3, #5
 8004138:	011c      	lsls	r4, r3, #4
 800413a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800413e:	2200      	movs	r2, #0
 8004140:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004144:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004148:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800414c:	4642      	mov	r2, r8
 800414e:	464b      	mov	r3, r9
 8004150:	1891      	adds	r1, r2, r2
 8004152:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004154:	415b      	adcs	r3, r3
 8004156:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004158:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800415c:	4641      	mov	r1, r8
 800415e:	eb12 0a01 	adds.w	sl, r2, r1
 8004162:	4649      	mov	r1, r9
 8004164:	eb43 0b01 	adc.w	fp, r3, r1
 8004168:	f04f 0200 	mov.w	r2, #0
 800416c:	f04f 0300 	mov.w	r3, #0
 8004170:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004174:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004178:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800417c:	4692      	mov	sl, r2
 800417e:	469b      	mov	fp, r3
 8004180:	4643      	mov	r3, r8
 8004182:	eb1a 0303 	adds.w	r3, sl, r3
 8004186:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800418a:	464b      	mov	r3, r9
 800418c:	eb4b 0303 	adc.w	r3, fp, r3
 8004190:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041a0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80041a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80041a8:	460b      	mov	r3, r1
 80041aa:	18db      	adds	r3, r3, r3
 80041ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80041ae:	4613      	mov	r3, r2
 80041b0:	eb42 0303 	adc.w	r3, r2, r3
 80041b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80041b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80041ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80041be:	f7fc f87f 	bl	80002c0 <__aeabi_uldivmod>
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	4611      	mov	r1, r2
 80041c8:	4b3b      	ldr	r3, [pc, #236]	@ (80042b8 <UART_SetConfig+0x2d4>)
 80041ca:	fba3 2301 	umull	r2, r3, r3, r1
 80041ce:	095b      	lsrs	r3, r3, #5
 80041d0:	2264      	movs	r2, #100	@ 0x64
 80041d2:	fb02 f303 	mul.w	r3, r2, r3
 80041d6:	1acb      	subs	r3, r1, r3
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80041de:	4b36      	ldr	r3, [pc, #216]	@ (80042b8 <UART_SetConfig+0x2d4>)
 80041e0:	fba3 2302 	umull	r2, r3, r3, r2
 80041e4:	095b      	lsrs	r3, r3, #5
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80041ec:	441c      	add	r4, r3
 80041ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041f2:	2200      	movs	r2, #0
 80041f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80041f8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80041fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004200:	4642      	mov	r2, r8
 8004202:	464b      	mov	r3, r9
 8004204:	1891      	adds	r1, r2, r2
 8004206:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004208:	415b      	adcs	r3, r3
 800420a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800420c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004210:	4641      	mov	r1, r8
 8004212:	1851      	adds	r1, r2, r1
 8004214:	6339      	str	r1, [r7, #48]	@ 0x30
 8004216:	4649      	mov	r1, r9
 8004218:	414b      	adcs	r3, r1
 800421a:	637b      	str	r3, [r7, #52]	@ 0x34
 800421c:	f04f 0200 	mov.w	r2, #0
 8004220:	f04f 0300 	mov.w	r3, #0
 8004224:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004228:	4659      	mov	r1, fp
 800422a:	00cb      	lsls	r3, r1, #3
 800422c:	4651      	mov	r1, sl
 800422e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004232:	4651      	mov	r1, sl
 8004234:	00ca      	lsls	r2, r1, #3
 8004236:	4610      	mov	r0, r2
 8004238:	4619      	mov	r1, r3
 800423a:	4603      	mov	r3, r0
 800423c:	4642      	mov	r2, r8
 800423e:	189b      	adds	r3, r3, r2
 8004240:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004244:	464b      	mov	r3, r9
 8004246:	460a      	mov	r2, r1
 8004248:	eb42 0303 	adc.w	r3, r2, r3
 800424c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800425c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004260:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004264:	460b      	mov	r3, r1
 8004266:	18db      	adds	r3, r3, r3
 8004268:	62bb      	str	r3, [r7, #40]	@ 0x28
 800426a:	4613      	mov	r3, r2
 800426c:	eb42 0303 	adc.w	r3, r2, r3
 8004270:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004272:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004276:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800427a:	f7fc f821 	bl	80002c0 <__aeabi_uldivmod>
 800427e:	4602      	mov	r2, r0
 8004280:	460b      	mov	r3, r1
 8004282:	4b0d      	ldr	r3, [pc, #52]	@ (80042b8 <UART_SetConfig+0x2d4>)
 8004284:	fba3 1302 	umull	r1, r3, r3, r2
 8004288:	095b      	lsrs	r3, r3, #5
 800428a:	2164      	movs	r1, #100	@ 0x64
 800428c:	fb01 f303 	mul.w	r3, r1, r3
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	3332      	adds	r3, #50	@ 0x32
 8004296:	4a08      	ldr	r2, [pc, #32]	@ (80042b8 <UART_SetConfig+0x2d4>)
 8004298:	fba2 2303 	umull	r2, r3, r2, r3
 800429c:	095b      	lsrs	r3, r3, #5
 800429e:	f003 0207 	and.w	r2, r3, #7
 80042a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4422      	add	r2, r4
 80042aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042ac:	e106      	b.n	80044bc <UART_SetConfig+0x4d8>
 80042ae:	bf00      	nop
 80042b0:	40011000 	.word	0x40011000
 80042b4:	40011400 	.word	0x40011400
 80042b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042c0:	2200      	movs	r2, #0
 80042c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80042c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80042ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80042ce:	4642      	mov	r2, r8
 80042d0:	464b      	mov	r3, r9
 80042d2:	1891      	adds	r1, r2, r2
 80042d4:	6239      	str	r1, [r7, #32]
 80042d6:	415b      	adcs	r3, r3
 80042d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80042da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042de:	4641      	mov	r1, r8
 80042e0:	1854      	adds	r4, r2, r1
 80042e2:	4649      	mov	r1, r9
 80042e4:	eb43 0501 	adc.w	r5, r3, r1
 80042e8:	f04f 0200 	mov.w	r2, #0
 80042ec:	f04f 0300 	mov.w	r3, #0
 80042f0:	00eb      	lsls	r3, r5, #3
 80042f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042f6:	00e2      	lsls	r2, r4, #3
 80042f8:	4614      	mov	r4, r2
 80042fa:	461d      	mov	r5, r3
 80042fc:	4643      	mov	r3, r8
 80042fe:	18e3      	adds	r3, r4, r3
 8004300:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004304:	464b      	mov	r3, r9
 8004306:	eb45 0303 	adc.w	r3, r5, r3
 800430a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800430e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800431a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800431e:	f04f 0200 	mov.w	r2, #0
 8004322:	f04f 0300 	mov.w	r3, #0
 8004326:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800432a:	4629      	mov	r1, r5
 800432c:	008b      	lsls	r3, r1, #2
 800432e:	4621      	mov	r1, r4
 8004330:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004334:	4621      	mov	r1, r4
 8004336:	008a      	lsls	r2, r1, #2
 8004338:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800433c:	f7fb ffc0 	bl	80002c0 <__aeabi_uldivmod>
 8004340:	4602      	mov	r2, r0
 8004342:	460b      	mov	r3, r1
 8004344:	4b60      	ldr	r3, [pc, #384]	@ (80044c8 <UART_SetConfig+0x4e4>)
 8004346:	fba3 2302 	umull	r2, r3, r3, r2
 800434a:	095b      	lsrs	r3, r3, #5
 800434c:	011c      	lsls	r4, r3, #4
 800434e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004352:	2200      	movs	r2, #0
 8004354:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004358:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800435c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004360:	4642      	mov	r2, r8
 8004362:	464b      	mov	r3, r9
 8004364:	1891      	adds	r1, r2, r2
 8004366:	61b9      	str	r1, [r7, #24]
 8004368:	415b      	adcs	r3, r3
 800436a:	61fb      	str	r3, [r7, #28]
 800436c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004370:	4641      	mov	r1, r8
 8004372:	1851      	adds	r1, r2, r1
 8004374:	6139      	str	r1, [r7, #16]
 8004376:	4649      	mov	r1, r9
 8004378:	414b      	adcs	r3, r1
 800437a:	617b      	str	r3, [r7, #20]
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	f04f 0300 	mov.w	r3, #0
 8004384:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004388:	4659      	mov	r1, fp
 800438a:	00cb      	lsls	r3, r1, #3
 800438c:	4651      	mov	r1, sl
 800438e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004392:	4651      	mov	r1, sl
 8004394:	00ca      	lsls	r2, r1, #3
 8004396:	4610      	mov	r0, r2
 8004398:	4619      	mov	r1, r3
 800439a:	4603      	mov	r3, r0
 800439c:	4642      	mov	r2, r8
 800439e:	189b      	adds	r3, r3, r2
 80043a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043a4:	464b      	mov	r3, r9
 80043a6:	460a      	mov	r2, r1
 80043a8:	eb42 0303 	adc.w	r3, r2, r3
 80043ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80043b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80043bc:	f04f 0200 	mov.w	r2, #0
 80043c0:	f04f 0300 	mov.w	r3, #0
 80043c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80043c8:	4649      	mov	r1, r9
 80043ca:	008b      	lsls	r3, r1, #2
 80043cc:	4641      	mov	r1, r8
 80043ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043d2:	4641      	mov	r1, r8
 80043d4:	008a      	lsls	r2, r1, #2
 80043d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80043da:	f7fb ff71 	bl	80002c0 <__aeabi_uldivmod>
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	4611      	mov	r1, r2
 80043e4:	4b38      	ldr	r3, [pc, #224]	@ (80044c8 <UART_SetConfig+0x4e4>)
 80043e6:	fba3 2301 	umull	r2, r3, r3, r1
 80043ea:	095b      	lsrs	r3, r3, #5
 80043ec:	2264      	movs	r2, #100	@ 0x64
 80043ee:	fb02 f303 	mul.w	r3, r2, r3
 80043f2:	1acb      	subs	r3, r1, r3
 80043f4:	011b      	lsls	r3, r3, #4
 80043f6:	3332      	adds	r3, #50	@ 0x32
 80043f8:	4a33      	ldr	r2, [pc, #204]	@ (80044c8 <UART_SetConfig+0x4e4>)
 80043fa:	fba2 2303 	umull	r2, r3, r2, r3
 80043fe:	095b      	lsrs	r3, r3, #5
 8004400:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004404:	441c      	add	r4, r3
 8004406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800440a:	2200      	movs	r2, #0
 800440c:	673b      	str	r3, [r7, #112]	@ 0x70
 800440e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004410:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004414:	4642      	mov	r2, r8
 8004416:	464b      	mov	r3, r9
 8004418:	1891      	adds	r1, r2, r2
 800441a:	60b9      	str	r1, [r7, #8]
 800441c:	415b      	adcs	r3, r3
 800441e:	60fb      	str	r3, [r7, #12]
 8004420:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004424:	4641      	mov	r1, r8
 8004426:	1851      	adds	r1, r2, r1
 8004428:	6039      	str	r1, [r7, #0]
 800442a:	4649      	mov	r1, r9
 800442c:	414b      	adcs	r3, r1
 800442e:	607b      	str	r3, [r7, #4]
 8004430:	f04f 0200 	mov.w	r2, #0
 8004434:	f04f 0300 	mov.w	r3, #0
 8004438:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800443c:	4659      	mov	r1, fp
 800443e:	00cb      	lsls	r3, r1, #3
 8004440:	4651      	mov	r1, sl
 8004442:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004446:	4651      	mov	r1, sl
 8004448:	00ca      	lsls	r2, r1, #3
 800444a:	4610      	mov	r0, r2
 800444c:	4619      	mov	r1, r3
 800444e:	4603      	mov	r3, r0
 8004450:	4642      	mov	r2, r8
 8004452:	189b      	adds	r3, r3, r2
 8004454:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004456:	464b      	mov	r3, r9
 8004458:	460a      	mov	r2, r1
 800445a:	eb42 0303 	adc.w	r3, r2, r3
 800445e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	663b      	str	r3, [r7, #96]	@ 0x60
 800446a:	667a      	str	r2, [r7, #100]	@ 0x64
 800446c:	f04f 0200 	mov.w	r2, #0
 8004470:	f04f 0300 	mov.w	r3, #0
 8004474:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004478:	4649      	mov	r1, r9
 800447a:	008b      	lsls	r3, r1, #2
 800447c:	4641      	mov	r1, r8
 800447e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004482:	4641      	mov	r1, r8
 8004484:	008a      	lsls	r2, r1, #2
 8004486:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800448a:	f7fb ff19 	bl	80002c0 <__aeabi_uldivmod>
 800448e:	4602      	mov	r2, r0
 8004490:	460b      	mov	r3, r1
 8004492:	4b0d      	ldr	r3, [pc, #52]	@ (80044c8 <UART_SetConfig+0x4e4>)
 8004494:	fba3 1302 	umull	r1, r3, r3, r2
 8004498:	095b      	lsrs	r3, r3, #5
 800449a:	2164      	movs	r1, #100	@ 0x64
 800449c:	fb01 f303 	mul.w	r3, r1, r3
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	011b      	lsls	r3, r3, #4
 80044a4:	3332      	adds	r3, #50	@ 0x32
 80044a6:	4a08      	ldr	r2, [pc, #32]	@ (80044c8 <UART_SetConfig+0x4e4>)
 80044a8:	fba2 2303 	umull	r2, r3, r2, r3
 80044ac:	095b      	lsrs	r3, r3, #5
 80044ae:	f003 020f 	and.w	r2, r3, #15
 80044b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4422      	add	r2, r4
 80044ba:	609a      	str	r2, [r3, #8]
}
 80044bc:	bf00      	nop
 80044be:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80044c2:	46bd      	mov	sp, r7
 80044c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044c8:	51eb851f 	.word	0x51eb851f

080044cc <__NVIC_SetPriority>:
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	4603      	mov	r3, r0
 80044d4:	6039      	str	r1, [r7, #0]
 80044d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	db0a      	blt.n	80044f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	b2da      	uxtb	r2, r3
 80044e4:	490c      	ldr	r1, [pc, #48]	@ (8004518 <__NVIC_SetPriority+0x4c>)
 80044e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ea:	0112      	lsls	r2, r2, #4
 80044ec:	b2d2      	uxtb	r2, r2
 80044ee:	440b      	add	r3, r1
 80044f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80044f4:	e00a      	b.n	800450c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	4908      	ldr	r1, [pc, #32]	@ (800451c <__NVIC_SetPriority+0x50>)
 80044fc:	79fb      	ldrb	r3, [r7, #7]
 80044fe:	f003 030f 	and.w	r3, r3, #15
 8004502:	3b04      	subs	r3, #4
 8004504:	0112      	lsls	r2, r2, #4
 8004506:	b2d2      	uxtb	r2, r2
 8004508:	440b      	add	r3, r1
 800450a:	761a      	strb	r2, [r3, #24]
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr
 8004518:	e000e100 	.word	0xe000e100
 800451c:	e000ed00 	.word	0xe000ed00

08004520 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004524:	4b05      	ldr	r3, [pc, #20]	@ (800453c <SysTick_Handler+0x1c>)
 8004526:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004528:	f002 ff9a 	bl	8007460 <xTaskGetSchedulerState>
 800452c:	4603      	mov	r3, r0
 800452e:	2b01      	cmp	r3, #1
 8004530:	d001      	beq.n	8004536 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004532:	f003 fec9 	bl	80082c8 <xPortSysTickHandler>
  }
}
 8004536:	bf00      	nop
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	e000e010 	.word	0xe000e010

08004540 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004544:	2100      	movs	r1, #0
 8004546:	f06f 0004 	mvn.w	r0, #4
 800454a:	f7ff ffbf 	bl	80044cc <__NVIC_SetPriority>
#endif
}
 800454e:	bf00      	nop
 8004550:	bd80      	pop	{r7, pc}
	...

08004554 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800455a:	f3ef 8305 	mrs	r3, IPSR
 800455e:	603b      	str	r3, [r7, #0]
  return(result);
 8004560:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004566:	f06f 0305 	mvn.w	r3, #5
 800456a:	607b      	str	r3, [r7, #4]
 800456c:	e00c      	b.n	8004588 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800456e:	4b0a      	ldr	r3, [pc, #40]	@ (8004598 <osKernelInitialize+0x44>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d105      	bne.n	8004582 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004576:	4b08      	ldr	r3, [pc, #32]	@ (8004598 <osKernelInitialize+0x44>)
 8004578:	2201      	movs	r2, #1
 800457a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800457c:	2300      	movs	r3, #0
 800457e:	607b      	str	r3, [r7, #4]
 8004580:	e002      	b.n	8004588 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004582:	f04f 33ff 	mov.w	r3, #4294967295
 8004586:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004588:	687b      	ldr	r3, [r7, #4]
}
 800458a:	4618      	mov	r0, r3
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	200002d4 	.word	0x200002d4

0800459c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045a2:	f3ef 8305 	mrs	r3, IPSR
 80045a6:	603b      	str	r3, [r7, #0]
  return(result);
 80045a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80045ae:	f06f 0305 	mvn.w	r3, #5
 80045b2:	607b      	str	r3, [r7, #4]
 80045b4:	e010      	b.n	80045d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80045b6:	4b0b      	ldr	r3, [pc, #44]	@ (80045e4 <osKernelStart+0x48>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d109      	bne.n	80045d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80045be:	f7ff ffbf 	bl	8004540 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80045c2:	4b08      	ldr	r3, [pc, #32]	@ (80045e4 <osKernelStart+0x48>)
 80045c4:	2202      	movs	r2, #2
 80045c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80045c8:	f002 fa26 	bl	8006a18 <vTaskStartScheduler>
      stat = osOK;
 80045cc:	2300      	movs	r3, #0
 80045ce:	607b      	str	r3, [r7, #4]
 80045d0:	e002      	b.n	80045d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80045d2:	f04f 33ff 	mov.w	r3, #4294967295
 80045d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80045d8:	687b      	ldr	r3, [r7, #4]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	200002d4 	.word	0x200002d4

080045e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b08e      	sub	sp, #56	@ 0x38
 80045ec:	af04      	add	r7, sp, #16
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80045f4:	2300      	movs	r3, #0
 80045f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045f8:	f3ef 8305 	mrs	r3, IPSR
 80045fc:	617b      	str	r3, [r7, #20]
  return(result);
 80045fe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004600:	2b00      	cmp	r3, #0
 8004602:	d17f      	bne.n	8004704 <osThreadNew+0x11c>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d07c      	beq.n	8004704 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800460a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800460e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004610:	2318      	movs	r3, #24
 8004612:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004614:	2300      	movs	r3, #0
 8004616:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004618:	f04f 33ff 	mov.w	r3, #4294967295
 800461c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d045      	beq.n	80046b0 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d002      	beq.n	8004632 <osThreadNew+0x4a>
        name = attr->name;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d002      	beq.n	8004640 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d008      	beq.n	8004658 <osThreadNew+0x70>
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	2b38      	cmp	r3, #56	@ 0x38
 800464a:	d805      	bhi.n	8004658 <osThreadNew+0x70>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f003 0301 	and.w	r3, r3, #1
 8004654:	2b00      	cmp	r3, #0
 8004656:	d001      	beq.n	800465c <osThreadNew+0x74>
        return (NULL);
 8004658:	2300      	movs	r3, #0
 800465a:	e054      	b.n	8004706 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d003      	beq.n	800466c <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	089b      	lsrs	r3, r3, #2
 800466a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00e      	beq.n	8004692 <osThreadNew+0xaa>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	2bbf      	cmp	r3, #191	@ 0xbf
 800467a:	d90a      	bls.n	8004692 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004680:	2b00      	cmp	r3, #0
 8004682:	d006      	beq.n	8004692 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <osThreadNew+0xaa>
        mem = 1;
 800468c:	2301      	movs	r3, #1
 800468e:	61bb      	str	r3, [r7, #24]
 8004690:	e010      	b.n	80046b4 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10c      	bne.n	80046b4 <osThreadNew+0xcc>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d108      	bne.n	80046b4 <osThreadNew+0xcc>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d104      	bne.n	80046b4 <osThreadNew+0xcc>
          mem = 0;
 80046aa:	2300      	movs	r3, #0
 80046ac:	61bb      	str	r3, [r7, #24]
 80046ae:	e001      	b.n	80046b4 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 80046b0:	2300      	movs	r3, #0
 80046b2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d110      	bne.n	80046dc <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80046c2:	9202      	str	r2, [sp, #8]
 80046c4:	9301      	str	r3, [sp, #4]
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	6a3a      	ldr	r2, [r7, #32]
 80046ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f001 ffa7 	bl	8006624 <xTaskCreateStatic>
 80046d6:	4603      	mov	r3, r0
 80046d8:	613b      	str	r3, [r7, #16]
 80046da:	e013      	b.n	8004704 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d110      	bne.n	8004704 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80046e2:	6a3b      	ldr	r3, [r7, #32]
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	f107 0310 	add.w	r3, r7, #16
 80046ea:	9301      	str	r3, [sp, #4]
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f001 fff5 	bl	80066e4 <xTaskCreate>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d001      	beq.n	8004704 <osThreadNew+0x11c>
            hTask = NULL;
 8004700:	2300      	movs	r3, #0
 8004702:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004704:	693b      	ldr	r3, [r7, #16]
}
 8004706:	4618      	mov	r0, r3
 8004708:	3728      	adds	r7, #40	@ 0x28
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800470e:	b580      	push	{r7, lr}
 8004710:	b084      	sub	sp, #16
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004716:	f3ef 8305 	mrs	r3, IPSR
 800471a:	60bb      	str	r3, [r7, #8]
  return(result);
 800471c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800471e:	2b00      	cmp	r3, #0
 8004720:	d003      	beq.n	800472a <osDelay+0x1c>
    stat = osErrorISR;
 8004722:	f06f 0305 	mvn.w	r3, #5
 8004726:	60fb      	str	r3, [r7, #12]
 8004728:	e007      	b.n	800473a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800472a:	2300      	movs	r3, #0
 800472c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d002      	beq.n	800473a <osDelay+0x2c>
      vTaskDelay(ticks);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f002 f939 	bl	80069ac <vTaskDelay>
    }
  }

  return (stat);
 800473a:	68fb      	ldr	r3, [r7, #12]
}
 800473c:	4618      	mov	r0, r3
 800473e:	3710      	adds	r7, #16
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800474c:	2300      	movs	r3, #0
 800474e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004750:	f3ef 8305 	mrs	r3, IPSR
 8004754:	60fb      	str	r3, [r7, #12]
  return(result);
 8004756:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8004758:	2b00      	cmp	r3, #0
 800475a:	d12d      	bne.n	80047b8 <osEventFlagsNew+0x74>
    mem = -1;
 800475c:	f04f 33ff 	mov.w	r3, #4294967295
 8004760:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d015      	beq.n	8004794 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d006      	beq.n	800477e <osEventFlagsNew+0x3a>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	2b1f      	cmp	r3, #31
 8004776:	d902      	bls.n	800477e <osEventFlagsNew+0x3a>
        mem = 1;
 8004778:	2301      	movs	r3, #1
 800477a:	613b      	str	r3, [r7, #16]
 800477c:	e00c      	b.n	8004798 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d108      	bne.n	8004798 <osEventFlagsNew+0x54>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d104      	bne.n	8004798 <osEventFlagsNew+0x54>
          mem = 0;
 800478e:	2300      	movs	r3, #0
 8004790:	613b      	str	r3, [r7, #16]
 8004792:	e001      	b.n	8004798 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8004794:	2300      	movs	r3, #0
 8004796:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d106      	bne.n	80047ac <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 fbac 	bl	8004f00 <xEventGroupCreateStatic>
 80047a8:	6178      	str	r0, [r7, #20]
 80047aa:	e005      	b.n	80047b8 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d102      	bne.n	80047b8 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80047b2:	f000 fbde 	bl	8004f72 <xEventGroupCreate>
 80047b6:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80047b8:	697b      	ldr	r3, [r7, #20]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3718      	adds	r7, #24
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
	...

080047c4 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <osEventFlagsSet+0x1c>
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047de:	d303      	bcc.n	80047e8 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 80047e0:	f06f 0303 	mvn.w	r3, #3
 80047e4:	617b      	str	r3, [r7, #20]
 80047e6:	e028      	b.n	800483a <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047e8:	f3ef 8305 	mrs	r3, IPSR
 80047ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80047ee:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d01d      	beq.n	8004830 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80047f4:	2300      	movs	r3, #0
 80047f6:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80047f8:	f107 0308 	add.w	r3, r7, #8
 80047fc:	461a      	mov	r2, r3
 80047fe:	6839      	ldr	r1, [r7, #0]
 8004800:	6938      	ldr	r0, [r7, #16]
 8004802:	f000 fddd 	bl	80053c0 <xEventGroupSetBitsFromISR>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d103      	bne.n	8004814 <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 800480c:	f06f 0302 	mvn.w	r3, #2
 8004810:	617b      	str	r3, [r7, #20]
 8004812:	e012      	b.n	800483a <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00d      	beq.n	800483a <osEventFlagsSet+0x76>
 800481e:	4b09      	ldr	r3, [pc, #36]	@ (8004844 <osEventFlagsSet+0x80>)
 8004820:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004824:	601a      	str	r2, [r3, #0]
 8004826:	f3bf 8f4f 	dsb	sy
 800482a:	f3bf 8f6f 	isb	sy
 800482e:	e004      	b.n	800483a <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8004830:	6839      	ldr	r1, [r7, #0]
 8004832:	6938      	ldr	r0, [r7, #16]
 8004834:	f000 fcfc 	bl	8005230 <xEventGroupSetBits>
 8004838:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800483a:	697b      	ldr	r3, [r7, #20]
}
 800483c:	4618      	mov	r0, r3
 800483e:	3718      	adds	r7, #24
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	e000ed04 	.word	0xe000ed04

08004848 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d003      	beq.n	8004864 <osEventFlagsClear+0x1c>
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004862:	d303      	bcc.n	800486c <osEventFlagsClear+0x24>
    rflags = (uint32_t)osErrorParameter;
 8004864:	f06f 0303 	mvn.w	r3, #3
 8004868:	617b      	str	r3, [r7, #20]
 800486a:	e019      	b.n	80048a0 <osEventFlagsClear+0x58>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800486c:	f3ef 8305 	mrs	r3, IPSR
 8004870:	60fb      	str	r3, [r7, #12]
  return(result);
 8004872:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00e      	beq.n	8004896 <osEventFlagsClear+0x4e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8004878:	6938      	ldr	r0, [r7, #16]
 800487a:	f000 fcb5 	bl	80051e8 <xEventGroupGetBitsFromISR>
 800487e:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8004880:	6839      	ldr	r1, [r7, #0]
 8004882:	6938      	ldr	r0, [r7, #16]
 8004884:	f000 fc9c 	bl	80051c0 <xEventGroupClearBitsFromISR>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d108      	bne.n	80048a0 <osEventFlagsClear+0x58>
      rflags = (uint32_t)osErrorResource;
 800488e:	f06f 0302 	mvn.w	r3, #2
 8004892:	617b      	str	r3, [r7, #20]
 8004894:	e004      	b.n	80048a0 <osEventFlagsClear+0x58>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8004896:	6839      	ldr	r1, [r7, #0]
 8004898:	6938      	ldr	r0, [r7, #16]
 800489a:	f000 fc57 	bl	800514c <xEventGroupClearBits>
 800489e:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80048a0:	697b      	ldr	r3, [r7, #20]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b086      	sub	sp, #24
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if (ef_id == NULL) {
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d102      	bne.n	80048c2 <osEventFlagsGet+0x18>
    rflags = 0U;
 80048bc:	2300      	movs	r3, #0
 80048be:	617b      	str	r3, [r7, #20]
 80048c0:	e00f      	b.n	80048e2 <osEventFlagsGet+0x38>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048c2:	f3ef 8305 	mrs	r3, IPSR
 80048c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80048c8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d004      	beq.n	80048d8 <osEventFlagsGet+0x2e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 80048ce:	6938      	ldr	r0, [r7, #16]
 80048d0:	f000 fc8a 	bl	80051e8 <xEventGroupGetBitsFromISR>
 80048d4:	6178      	str	r0, [r7, #20]
 80048d6:	e004      	b.n	80048e2 <osEventFlagsGet+0x38>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 80048d8:	2100      	movs	r1, #0
 80048da:	6938      	ldr	r0, [r7, #16]
 80048dc:	f000 fc36 	bl	800514c <xEventGroupClearBits>
 80048e0:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80048e2:	697b      	ldr	r3, [r7, #20]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3718      	adds	r7, #24
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <osEventFlagsWait>:

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b08c      	sub	sp, #48	@ 0x30
 80048f0:	af02      	add	r7, sp, #8
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
 80048f8:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d003      	beq.n	800490c <osEventFlagsWait+0x20>
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800490a:	d303      	bcc.n	8004914 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 800490c:	f06f 0303 	mvn.w	r3, #3
 8004910:	61fb      	str	r3, [r7, #28]
 8004912:	e04b      	b.n	80049ac <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004914:	f3ef 8305 	mrs	r3, IPSR
 8004918:	617b      	str	r3, [r7, #20]
  return(result);
 800491a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800491c:	2b00      	cmp	r3, #0
 800491e:	d003      	beq.n	8004928 <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 8004920:	f06f 0305 	mvn.w	r3, #5
 8004924:	61fb      	str	r3, [r7, #28]
 8004926:	e041      	b.n	80049ac <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 8004932:	2301      	movs	r3, #1
 8004934:	627b      	str	r3, [r7, #36]	@ 0x24
 8004936:	e001      	b.n	800493c <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 8004938:	2300      	movs	r3, #0
 800493a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d002      	beq.n	800494c <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 8004946:	2300      	movs	r3, #0
 8004948:	623b      	str	r3, [r7, #32]
 800494a:	e001      	b.n	8004950 <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 800494c:	2301      	movs	r3, #1
 800494e:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004956:	6a3a      	ldr	r2, [r7, #32]
 8004958:	68b9      	ldr	r1, [r7, #8]
 800495a:	69b8      	ldr	r0, [r7, #24]
 800495c:	f000 fb24 	bl	8004fa8 <xEventGroupWaitBits>
 8004960:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b00      	cmp	r3, #0
 800496a:	d010      	beq.n	800498e <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	4013      	ands	r3, r2
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	429a      	cmp	r2, r3
 8004976:	d019      	beq.n	80049ac <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d003      	beq.n	8004986 <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 800497e:	f06f 0301 	mvn.w	r3, #1
 8004982:	61fb      	str	r3, [r7, #28]
 8004984:	e012      	b.n	80049ac <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004986:	f06f 0302 	mvn.w	r3, #2
 800498a:	61fb      	str	r3, [r7, #28]
 800498c:	e00e      	b.n	80049ac <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	4013      	ands	r3, r2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d109      	bne.n	80049ac <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d003      	beq.n	80049a6 <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 800499e:	f06f 0301 	mvn.w	r3, #1
 80049a2:	61fb      	str	r3, [r7, #28]
 80049a4:	e002      	b.n	80049ac <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 80049a6:	f06f 0302 	mvn.w	r3, #2
 80049aa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80049ac:	69fb      	ldr	r3, [r7, #28]
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3728      	adds	r7, #40	@ 0x28
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b08a      	sub	sp, #40	@ 0x28
 80049ba:	af02      	add	r7, sp, #8
 80049bc:	60f8      	str	r0, [r7, #12]
 80049be:	60b9      	str	r1, [r7, #8]
 80049c0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80049c2:	2300      	movs	r3, #0
 80049c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049c6:	f3ef 8305 	mrs	r3, IPSR
 80049ca:	613b      	str	r3, [r7, #16]
  return(result);
 80049cc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d175      	bne.n	8004abe <osSemaphoreNew+0x108>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d072      	beq.n	8004abe <osSemaphoreNew+0x108>
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d86e      	bhi.n	8004abe <osSemaphoreNew+0x108>
    mem = -1;
 80049e0:	f04f 33ff 	mov.w	r3, #4294967295
 80049e4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d015      	beq.n	8004a18 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d006      	beq.n	8004a02 <osSemaphoreNew+0x4c>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	2b4f      	cmp	r3, #79	@ 0x4f
 80049fa:	d902      	bls.n	8004a02 <osSemaphoreNew+0x4c>
        mem = 1;
 80049fc:	2301      	movs	r3, #1
 80049fe:	61bb      	str	r3, [r7, #24]
 8004a00:	e00c      	b.n	8004a1c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d108      	bne.n	8004a1c <osSemaphoreNew+0x66>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d104      	bne.n	8004a1c <osSemaphoreNew+0x66>
          mem = 0;
 8004a12:	2300      	movs	r3, #0
 8004a14:	61bb      	str	r3, [r7, #24]
 8004a16:	e001      	b.n	8004a1c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a22:	d04c      	beq.n	8004abe <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d128      	bne.n	8004a7c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d10a      	bne.n	8004a46 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	2203      	movs	r2, #3
 8004a36:	9200      	str	r2, [sp, #0]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	2001      	movs	r0, #1
 8004a3e:	f000 fdf1 	bl	8005624 <xQueueGenericCreateStatic>
 8004a42:	61f8      	str	r0, [r7, #28]
 8004a44:	e005      	b.n	8004a52 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8004a46:	2203      	movs	r2, #3
 8004a48:	2100      	movs	r1, #0
 8004a4a:	2001      	movs	r0, #1
 8004a4c:	f000 fe67 	bl	800571e <xQueueGenericCreate>
 8004a50:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d022      	beq.n	8004a9e <osSemaphoreNew+0xe8>
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d01f      	beq.n	8004a9e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004a5e:	2300      	movs	r3, #0
 8004a60:	2200      	movs	r2, #0
 8004a62:	2100      	movs	r1, #0
 8004a64:	69f8      	ldr	r0, [r7, #28]
 8004a66:	f000 ff27 	bl	80058b8 <xQueueGenericSend>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d016      	beq.n	8004a9e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8004a70:	69f8      	ldr	r0, [r7, #28]
 8004a72:	f001 fc03 	bl	800627c <vQueueDelete>
            hSemaphore = NULL;
 8004a76:	2300      	movs	r3, #0
 8004a78:	61fb      	str	r3, [r7, #28]
 8004a7a:	e010      	b.n	8004a9e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d108      	bne.n	8004a94 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	461a      	mov	r2, r3
 8004a88:	68b9      	ldr	r1, [r7, #8]
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f000 fea5 	bl	80057da <xQueueCreateCountingSemaphoreStatic>
 8004a90:	61f8      	str	r0, [r7, #28]
 8004a92:	e004      	b.n	8004a9e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004a94:	68b9      	ldr	r1, [r7, #8]
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f000 fed8 	bl	800584c <xQueueCreateCountingSemaphore>
 8004a9c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00c      	beq.n	8004abe <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <osSemaphoreNew+0xfc>
          name = attr->name;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	617b      	str	r3, [r7, #20]
 8004ab0:	e001      	b.n	8004ab6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004ab6:	6979      	ldr	r1, [r7, #20]
 8004ab8:	69f8      	ldr	r0, [r7, #28]
 8004aba:	f001 fd2b 	bl	8006514 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004abe:	69fb      	ldr	r3, [r7, #28]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3720      	adds	r7, #32
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d103      	bne.n	8004ae8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004ae0:	f06f 0303 	mvn.w	r3, #3
 8004ae4:	617b      	str	r3, [r7, #20]
 8004ae6:	e039      	b.n	8004b5c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ae8:	f3ef 8305 	mrs	r3, IPSR
 8004aec:	60fb      	str	r3, [r7, #12]
  return(result);
 8004aee:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d022      	beq.n	8004b3a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8004afa:	f06f 0303 	mvn.w	r3, #3
 8004afe:	617b      	str	r3, [r7, #20]
 8004b00:	e02c      	b.n	8004b5c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8004b02:	2300      	movs	r3, #0
 8004b04:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004b06:	f107 0308 	add.w	r3, r7, #8
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	6938      	ldr	r0, [r7, #16]
 8004b10:	f001 faf4 	bl	80060fc <xQueueReceiveFromISR>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d003      	beq.n	8004b22 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8004b1a:	f06f 0302 	mvn.w	r3, #2
 8004b1e:	617b      	str	r3, [r7, #20]
 8004b20:	e01c      	b.n	8004b5c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d019      	beq.n	8004b5c <osSemaphoreAcquire+0x94>
 8004b28:	4b0f      	ldr	r3, [pc, #60]	@ (8004b68 <osSemaphoreAcquire+0xa0>)
 8004b2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	f3bf 8f4f 	dsb	sy
 8004b34:	f3bf 8f6f 	isb	sy
 8004b38:	e010      	b.n	8004b5c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004b3a:	6839      	ldr	r1, [r7, #0]
 8004b3c:	6938      	ldr	r0, [r7, #16]
 8004b3e:	f001 f9cd 	bl	8005edc <xQueueSemaphoreTake>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d009      	beq.n	8004b5c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8004b4e:	f06f 0301 	mvn.w	r3, #1
 8004b52:	617b      	str	r3, [r7, #20]
 8004b54:	e002      	b.n	8004b5c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8004b56:	f06f 0302 	mvn.w	r3, #2
 8004b5a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004b5c:	697b      	ldr	r3, [r7, #20]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3718      	adds	r7, #24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	e000ed04 	.word	0xe000ed04

08004b6c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d103      	bne.n	8004b8a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8004b82:	f06f 0303 	mvn.w	r3, #3
 8004b86:	617b      	str	r3, [r7, #20]
 8004b88:	e02c      	b.n	8004be4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b8a:	f3ef 8305 	mrs	r3, IPSR
 8004b8e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b90:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d01a      	beq.n	8004bcc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8004b96:	2300      	movs	r3, #0
 8004b98:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004b9a:	f107 0308 	add.w	r3, r7, #8
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	6938      	ldr	r0, [r7, #16]
 8004ba2:	f001 f829 	bl	8005bf8 <xQueueGiveFromISR>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d003      	beq.n	8004bb4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8004bac:	f06f 0302 	mvn.w	r3, #2
 8004bb0:	617b      	str	r3, [r7, #20]
 8004bb2:	e017      	b.n	8004be4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d014      	beq.n	8004be4 <osSemaphoreRelease+0x78>
 8004bba:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf0 <osSemaphoreRelease+0x84>)
 8004bbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bc0:	601a      	str	r2, [r3, #0]
 8004bc2:	f3bf 8f4f 	dsb	sy
 8004bc6:	f3bf 8f6f 	isb	sy
 8004bca:	e00b      	b.n	8004be4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004bcc:	2300      	movs	r3, #0
 8004bce:	2200      	movs	r2, #0
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	6938      	ldr	r0, [r7, #16]
 8004bd4:	f000 fe70 	bl	80058b8 <xQueueGenericSend>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d002      	beq.n	8004be4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8004bde:	f06f 0302 	mvn.w	r3, #2
 8004be2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8004be4:	697b      	ldr	r3, [r7, #20]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3718      	adds	r7, #24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	e000ed04 	.word	0xe000ed04

08004bf4 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	613b      	str	r3, [r7, #16]
  uint32_t count;

  if (hSemaphore == NULL) {
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d102      	bne.n	8004c0c <osSemaphoreGetCount+0x18>
    count = 0U;
 8004c06:	2300      	movs	r3, #0
 8004c08:	617b      	str	r3, [r7, #20]
 8004c0a:	e00e      	b.n	8004c2a <osSemaphoreGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c0c:	f3ef 8305 	mrs	r3, IPSR
 8004c10:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c12:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d004      	beq.n	8004c22 <osSemaphoreGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 8004c18:	6938      	ldr	r0, [r7, #16]
 8004c1a:	f001 fb10 	bl	800623e <uxQueueMessagesWaitingFromISR>
 8004c1e:	6178      	str	r0, [r7, #20]
 8004c20:	e003      	b.n	8004c2a <osSemaphoreGetCount+0x36>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 8004c22:	6938      	ldr	r0, [r7, #16]
 8004c24:	f001 faec 	bl	8006200 <uxQueueMessagesWaiting>
 8004c28:	6178      	str	r0, [r7, #20]
  }

  return (count);
 8004c2a:	697b      	ldr	r3, [r7, #20]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3718      	adds	r7, #24
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b08a      	sub	sp, #40	@ 0x28
 8004c38:	af02      	add	r7, sp, #8
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004c40:	2300      	movs	r3, #0
 8004c42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c44:	f3ef 8305 	mrs	r3, IPSR
 8004c48:	613b      	str	r3, [r7, #16]
  return(result);
 8004c4a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d15f      	bne.n	8004d10 <osMessageQueueNew+0xdc>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d05c      	beq.n	8004d10 <osMessageQueueNew+0xdc>
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d059      	beq.n	8004d10 <osMessageQueueNew+0xdc>
    mem = -1;
 8004c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c60:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d029      	beq.n	8004cbc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d012      	beq.n	8004c96 <osMessageQueueNew+0x62>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	2b4f      	cmp	r3, #79	@ 0x4f
 8004c76:	d90e      	bls.n	8004c96 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00a      	beq.n	8004c96 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	695a      	ldr	r2, [r3, #20]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	68b9      	ldr	r1, [r7, #8]
 8004c88:	fb01 f303 	mul.w	r3, r1, r3
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d302      	bcc.n	8004c96 <osMessageQueueNew+0x62>
        mem = 1;
 8004c90:	2301      	movs	r3, #1
 8004c92:	61bb      	str	r3, [r7, #24]
 8004c94:	e014      	b.n	8004cc0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d110      	bne.n	8004cc0 <osMessageQueueNew+0x8c>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10c      	bne.n	8004cc0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d108      	bne.n	8004cc0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d104      	bne.n	8004cc0 <osMessageQueueNew+0x8c>
          mem = 0;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	61bb      	str	r3, [r7, #24]
 8004cba:	e001      	b.n	8004cc0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d10b      	bne.n	8004cde <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	691a      	ldr	r2, [r3, #16]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	2100      	movs	r1, #0
 8004cd0:	9100      	str	r1, [sp, #0]
 8004cd2:	68b9      	ldr	r1, [r7, #8]
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 fca5 	bl	8005624 <xQueueGenericCreateStatic>
 8004cda:	61f8      	str	r0, [r7, #28]
 8004cdc:	e008      	b.n	8004cf0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d105      	bne.n	8004cf0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	68b9      	ldr	r1, [r7, #8]
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 fd18 	bl	800571e <xQueueGenericCreate>
 8004cee:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00c      	beq.n	8004d10 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <osMessageQueueNew+0xd0>
        name = attr->name;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	617b      	str	r3, [r7, #20]
 8004d02:	e001      	b.n	8004d08 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004d04:	2300      	movs	r3, #0
 8004d06:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004d08:	6979      	ldr	r1, [r7, #20]
 8004d0a:	69f8      	ldr	r0, [r7, #28]
 8004d0c:	f001 fc02 	bl	8006514 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004d10:	69fb      	ldr	r3, [r7, #28]
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3720      	adds	r7, #32
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
	...

08004d1c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b088      	sub	sp, #32
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	603b      	str	r3, [r7, #0]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004d30:	2300      	movs	r3, #0
 8004d32:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d34:	f3ef 8305 	mrs	r3, IPSR
 8004d38:	617b      	str	r3, [r7, #20]
  return(result);
 8004d3a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d028      	beq.n	8004d92 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d005      	beq.n	8004d52 <osMessageQueuePut+0x36>
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d002      	beq.n	8004d52 <osMessageQueuePut+0x36>
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d003      	beq.n	8004d5a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004d52:	f06f 0303 	mvn.w	r3, #3
 8004d56:	61fb      	str	r3, [r7, #28]
 8004d58:	e038      	b.n	8004dcc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004d5e:	f107 0210 	add.w	r2, r7, #16
 8004d62:	2300      	movs	r3, #0
 8004d64:	68b9      	ldr	r1, [r7, #8]
 8004d66:	69b8      	ldr	r0, [r7, #24]
 8004d68:	f000 fea8 	bl	8005abc <xQueueGenericSendFromISR>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d003      	beq.n	8004d7a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004d72:	f06f 0302 	mvn.w	r3, #2
 8004d76:	61fb      	str	r3, [r7, #28]
 8004d78:	e028      	b.n	8004dcc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d025      	beq.n	8004dcc <osMessageQueuePut+0xb0>
 8004d80:	4b15      	ldr	r3, [pc, #84]	@ (8004dd8 <osMessageQueuePut+0xbc>)
 8004d82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d86:	601a      	str	r2, [r3, #0]
 8004d88:	f3bf 8f4f 	dsb	sy
 8004d8c:	f3bf 8f6f 	isb	sy
 8004d90:	e01c      	b.n	8004dcc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <osMessageQueuePut+0x82>
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d103      	bne.n	8004da6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004d9e:	f06f 0303 	mvn.w	r3, #3
 8004da2:	61fb      	str	r3, [r7, #28]
 8004da4:	e012      	b.n	8004dcc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004da6:	2300      	movs	r3, #0
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	68b9      	ldr	r1, [r7, #8]
 8004dac:	69b8      	ldr	r0, [r7, #24]
 8004dae:	f000 fd83 	bl	80058b8 <xQueueGenericSend>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d009      	beq.n	8004dcc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004dbe:	f06f 0301 	mvn.w	r3, #1
 8004dc2:	61fb      	str	r3, [r7, #28]
 8004dc4:	e002      	b.n	8004dcc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8004dc6:	f06f 0302 	mvn.w	r3, #2
 8004dca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004dcc:	69fb      	ldr	r3, [r7, #28]
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3720      	adds	r7, #32
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	e000ed04 	.word	0xe000ed04

08004ddc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b088      	sub	sp, #32
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004df2:	f3ef 8305 	mrs	r3, IPSR
 8004df6:	617b      	str	r3, [r7, #20]
  return(result);
 8004df8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d028      	beq.n	8004e50 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d005      	beq.n	8004e10 <osMessageQueueGet+0x34>
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d002      	beq.n	8004e10 <osMessageQueueGet+0x34>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d003      	beq.n	8004e18 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004e10:	f06f 0303 	mvn.w	r3, #3
 8004e14:	61fb      	str	r3, [r7, #28]
 8004e16:	e037      	b.n	8004e88 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004e1c:	f107 0310 	add.w	r3, r7, #16
 8004e20:	461a      	mov	r2, r3
 8004e22:	68b9      	ldr	r1, [r7, #8]
 8004e24:	69b8      	ldr	r0, [r7, #24]
 8004e26:	f001 f969 	bl	80060fc <xQueueReceiveFromISR>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d003      	beq.n	8004e38 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004e30:	f06f 0302 	mvn.w	r3, #2
 8004e34:	61fb      	str	r3, [r7, #28]
 8004e36:	e027      	b.n	8004e88 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d024      	beq.n	8004e88 <osMessageQueueGet+0xac>
 8004e3e:	4b15      	ldr	r3, [pc, #84]	@ (8004e94 <osMessageQueueGet+0xb8>)
 8004e40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e44:	601a      	str	r2, [r3, #0]
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	f3bf 8f6f 	isb	sy
 8004e4e:	e01b      	b.n	8004e88 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d002      	beq.n	8004e5c <osMessageQueueGet+0x80>
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d103      	bne.n	8004e64 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004e5c:	f06f 0303 	mvn.w	r3, #3
 8004e60:	61fb      	str	r3, [r7, #28]
 8004e62:	e011      	b.n	8004e88 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	68b9      	ldr	r1, [r7, #8]
 8004e68:	69b8      	ldr	r0, [r7, #24]
 8004e6a:	f000 ff55 	bl	8005d18 <xQueueReceive>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d009      	beq.n	8004e88 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8004e7a:	f06f 0301 	mvn.w	r3, #1
 8004e7e:	61fb      	str	r3, [r7, #28]
 8004e80:	e002      	b.n	8004e88 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004e82:	f06f 0302 	mvn.w	r3, #2
 8004e86:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004e88:	69fb      	ldr	r3, [r7, #28]
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3720      	adds	r7, #32
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	e000ed04 	.word	0xe000ed04

08004e98 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4a07      	ldr	r2, [pc, #28]	@ (8004ec4 <vApplicationGetIdleTaskMemory+0x2c>)
 8004ea8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	4a06      	ldr	r2, [pc, #24]	@ (8004ec8 <vApplicationGetIdleTaskMemory+0x30>)
 8004eae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004eb6:	601a      	str	r2, [r3, #0]
}
 8004eb8:	bf00      	nop
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	200002d8 	.word	0x200002d8
 8004ec8:	20000398 	.word	0x20000398

08004ecc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	4a07      	ldr	r2, [pc, #28]	@ (8004ef8 <vApplicationGetTimerTaskMemory+0x2c>)
 8004edc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	4a06      	ldr	r2, [pc, #24]	@ (8004efc <vApplicationGetTimerTaskMemory+0x30>)
 8004ee2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004eea:	601a      	str	r2, [r3, #0]
}
 8004eec:	bf00      	nop
 8004eee:	3714      	adds	r7, #20
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr
 8004ef8:	20000798 	.word	0x20000798
 8004efc:	20000858 	.word	0x20000858

08004f00 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10b      	bne.n	8004f26 <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f12:	f383 8811 	msr	BASEPRI, r3
 8004f16:	f3bf 8f6f 	isb	sy
 8004f1a:	f3bf 8f4f 	dsb	sy
 8004f1e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004f20:	bf00      	nop
 8004f22:	bf00      	nop
 8004f24:	e7fd      	b.n	8004f22 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8004f26:	2320      	movs	r3, #32
 8004f28:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	2b20      	cmp	r3, #32
 8004f2e:	d00b      	beq.n	8004f48 <xEventGroupCreateStatic+0x48>
	__asm volatile
 8004f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f34:	f383 8811 	msr	BASEPRI, r3
 8004f38:	f3bf 8f6f 	isb	sy
 8004f3c:	f3bf 8f4f 	dsb	sy
 8004f40:	60fb      	str	r3, [r7, #12]
}
 8004f42:	bf00      	nop
 8004f44:	bf00      	nop
 8004f46:	e7fd      	b.n	8004f44 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00a      	beq.n	8004f68 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	3304      	adds	r3, #4
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f000 fa43 	bl	80053e8 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	2201      	movs	r2, #1
 8004f66:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8004f68:	697b      	ldr	r3, [r7, #20]
	}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3718      	adds	r7, #24
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b082      	sub	sp, #8
 8004f76:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8004f78:	2020      	movs	r0, #32
 8004f7a:	f003 fa37 	bl	80083ec <pvPortMalloc>
 8004f7e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00a      	beq.n	8004f9c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	3304      	adds	r3, #4
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 fa29 	bl	80053e8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8004f9c:	687b      	ldr	r3, [r7, #4]
	}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
	...

08004fa8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b090      	sub	sp, #64	@ 0x40
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
 8004fb4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10b      	bne.n	8004fe0 <xEventGroupWaitBits+0x38>
	__asm volatile
 8004fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fcc:	f383 8811 	msr	BASEPRI, r3
 8004fd0:	f3bf 8f6f 	isb	sy
 8004fd4:	f3bf 8f4f 	dsb	sy
 8004fd8:	623b      	str	r3, [r7, #32]
}
 8004fda:	bf00      	nop
 8004fdc:	bf00      	nop
 8004fde:	e7fd      	b.n	8004fdc <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fe6:	d30b      	bcc.n	8005000 <xEventGroupWaitBits+0x58>
	__asm volatile
 8004fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fec:	f383 8811 	msr	BASEPRI, r3
 8004ff0:	f3bf 8f6f 	isb	sy
 8004ff4:	f3bf 8f4f 	dsb	sy
 8004ff8:	61fb      	str	r3, [r7, #28]
}
 8004ffa:	bf00      	nop
 8004ffc:	bf00      	nop
 8004ffe:	e7fd      	b.n	8004ffc <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10b      	bne.n	800501e <xEventGroupWaitBits+0x76>
	__asm volatile
 8005006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800500a:	f383 8811 	msr	BASEPRI, r3
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	f3bf 8f4f 	dsb	sy
 8005016:	61bb      	str	r3, [r7, #24]
}
 8005018:	bf00      	nop
 800501a:	bf00      	nop
 800501c:	e7fd      	b.n	800501a <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800501e:	f002 fa1f 	bl	8007460 <xTaskGetSchedulerState>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d102      	bne.n	800502e <xEventGroupWaitBits+0x86>
 8005028:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <xEventGroupWaitBits+0x8a>
 800502e:	2301      	movs	r3, #1
 8005030:	e000      	b.n	8005034 <xEventGroupWaitBits+0x8c>
 8005032:	2300      	movs	r3, #0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10b      	bne.n	8005050 <xEventGroupWaitBits+0xa8>
	__asm volatile
 8005038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800503c:	f383 8811 	msr	BASEPRI, r3
 8005040:	f3bf 8f6f 	isb	sy
 8005044:	f3bf 8f4f 	dsb	sy
 8005048:	617b      	str	r3, [r7, #20]
}
 800504a:	bf00      	nop
 800504c:	bf00      	nop
 800504e:	e7fd      	b.n	800504c <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 8005050:	f001 fd54 	bl	8006afc <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8005054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	68b9      	ldr	r1, [r7, #8]
 800505e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005060:	f000 f98c 	bl	800537c <prvTestWaitCondition>
 8005064:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 8005066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00e      	beq.n	800508a <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800506c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800506e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8005070:	2300      	movs	r3, #0
 8005072:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d028      	beq.n	80050cc <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800507a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	43db      	mvns	r3, r3
 8005082:	401a      	ands	r2, r3
 8005084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005086:	601a      	str	r2, [r3, #0]
 8005088:	e020      	b.n	80050cc <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800508a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800508c:	2b00      	cmp	r3, #0
 800508e:	d104      	bne.n	800509a <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8005090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005092:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8005094:	2301      	movs	r3, #1
 8005096:	633b      	str	r3, [r7, #48]	@ 0x30
 8005098:	e018      	b.n	80050cc <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d003      	beq.n	80050a8 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80050a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050a6:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80050ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80050b4:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80050b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050b8:	1d18      	adds	r0, r3, #4
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050be:	4313      	orrs	r3, r2
 80050c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050c2:	4619      	mov	r1, r3
 80050c4:	f001 ff36 	bl	8006f34 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80050c8:	2300      	movs	r3, #0
 80050ca:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80050cc:	f001 fd24 	bl	8006b18 <xTaskResumeAll>
 80050d0:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80050d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d031      	beq.n	800513c <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 80050d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d107      	bne.n	80050ee <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 80050de:	4b1a      	ldr	r3, [pc, #104]	@ (8005148 <xEventGroupWaitBits+0x1a0>)
 80050e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	f3bf 8f4f 	dsb	sy
 80050ea:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80050ee:	f002 fb31 	bl	8007754 <uxTaskResetEventItemValue>
 80050f2:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80050f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d11a      	bne.n	8005134 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 80050fe:	f003 f853 	bl	80081a8 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8005102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	68b9      	ldr	r1, [r7, #8]
 800510c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800510e:	f000 f935 	bl	800537c <prvTestWaitCondition>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d009      	beq.n	800512c <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d006      	beq.n	800512c <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800511e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	43db      	mvns	r3, r3
 8005126:	401a      	ands	r2, r3
 8005128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800512a:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800512c:	2301      	movs	r3, #1
 800512e:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8005130:	f003 f86c 	bl	800820c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005134:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005136:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800513a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800513c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800513e:	4618      	mov	r0, r3
 8005140:	3740      	adds	r7, #64	@ 0x40
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	e000ed04 	.word	0xe000ed04

0800514c <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d10b      	bne.n	8005178 <xEventGroupClearBits+0x2c>
	__asm volatile
 8005160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005164:	f383 8811 	msr	BASEPRI, r3
 8005168:	f3bf 8f6f 	isb	sy
 800516c:	f3bf 8f4f 	dsb	sy
 8005170:	60fb      	str	r3, [r7, #12]
}
 8005172:	bf00      	nop
 8005174:	bf00      	nop
 8005176:	e7fd      	b.n	8005174 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800517e:	d30b      	bcc.n	8005198 <xEventGroupClearBits+0x4c>
	__asm volatile
 8005180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005184:	f383 8811 	msr	BASEPRI, r3
 8005188:	f3bf 8f6f 	isb	sy
 800518c:	f3bf 8f4f 	dsb	sy
 8005190:	60bb      	str	r3, [r7, #8]
}
 8005192:	bf00      	nop
 8005194:	bf00      	nop
 8005196:	e7fd      	b.n	8005194 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8005198:	f003 f806 	bl	80081a8 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	43db      	mvns	r3, r3
 80051aa:	401a      	ands	r2, r3
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80051b0:	f003 f82c 	bl	800820c <vPortExitCritical>

	return uxReturn;
 80051b4:	693b      	ldr	r3, [r7, #16]
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3718      	adds	r7, #24
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
	...

080051c0 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80051ca:	2300      	movs	r3, #0
 80051cc:	683a      	ldr	r2, [r7, #0]
 80051ce:	6879      	ldr	r1, [r7, #4]
 80051d0:	4804      	ldr	r0, [pc, #16]	@ (80051e4 <xEventGroupClearBitsFromISR+0x24>)
 80051d2:	f002 fe99 	bl	8007f08 <xTimerPendFunctionCallFromISR>
 80051d6:	60f8      	str	r0, [r7, #12]

		return xReturn;
 80051d8:	68fb      	ldr	r3, [r7, #12]
	}
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	08005363 	.word	0x08005363

080051e8 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 80051e8:	b480      	push	{r7}
 80051ea:	b089      	sub	sp, #36	@ 0x24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80051f4:	f3ef 8211 	mrs	r2, BASEPRI
 80051f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051fc:	f383 8811 	msr	BASEPRI, r3
 8005200:	f3bf 8f6f 	isb	sy
 8005204:	f3bf 8f4f 	dsb	sy
 8005208:	60fa      	str	r2, [r7, #12]
 800520a:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800520c:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800520e:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	617b      	str	r3, [r7, #20]
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005220:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8005222:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8005224:	4618      	mov	r0, r3
 8005226:	3724      	adds	r7, #36	@ 0x24
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b08e      	sub	sp, #56	@ 0x38
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800523a:	2300      	movs	r3, #0
 800523c:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 8005242:	2300      	movs	r3, #0
 8005244:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d10b      	bne.n	8005264 <xEventGroupSetBits+0x34>
	__asm volatile
 800524c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005250:	f383 8811 	msr	BASEPRI, r3
 8005254:	f3bf 8f6f 	isb	sy
 8005258:	f3bf 8f4f 	dsb	sy
 800525c:	613b      	str	r3, [r7, #16]
}
 800525e:	bf00      	nop
 8005260:	bf00      	nop
 8005262:	e7fd      	b.n	8005260 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800526a:	d30b      	bcc.n	8005284 <xEventGroupSetBits+0x54>
	__asm volatile
 800526c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005270:	f383 8811 	msr	BASEPRI, r3
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	60fb      	str	r3, [r7, #12]
}
 800527e:	bf00      	nop
 8005280:	bf00      	nop
 8005282:	e7fd      	b.n	8005280 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8005284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005286:	3304      	adds	r3, #4
 8005288:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800528a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528c:	3308      	adds	r3, #8
 800528e:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8005290:	f001 fc34 	bl	8006afc <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8005294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800529a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	431a      	orrs	r2, r3
 80052a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a4:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80052a6:	e03c      	b.n	8005322 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 80052a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80052ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80052b4:	2300      	movs	r3, #0
 80052b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80052be:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80052c6:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d108      	bne.n	80052e4 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80052d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	4013      	ands	r3, r2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00b      	beq.n	80052f6 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 80052de:	2301      	movs	r3, #1
 80052e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052e2:	e008      	b.n	80052f6 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80052e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	4013      	ands	r3, r2
 80052ec:	69ba      	ldr	r2, [r7, #24]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d101      	bne.n	80052f6 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80052f2:	2301      	movs	r3, #1
 80052f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80052f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d010      	beq.n	800531e <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8005306:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	4313      	orrs	r3, r2
 800530c:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800530e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005316:	4619      	mov	r1, r3
 8005318:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800531a:	f001 fed9 	bl	80070d0 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8005322:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005324:	6a3b      	ldr	r3, [r7, #32]
 8005326:	429a      	cmp	r2, r3
 8005328:	d1be      	bne.n	80052a8 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800532a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005330:	43db      	mvns	r3, r3
 8005332:	401a      	ands	r2, r3
 8005334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005336:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8005338:	f001 fbee 	bl	8006b18 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800533c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800533e:	681b      	ldr	r3, [r3, #0]
}
 8005340:	4618      	mov	r0, r3
 8005342:	3738      	adds	r7, #56	@ 0x38
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8005352:	6839      	ldr	r1, [r7, #0]
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f7ff ff6b 	bl	8005230 <xEventGroupSetBits>
}
 800535a:	bf00      	nop
 800535c:	3708      	adds	r7, #8
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b082      	sub	sp, #8
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
 800536a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800536c:	6839      	ldr	r1, [r7, #0]
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f7ff feec 	bl	800514c <xEventGroupClearBits>
}
 8005374:	bf00      	nop
 8005376:	3708      	adds	r7, #8
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800537c:	b480      	push	{r7}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8005388:	2300      	movs	r3, #0
 800538a:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d107      	bne.n	80053a2 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	4013      	ands	r3, r2
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00a      	beq.n	80053b2 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800539c:	2301      	movs	r3, #1
 800539e:	617b      	str	r3, [r7, #20]
 80053a0:	e007      	b.n	80053b2 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	4013      	ands	r3, r2
 80053a8:	68ba      	ldr	r2, [r7, #8]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d101      	bne.n	80053b2 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80053ae:	2301      	movs	r3, #1
 80053b0:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80053b2:	697b      	ldr	r3, [r7, #20]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	371c      	adds	r7, #28
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	68f9      	ldr	r1, [r7, #12]
 80053d2:	4804      	ldr	r0, [pc, #16]	@ (80053e4 <xEventGroupSetBitsFromISR+0x24>)
 80053d4:	f002 fd98 	bl	8007f08 <xTimerPendFunctionCallFromISR>
 80053d8:	6178      	str	r0, [r7, #20]

		return xReturn;
 80053da:	697b      	ldr	r3, [r7, #20]
	}
 80053dc:	4618      	mov	r0, r3
 80053de:	3718      	adds	r7, #24
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	08005349 	.word	0x08005349

080053e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f103 0208 	add.w	r2, r3, #8
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005400:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f103 0208 	add.w	r2, r3, #8
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f103 0208 	add.w	r2, r3, #8
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005436:	bf00      	nop
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005442:	b480      	push	{r7}
 8005444:	b085      	sub	sp, #20
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
 800544a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	689a      	ldr	r2, [r3, #8]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	683a      	ldr	r2, [r7, #0]
 8005466:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	683a      	ldr	r2, [r7, #0]
 800546c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	1c5a      	adds	r2, r3, #1
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	601a      	str	r2, [r3, #0]
}
 800547e:	bf00      	nop
 8005480:	3714      	adds	r7, #20
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr

0800548a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800548a:	b480      	push	{r7}
 800548c:	b085      	sub	sp, #20
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
 8005492:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a0:	d103      	bne.n	80054aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	60fb      	str	r3, [r7, #12]
 80054a8:	e00c      	b.n	80054c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	3308      	adds	r3, #8
 80054ae:	60fb      	str	r3, [r7, #12]
 80054b0:	e002      	b.n	80054b8 <vListInsert+0x2e>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	60fb      	str	r3, [r7, #12]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d2f6      	bcs.n	80054b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	683a      	ldr	r2, [r7, #0]
 80054d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	683a      	ldr	r2, [r7, #0]
 80054de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	1c5a      	adds	r2, r3, #1
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	601a      	str	r2, [r3, #0]
}
 80054f0:	bf00      	nop
 80054f2:	3714      	adds	r7, #20
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	6892      	ldr	r2, [r2, #8]
 8005512:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	6852      	ldr	r2, [r2, #4]
 800551c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	429a      	cmp	r2, r3
 8005526:	d103      	bne.n	8005530 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689a      	ldr	r2, [r3, #8]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	1e5a      	subs	r2, r3, #1
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
}
 8005544:	4618      	mov	r0, r3
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10b      	bne.n	800557c <xQueueGenericReset+0x2c>
	__asm volatile
 8005564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005568:	f383 8811 	msr	BASEPRI, r3
 800556c:	f3bf 8f6f 	isb	sy
 8005570:	f3bf 8f4f 	dsb	sy
 8005574:	60bb      	str	r3, [r7, #8]
}
 8005576:	bf00      	nop
 8005578:	bf00      	nop
 800557a:	e7fd      	b.n	8005578 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800557c:	f002 fe14 	bl	80081a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005588:	68f9      	ldr	r1, [r7, #12]
 800558a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800558c:	fb01 f303 	mul.w	r3, r1, r3
 8005590:	441a      	add	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ac:	3b01      	subs	r3, #1
 80055ae:	68f9      	ldr	r1, [r7, #12]
 80055b0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80055b2:	fb01 f303 	mul.w	r3, r1, r3
 80055b6:	441a      	add	r2, r3
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	22ff      	movs	r2, #255	@ 0xff
 80055c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	22ff      	movs	r2, #255	@ 0xff
 80055c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d114      	bne.n	80055fc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d01a      	beq.n	8005610 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	3310      	adds	r3, #16
 80055de:	4618      	mov	r0, r3
 80055e0:	f001 fd12 	bl	8007008 <xTaskRemoveFromEventList>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d012      	beq.n	8005610 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80055ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005620 <xQueueGenericReset+0xd0>)
 80055ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055f0:	601a      	str	r2, [r3, #0]
 80055f2:	f3bf 8f4f 	dsb	sy
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	e009      	b.n	8005610 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	3310      	adds	r3, #16
 8005600:	4618      	mov	r0, r3
 8005602:	f7ff fef1 	bl	80053e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	3324      	adds	r3, #36	@ 0x24
 800560a:	4618      	mov	r0, r3
 800560c:	f7ff feec 	bl	80053e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005610:	f002 fdfc 	bl	800820c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005614:	2301      	movs	r3, #1
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	e000ed04 	.word	0xe000ed04

08005624 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005624:	b580      	push	{r7, lr}
 8005626:	b08e      	sub	sp, #56	@ 0x38
 8005628:	af02      	add	r7, sp, #8
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
 8005630:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10b      	bne.n	8005650 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800563c:	f383 8811 	msr	BASEPRI, r3
 8005640:	f3bf 8f6f 	isb	sy
 8005644:	f3bf 8f4f 	dsb	sy
 8005648:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800564a:	bf00      	nop
 800564c:	bf00      	nop
 800564e:	e7fd      	b.n	800564c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10b      	bne.n	800566e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800565a:	f383 8811 	msr	BASEPRI, r3
 800565e:	f3bf 8f6f 	isb	sy
 8005662:	f3bf 8f4f 	dsb	sy
 8005666:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005668:	bf00      	nop
 800566a:	bf00      	nop
 800566c:	e7fd      	b.n	800566a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d002      	beq.n	800567a <xQueueGenericCreateStatic+0x56>
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d001      	beq.n	800567e <xQueueGenericCreateStatic+0x5a>
 800567a:	2301      	movs	r3, #1
 800567c:	e000      	b.n	8005680 <xQueueGenericCreateStatic+0x5c>
 800567e:	2300      	movs	r3, #0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10b      	bne.n	800569c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	623b      	str	r3, [r7, #32]
}
 8005696:	bf00      	nop
 8005698:	bf00      	nop
 800569a:	e7fd      	b.n	8005698 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d102      	bne.n	80056a8 <xQueueGenericCreateStatic+0x84>
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d101      	bne.n	80056ac <xQueueGenericCreateStatic+0x88>
 80056a8:	2301      	movs	r3, #1
 80056aa:	e000      	b.n	80056ae <xQueueGenericCreateStatic+0x8a>
 80056ac:	2300      	movs	r3, #0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10b      	bne.n	80056ca <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80056b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b6:	f383 8811 	msr	BASEPRI, r3
 80056ba:	f3bf 8f6f 	isb	sy
 80056be:	f3bf 8f4f 	dsb	sy
 80056c2:	61fb      	str	r3, [r7, #28]
}
 80056c4:	bf00      	nop
 80056c6:	bf00      	nop
 80056c8:	e7fd      	b.n	80056c6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80056ca:	2350      	movs	r3, #80	@ 0x50
 80056cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	2b50      	cmp	r3, #80	@ 0x50
 80056d2:	d00b      	beq.n	80056ec <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80056d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d8:	f383 8811 	msr	BASEPRI, r3
 80056dc:	f3bf 8f6f 	isb	sy
 80056e0:	f3bf 8f4f 	dsb	sy
 80056e4:	61bb      	str	r3, [r7, #24]
}
 80056e6:	bf00      	nop
 80056e8:	bf00      	nop
 80056ea:	e7fd      	b.n	80056e8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80056ec:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80056f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00d      	beq.n	8005714 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80056f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005700:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005706:	9300      	str	r3, [sp, #0]
 8005708:	4613      	mov	r3, r2
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	68b9      	ldr	r1, [r7, #8]
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f000 f840 	bl	8005794 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005716:	4618      	mov	r0, r3
 8005718:	3730      	adds	r7, #48	@ 0x30
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800571e:	b580      	push	{r7, lr}
 8005720:	b08a      	sub	sp, #40	@ 0x28
 8005722:	af02      	add	r7, sp, #8
 8005724:	60f8      	str	r0, [r7, #12]
 8005726:	60b9      	str	r1, [r7, #8]
 8005728:	4613      	mov	r3, r2
 800572a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10b      	bne.n	800574a <xQueueGenericCreate+0x2c>
	__asm volatile
 8005732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005736:	f383 8811 	msr	BASEPRI, r3
 800573a:	f3bf 8f6f 	isb	sy
 800573e:	f3bf 8f4f 	dsb	sy
 8005742:	613b      	str	r3, [r7, #16]
}
 8005744:	bf00      	nop
 8005746:	bf00      	nop
 8005748:	e7fd      	b.n	8005746 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	fb02 f303 	mul.w	r3, r2, r3
 8005752:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	3350      	adds	r3, #80	@ 0x50
 8005758:	4618      	mov	r0, r3
 800575a:	f002 fe47 	bl	80083ec <pvPortMalloc>
 800575e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d011      	beq.n	800578a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	3350      	adds	r3, #80	@ 0x50
 800576e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005778:	79fa      	ldrb	r2, [r7, #7]
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	9300      	str	r3, [sp, #0]
 800577e:	4613      	mov	r3, r2
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	68b9      	ldr	r1, [r7, #8]
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f000 f805 	bl	8005794 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800578a:	69bb      	ldr	r3, [r7, #24]
	}
 800578c:	4618      	mov	r0, r3
 800578e:	3720      	adds	r7, #32
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
 80057a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d103      	bne.n	80057b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	601a      	str	r2, [r3, #0]
 80057ae:	e002      	b.n	80057b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80057c2:	2101      	movs	r1, #1
 80057c4:	69b8      	ldr	r0, [r7, #24]
 80057c6:	f7ff fec3 	bl	8005550 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	78fa      	ldrb	r2, [r7, #3]
 80057ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80057d2:	bf00      	nop
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b08a      	sub	sp, #40	@ 0x28
 80057de:	af02      	add	r7, sp, #8
 80057e0:	60f8      	str	r0, [r7, #12]
 80057e2:	60b9      	str	r1, [r7, #8]
 80057e4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10b      	bne.n	8005804 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80057ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f0:	f383 8811 	msr	BASEPRI, r3
 80057f4:	f3bf 8f6f 	isb	sy
 80057f8:	f3bf 8f4f 	dsb	sy
 80057fc:	61bb      	str	r3, [r7, #24]
}
 80057fe:	bf00      	nop
 8005800:	bf00      	nop
 8005802:	e7fd      	b.n	8005800 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	429a      	cmp	r2, r3
 800580a:	d90b      	bls.n	8005824 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800580c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005810:	f383 8811 	msr	BASEPRI, r3
 8005814:	f3bf 8f6f 	isb	sy
 8005818:	f3bf 8f4f 	dsb	sy
 800581c:	617b      	str	r3, [r7, #20]
}
 800581e:	bf00      	nop
 8005820:	bf00      	nop
 8005822:	e7fd      	b.n	8005820 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005824:	2302      	movs	r3, #2
 8005826:	9300      	str	r3, [sp, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	2100      	movs	r1, #0
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f7ff fef8 	bl	8005624 <xQueueGenericCreateStatic>
 8005834:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d002      	beq.n	8005842 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005842:	69fb      	ldr	r3, [r7, #28]
	}
 8005844:	4618      	mov	r0, r3
 8005846:	3720      	adds	r7, #32
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800584c:	b580      	push	{r7, lr}
 800584e:	b086      	sub	sp, #24
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d10b      	bne.n	8005874 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800585c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005860:	f383 8811 	msr	BASEPRI, r3
 8005864:	f3bf 8f6f 	isb	sy
 8005868:	f3bf 8f4f 	dsb	sy
 800586c:	613b      	str	r3, [r7, #16]
}
 800586e:	bf00      	nop
 8005870:	bf00      	nop
 8005872:	e7fd      	b.n	8005870 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	429a      	cmp	r2, r3
 800587a:	d90b      	bls.n	8005894 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800587c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005880:	f383 8811 	msr	BASEPRI, r3
 8005884:	f3bf 8f6f 	isb	sy
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	60fb      	str	r3, [r7, #12]
}
 800588e:	bf00      	nop
 8005890:	bf00      	nop
 8005892:	e7fd      	b.n	8005890 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005894:	2202      	movs	r2, #2
 8005896:	2100      	movs	r1, #0
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f7ff ff40 	bl	800571e <xQueueGenericCreate>
 800589e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d002      	beq.n	80058ac <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80058ac:	697b      	ldr	r3, [r7, #20]
	}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3718      	adds	r7, #24
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
	...

080058b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b08e      	sub	sp, #56	@ 0x38
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
 80058c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80058c6:	2300      	movs	r3, #0
 80058c8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80058ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d10b      	bne.n	80058ec <xQueueGenericSend+0x34>
	__asm volatile
 80058d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d8:	f383 8811 	msr	BASEPRI, r3
 80058dc:	f3bf 8f6f 	isb	sy
 80058e0:	f3bf 8f4f 	dsb	sy
 80058e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80058e6:	bf00      	nop
 80058e8:	bf00      	nop
 80058ea:	e7fd      	b.n	80058e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d103      	bne.n	80058fa <xQueueGenericSend+0x42>
 80058f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <xQueueGenericSend+0x46>
 80058fa:	2301      	movs	r3, #1
 80058fc:	e000      	b.n	8005900 <xQueueGenericSend+0x48>
 80058fe:	2300      	movs	r3, #0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10b      	bne.n	800591c <xQueueGenericSend+0x64>
	__asm volatile
 8005904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005908:	f383 8811 	msr	BASEPRI, r3
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005916:	bf00      	nop
 8005918:	bf00      	nop
 800591a:	e7fd      	b.n	8005918 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	2b02      	cmp	r3, #2
 8005920:	d103      	bne.n	800592a <xQueueGenericSend+0x72>
 8005922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005926:	2b01      	cmp	r3, #1
 8005928:	d101      	bne.n	800592e <xQueueGenericSend+0x76>
 800592a:	2301      	movs	r3, #1
 800592c:	e000      	b.n	8005930 <xQueueGenericSend+0x78>
 800592e:	2300      	movs	r3, #0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d10b      	bne.n	800594c <xQueueGenericSend+0x94>
	__asm volatile
 8005934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005938:	f383 8811 	msr	BASEPRI, r3
 800593c:	f3bf 8f6f 	isb	sy
 8005940:	f3bf 8f4f 	dsb	sy
 8005944:	623b      	str	r3, [r7, #32]
}
 8005946:	bf00      	nop
 8005948:	bf00      	nop
 800594a:	e7fd      	b.n	8005948 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800594c:	f001 fd88 	bl	8007460 <xTaskGetSchedulerState>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d102      	bne.n	800595c <xQueueGenericSend+0xa4>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d101      	bne.n	8005960 <xQueueGenericSend+0xa8>
 800595c:	2301      	movs	r3, #1
 800595e:	e000      	b.n	8005962 <xQueueGenericSend+0xaa>
 8005960:	2300      	movs	r3, #0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10b      	bne.n	800597e <xQueueGenericSend+0xc6>
	__asm volatile
 8005966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800596a:	f383 8811 	msr	BASEPRI, r3
 800596e:	f3bf 8f6f 	isb	sy
 8005972:	f3bf 8f4f 	dsb	sy
 8005976:	61fb      	str	r3, [r7, #28]
}
 8005978:	bf00      	nop
 800597a:	bf00      	nop
 800597c:	e7fd      	b.n	800597a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800597e:	f002 fc13 	bl	80081a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005984:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800598a:	429a      	cmp	r2, r3
 800598c:	d302      	bcc.n	8005994 <xQueueGenericSend+0xdc>
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	2b02      	cmp	r3, #2
 8005992:	d129      	bne.n	80059e8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005994:	683a      	ldr	r2, [r7, #0]
 8005996:	68b9      	ldr	r1, [r7, #8]
 8005998:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800599a:	f000 fcab 	bl	80062f4 <prvCopyDataToQueue>
 800599e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d010      	beq.n	80059ca <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059aa:	3324      	adds	r3, #36	@ 0x24
 80059ac:	4618      	mov	r0, r3
 80059ae:	f001 fb2b 	bl	8007008 <xTaskRemoveFromEventList>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d013      	beq.n	80059e0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80059b8:	4b3f      	ldr	r3, [pc, #252]	@ (8005ab8 <xQueueGenericSend+0x200>)
 80059ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059be:	601a      	str	r2, [r3, #0]
 80059c0:	f3bf 8f4f 	dsb	sy
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	e00a      	b.n	80059e0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80059ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d007      	beq.n	80059e0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80059d0:	4b39      	ldr	r3, [pc, #228]	@ (8005ab8 <xQueueGenericSend+0x200>)
 80059d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059d6:	601a      	str	r2, [r3, #0]
 80059d8:	f3bf 8f4f 	dsb	sy
 80059dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80059e0:	f002 fc14 	bl	800820c <vPortExitCritical>
				return pdPASS;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e063      	b.n	8005ab0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d103      	bne.n	80059f6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80059ee:	f002 fc0d 	bl	800820c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80059f2:	2300      	movs	r3, #0
 80059f4:	e05c      	b.n	8005ab0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d106      	bne.n	8005a0a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059fc:	f107 0314 	add.w	r3, r7, #20
 8005a00:	4618      	mov	r0, r3
 8005a02:	f001 fbc9 	bl	8007198 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a06:	2301      	movs	r3, #1
 8005a08:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a0a:	f002 fbff 	bl	800820c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a0e:	f001 f875 	bl	8006afc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a12:	f002 fbc9 	bl	80081a8 <vPortEnterCritical>
 8005a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a1c:	b25b      	sxtb	r3, r3
 8005a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a22:	d103      	bne.n	8005a2c <xQueueGenericSend+0x174>
 8005a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a32:	b25b      	sxtb	r3, r3
 8005a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a38:	d103      	bne.n	8005a42 <xQueueGenericSend+0x18a>
 8005a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a42:	f002 fbe3 	bl	800820c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a46:	1d3a      	adds	r2, r7, #4
 8005a48:	f107 0314 	add.w	r3, r7, #20
 8005a4c:	4611      	mov	r1, r2
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f001 fbb8 	bl	80071c4 <xTaskCheckForTimeOut>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d124      	bne.n	8005aa4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005a5a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a5c:	f000 fd42 	bl	80064e4 <prvIsQueueFull>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d018      	beq.n	8005a98 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a68:	3310      	adds	r3, #16
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	4611      	mov	r1, r2
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f001 fa3a 	bl	8006ee8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005a74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a76:	f000 fccd 	bl	8006414 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005a7a:	f001 f84d 	bl	8006b18 <xTaskResumeAll>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f47f af7c 	bne.w	800597e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005a86:	4b0c      	ldr	r3, [pc, #48]	@ (8005ab8 <xQueueGenericSend+0x200>)
 8005a88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	f3bf 8f6f 	isb	sy
 8005a96:	e772      	b.n	800597e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005a98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a9a:	f000 fcbb 	bl	8006414 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a9e:	f001 f83b 	bl	8006b18 <xTaskResumeAll>
 8005aa2:	e76c      	b.n	800597e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005aa4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005aa6:	f000 fcb5 	bl	8006414 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005aaa:	f001 f835 	bl	8006b18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005aae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3738      	adds	r7, #56	@ 0x38
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	e000ed04 	.word	0xe000ed04

08005abc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b090      	sub	sp, #64	@ 0x40
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
 8005ac8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d10b      	bne.n	8005aec <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad8:	f383 8811 	msr	BASEPRI, r3
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005ae6:	bf00      	nop
 8005ae8:	bf00      	nop
 8005aea:	e7fd      	b.n	8005ae8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d103      	bne.n	8005afa <xQueueGenericSendFromISR+0x3e>
 8005af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d101      	bne.n	8005afe <xQueueGenericSendFromISR+0x42>
 8005afa:	2301      	movs	r3, #1
 8005afc:	e000      	b.n	8005b00 <xQueueGenericSendFromISR+0x44>
 8005afe:	2300      	movs	r3, #0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10b      	bne.n	8005b1c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b08:	f383 8811 	msr	BASEPRI, r3
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f3bf 8f4f 	dsb	sy
 8005b14:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005b16:	bf00      	nop
 8005b18:	bf00      	nop
 8005b1a:	e7fd      	b.n	8005b18 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d103      	bne.n	8005b2a <xQueueGenericSendFromISR+0x6e>
 8005b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d101      	bne.n	8005b2e <xQueueGenericSendFromISR+0x72>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e000      	b.n	8005b30 <xQueueGenericSendFromISR+0x74>
 8005b2e:	2300      	movs	r3, #0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10b      	bne.n	8005b4c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b38:	f383 8811 	msr	BASEPRI, r3
 8005b3c:	f3bf 8f6f 	isb	sy
 8005b40:	f3bf 8f4f 	dsb	sy
 8005b44:	623b      	str	r3, [r7, #32]
}
 8005b46:	bf00      	nop
 8005b48:	bf00      	nop
 8005b4a:	e7fd      	b.n	8005b48 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b4c:	f002 fc0c 	bl	8008368 <vPortValidateInterruptPriority>
	__asm volatile
 8005b50:	f3ef 8211 	mrs	r2, BASEPRI
 8005b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b58:	f383 8811 	msr	BASEPRI, r3
 8005b5c:	f3bf 8f6f 	isb	sy
 8005b60:	f3bf 8f4f 	dsb	sy
 8005b64:	61fa      	str	r2, [r7, #28]
 8005b66:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8005b68:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b6a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d302      	bcc.n	8005b7e <xQueueGenericSendFromISR+0xc2>
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d12f      	bne.n	8005bde <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b84:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	68b9      	ldr	r1, [r7, #8]
 8005b92:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005b94:	f000 fbae 	bl	80062f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005b98:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba0:	d112      	bne.n	8005bc8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d016      	beq.n	8005bd8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bac:	3324      	adds	r3, #36	@ 0x24
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f001 fa2a 	bl	8007008 <xTaskRemoveFromEventList>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00e      	beq.n	8005bd8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00b      	beq.n	8005bd8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	601a      	str	r2, [r3, #0]
 8005bc6:	e007      	b.n	8005bd8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005bc8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005bcc:	3301      	adds	r3, #1
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	b25a      	sxtb	r2, r3
 8005bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005bdc:	e001      	b.n	8005be2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005bde:	2300      	movs	r3, #0
 8005be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005be2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005be4:	617b      	str	r3, [r7, #20]
	__asm volatile
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f383 8811 	msr	BASEPRI, r3
}
 8005bec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005bee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3740      	adds	r7, #64	@ 0x40
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b08e      	sub	sp, #56	@ 0x38
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10b      	bne.n	8005c24 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8005c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c10:	f383 8811 	msr	BASEPRI, r3
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	623b      	str	r3, [r7, #32]
}
 8005c1e:	bf00      	nop
 8005c20:	bf00      	nop
 8005c22:	e7fd      	b.n	8005c20 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00b      	beq.n	8005c44 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8005c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c30:	f383 8811 	msr	BASEPRI, r3
 8005c34:	f3bf 8f6f 	isb	sy
 8005c38:	f3bf 8f4f 	dsb	sy
 8005c3c:	61fb      	str	r3, [r7, #28]
}
 8005c3e:	bf00      	nop
 8005c40:	bf00      	nop
 8005c42:	e7fd      	b.n	8005c40 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d103      	bne.n	8005c54 <xQueueGiveFromISR+0x5c>
 8005c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d101      	bne.n	8005c58 <xQueueGiveFromISR+0x60>
 8005c54:	2301      	movs	r3, #1
 8005c56:	e000      	b.n	8005c5a <xQueueGiveFromISR+0x62>
 8005c58:	2300      	movs	r3, #0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10b      	bne.n	8005c76 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8005c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c62:	f383 8811 	msr	BASEPRI, r3
 8005c66:	f3bf 8f6f 	isb	sy
 8005c6a:	f3bf 8f4f 	dsb	sy
 8005c6e:	61bb      	str	r3, [r7, #24]
}
 8005c70:	bf00      	nop
 8005c72:	bf00      	nop
 8005c74:	e7fd      	b.n	8005c72 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c76:	f002 fb77 	bl	8008368 <vPortValidateInterruptPriority>
	__asm volatile
 8005c7a:	f3ef 8211 	mrs	r2, BASEPRI
 8005c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	617a      	str	r2, [r7, #20]
 8005c90:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005c92:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c9a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ca0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d22b      	bcs.n	8005cfe <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005cac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cb2:	1c5a      	adds	r2, r3, #1
 8005cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005cb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc0:	d112      	bne.n	8005ce8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d016      	beq.n	8005cf8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ccc:	3324      	adds	r3, #36	@ 0x24
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f001 f99a 	bl	8007008 <xTaskRemoveFromEventList>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00e      	beq.n	8005cf8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00b      	beq.n	8005cf8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	601a      	str	r2, [r3, #0]
 8005ce6:	e007      	b.n	8005cf8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005cec:	3301      	adds	r3, #1
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	b25a      	sxtb	r2, r3
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cfc:	e001      	b.n	8005d02 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d04:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f383 8811 	msr	BASEPRI, r3
}
 8005d0c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3738      	adds	r7, #56	@ 0x38
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b08c      	sub	sp, #48	@ 0x30
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005d24:	2300      	movs	r3, #0
 8005d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10b      	bne.n	8005d4a <xQueueReceive+0x32>
	__asm volatile
 8005d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d36:	f383 8811 	msr	BASEPRI, r3
 8005d3a:	f3bf 8f6f 	isb	sy
 8005d3e:	f3bf 8f4f 	dsb	sy
 8005d42:	623b      	str	r3, [r7, #32]
}
 8005d44:	bf00      	nop
 8005d46:	bf00      	nop
 8005d48:	e7fd      	b.n	8005d46 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d103      	bne.n	8005d58 <xQueueReceive+0x40>
 8005d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d101      	bne.n	8005d5c <xQueueReceive+0x44>
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e000      	b.n	8005d5e <xQueueReceive+0x46>
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10b      	bne.n	8005d7a <xQueueReceive+0x62>
	__asm volatile
 8005d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d66:	f383 8811 	msr	BASEPRI, r3
 8005d6a:	f3bf 8f6f 	isb	sy
 8005d6e:	f3bf 8f4f 	dsb	sy
 8005d72:	61fb      	str	r3, [r7, #28]
}
 8005d74:	bf00      	nop
 8005d76:	bf00      	nop
 8005d78:	e7fd      	b.n	8005d76 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d7a:	f001 fb71 	bl	8007460 <xTaskGetSchedulerState>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d102      	bne.n	8005d8a <xQueueReceive+0x72>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d101      	bne.n	8005d8e <xQueueReceive+0x76>
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e000      	b.n	8005d90 <xQueueReceive+0x78>
 8005d8e:	2300      	movs	r3, #0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d10b      	bne.n	8005dac <xQueueReceive+0x94>
	__asm volatile
 8005d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d98:	f383 8811 	msr	BASEPRI, r3
 8005d9c:	f3bf 8f6f 	isb	sy
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	61bb      	str	r3, [r7, #24]
}
 8005da6:	bf00      	nop
 8005da8:	bf00      	nop
 8005daa:	e7fd      	b.n	8005da8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005dac:	f002 f9fc 	bl	80081a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d01f      	beq.n	8005dfc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005dbc:	68b9      	ldr	r1, [r7, #8]
 8005dbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005dc0:	f000 fb02 	bl	80063c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc6:	1e5a      	subs	r2, r3, #1
 8005dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dca:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00f      	beq.n	8005df4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dd6:	3310      	adds	r3, #16
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f001 f915 	bl	8007008 <xTaskRemoveFromEventList>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d007      	beq.n	8005df4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005de4:	4b3c      	ldr	r3, [pc, #240]	@ (8005ed8 <xQueueReceive+0x1c0>)
 8005de6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dea:	601a      	str	r2, [r3, #0]
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005df4:	f002 fa0a 	bl	800820c <vPortExitCritical>
				return pdPASS;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e069      	b.n	8005ed0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d103      	bne.n	8005e0a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e02:	f002 fa03 	bl	800820c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005e06:	2300      	movs	r3, #0
 8005e08:	e062      	b.n	8005ed0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d106      	bne.n	8005e1e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e10:	f107 0310 	add.w	r3, r7, #16
 8005e14:	4618      	mov	r0, r3
 8005e16:	f001 f9bf 	bl	8007198 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e1e:	f002 f9f5 	bl	800820c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e22:	f000 fe6b 	bl	8006afc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e26:	f002 f9bf 	bl	80081a8 <vPortEnterCritical>
 8005e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e30:	b25b      	sxtb	r3, r3
 8005e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e36:	d103      	bne.n	8005e40 <xQueueReceive+0x128>
 8005e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e46:	b25b      	sxtb	r3, r3
 8005e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4c:	d103      	bne.n	8005e56 <xQueueReceive+0x13e>
 8005e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e56:	f002 f9d9 	bl	800820c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e5a:	1d3a      	adds	r2, r7, #4
 8005e5c:	f107 0310 	add.w	r3, r7, #16
 8005e60:	4611      	mov	r1, r2
 8005e62:	4618      	mov	r0, r3
 8005e64:	f001 f9ae 	bl	80071c4 <xTaskCheckForTimeOut>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d123      	bne.n	8005eb6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e70:	f000 fb22 	bl	80064b8 <prvIsQueueEmpty>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d017      	beq.n	8005eaa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e7c:	3324      	adds	r3, #36	@ 0x24
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	4611      	mov	r1, r2
 8005e82:	4618      	mov	r0, r3
 8005e84:	f001 f830 	bl	8006ee8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e8a:	f000 fac3 	bl	8006414 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e8e:	f000 fe43 	bl	8006b18 <xTaskResumeAll>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d189      	bne.n	8005dac <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005e98:	4b0f      	ldr	r3, [pc, #60]	@ (8005ed8 <xQueueReceive+0x1c0>)
 8005e9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e9e:	601a      	str	r2, [r3, #0]
 8005ea0:	f3bf 8f4f 	dsb	sy
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	e780      	b.n	8005dac <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005eaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005eac:	f000 fab2 	bl	8006414 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005eb0:	f000 fe32 	bl	8006b18 <xTaskResumeAll>
 8005eb4:	e77a      	b.n	8005dac <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005eb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005eb8:	f000 faac 	bl	8006414 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ebc:	f000 fe2c 	bl	8006b18 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ec0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ec2:	f000 faf9 	bl	80064b8 <prvIsQueueEmpty>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f43f af6f 	beq.w	8005dac <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ece:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3730      	adds	r7, #48	@ 0x30
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	e000ed04 	.word	0xe000ed04

08005edc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b08e      	sub	sp, #56	@ 0x38
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10b      	bne.n	8005f10 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005efc:	f383 8811 	msr	BASEPRI, r3
 8005f00:	f3bf 8f6f 	isb	sy
 8005f04:	f3bf 8f4f 	dsb	sy
 8005f08:	623b      	str	r3, [r7, #32]
}
 8005f0a:	bf00      	nop
 8005f0c:	bf00      	nop
 8005f0e:	e7fd      	b.n	8005f0c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d00b      	beq.n	8005f30 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f1c:	f383 8811 	msr	BASEPRI, r3
 8005f20:	f3bf 8f6f 	isb	sy
 8005f24:	f3bf 8f4f 	dsb	sy
 8005f28:	61fb      	str	r3, [r7, #28]
}
 8005f2a:	bf00      	nop
 8005f2c:	bf00      	nop
 8005f2e:	e7fd      	b.n	8005f2c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f30:	f001 fa96 	bl	8007460 <xTaskGetSchedulerState>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d102      	bne.n	8005f40 <xQueueSemaphoreTake+0x64>
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d101      	bne.n	8005f44 <xQueueSemaphoreTake+0x68>
 8005f40:	2301      	movs	r3, #1
 8005f42:	e000      	b.n	8005f46 <xQueueSemaphoreTake+0x6a>
 8005f44:	2300      	movs	r3, #0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d10b      	bne.n	8005f62 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f4e:	f383 8811 	msr	BASEPRI, r3
 8005f52:	f3bf 8f6f 	isb	sy
 8005f56:	f3bf 8f4f 	dsb	sy
 8005f5a:	61bb      	str	r3, [r7, #24]
}
 8005f5c:	bf00      	nop
 8005f5e:	bf00      	nop
 8005f60:	e7fd      	b.n	8005f5e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f62:	f002 f921 	bl	80081a8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f6a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d024      	beq.n	8005fbc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f74:	1e5a      	subs	r2, r3, #1
 8005f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f78:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d104      	bne.n	8005f8c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005f82:	f001 fbff 	bl	8007784 <pvTaskIncrementMutexHeldCount>
 8005f86:	4602      	mov	r2, r0
 8005f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f8a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00f      	beq.n	8005fb4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f96:	3310      	adds	r3, #16
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f001 f835 	bl	8007008 <xTaskRemoveFromEventList>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d007      	beq.n	8005fb4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005fa4:	4b54      	ldr	r3, [pc, #336]	@ (80060f8 <xQueueSemaphoreTake+0x21c>)
 8005fa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005faa:	601a      	str	r2, [r3, #0]
 8005fac:	f3bf 8f4f 	dsb	sy
 8005fb0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005fb4:	f002 f92a 	bl	800820c <vPortExitCritical>
				return pdPASS;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e098      	b.n	80060ee <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d112      	bne.n	8005fe8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d00b      	beq.n	8005fe0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fcc:	f383 8811 	msr	BASEPRI, r3
 8005fd0:	f3bf 8f6f 	isb	sy
 8005fd4:	f3bf 8f4f 	dsb	sy
 8005fd8:	617b      	str	r3, [r7, #20]
}
 8005fda:	bf00      	nop
 8005fdc:	bf00      	nop
 8005fde:	e7fd      	b.n	8005fdc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005fe0:	f002 f914 	bl	800820c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	e082      	b.n	80060ee <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d106      	bne.n	8005ffc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005fee:	f107 030c 	add.w	r3, r7, #12
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f001 f8d0 	bl	8007198 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ffc:	f002 f906 	bl	800820c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006000:	f000 fd7c 	bl	8006afc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006004:	f002 f8d0 	bl	80081a8 <vPortEnterCritical>
 8006008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800600a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800600e:	b25b      	sxtb	r3, r3
 8006010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006014:	d103      	bne.n	800601e <xQueueSemaphoreTake+0x142>
 8006016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006018:	2200      	movs	r2, #0
 800601a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800601e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006020:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006024:	b25b      	sxtb	r3, r3
 8006026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800602a:	d103      	bne.n	8006034 <xQueueSemaphoreTake+0x158>
 800602c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800602e:	2200      	movs	r2, #0
 8006030:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006034:	f002 f8ea 	bl	800820c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006038:	463a      	mov	r2, r7
 800603a:	f107 030c 	add.w	r3, r7, #12
 800603e:	4611      	mov	r1, r2
 8006040:	4618      	mov	r0, r3
 8006042:	f001 f8bf 	bl	80071c4 <xTaskCheckForTimeOut>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d132      	bne.n	80060b2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800604c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800604e:	f000 fa33 	bl	80064b8 <prvIsQueueEmpty>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d026      	beq.n	80060a6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d109      	bne.n	8006074 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006060:	f002 f8a2 	bl	80081a8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	4618      	mov	r0, r3
 800606a:	f001 fa17 	bl	800749c <xTaskPriorityInherit>
 800606e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006070:	f002 f8cc 	bl	800820c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006076:	3324      	adds	r3, #36	@ 0x24
 8006078:	683a      	ldr	r2, [r7, #0]
 800607a:	4611      	mov	r1, r2
 800607c:	4618      	mov	r0, r3
 800607e:	f000 ff33 	bl	8006ee8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006082:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006084:	f000 f9c6 	bl	8006414 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006088:	f000 fd46 	bl	8006b18 <xTaskResumeAll>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	f47f af67 	bne.w	8005f62 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006094:	4b18      	ldr	r3, [pc, #96]	@ (80060f8 <xQueueSemaphoreTake+0x21c>)
 8006096:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800609a:	601a      	str	r2, [r3, #0]
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	f3bf 8f6f 	isb	sy
 80060a4:	e75d      	b.n	8005f62 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80060a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80060a8:	f000 f9b4 	bl	8006414 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060ac:	f000 fd34 	bl	8006b18 <xTaskResumeAll>
 80060b0:	e757      	b.n	8005f62 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80060b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80060b4:	f000 f9ae 	bl	8006414 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060b8:	f000 fd2e 	bl	8006b18 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80060be:	f000 f9fb 	bl	80064b8 <prvIsQueueEmpty>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f43f af4c 	beq.w	8005f62 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80060ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00d      	beq.n	80060ec <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80060d0:	f002 f86a 	bl	80081a8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80060d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80060d6:	f000 f8f5 	bl	80062c4 <prvGetDisinheritPriorityAfterTimeout>
 80060da:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80060dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80060e2:	4618      	mov	r0, r3
 80060e4:	f001 fab2 	bl	800764c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80060e8:	f002 f890 	bl	800820c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80060ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3738      	adds	r7, #56	@ 0x38
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	e000ed04 	.word	0xe000ed04

080060fc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b08e      	sub	sp, #56	@ 0x38
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800610c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800610e:	2b00      	cmp	r3, #0
 8006110:	d10b      	bne.n	800612a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006116:	f383 8811 	msr	BASEPRI, r3
 800611a:	f3bf 8f6f 	isb	sy
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	623b      	str	r3, [r7, #32]
}
 8006124:	bf00      	nop
 8006126:	bf00      	nop
 8006128:	e7fd      	b.n	8006126 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d103      	bne.n	8006138 <xQueueReceiveFromISR+0x3c>
 8006130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006134:	2b00      	cmp	r3, #0
 8006136:	d101      	bne.n	800613c <xQueueReceiveFromISR+0x40>
 8006138:	2301      	movs	r3, #1
 800613a:	e000      	b.n	800613e <xQueueReceiveFromISR+0x42>
 800613c:	2300      	movs	r3, #0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10b      	bne.n	800615a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006146:	f383 8811 	msr	BASEPRI, r3
 800614a:	f3bf 8f6f 	isb	sy
 800614e:	f3bf 8f4f 	dsb	sy
 8006152:	61fb      	str	r3, [r7, #28]
}
 8006154:	bf00      	nop
 8006156:	bf00      	nop
 8006158:	e7fd      	b.n	8006156 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800615a:	f002 f905 	bl	8008368 <vPortValidateInterruptPriority>
	__asm volatile
 800615e:	f3ef 8211 	mrs	r2, BASEPRI
 8006162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	61ba      	str	r2, [r7, #24]
 8006174:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006176:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006178:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800617a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800617e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006182:	2b00      	cmp	r3, #0
 8006184:	d02f      	beq.n	80061e6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006188:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800618c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006190:	68b9      	ldr	r1, [r7, #8]
 8006192:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006194:	f000 f918 	bl	80063c8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800619a:	1e5a      	subs	r2, r3, #1
 800619c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80061a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80061a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a8:	d112      	bne.n	80061d0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d016      	beq.n	80061e0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b4:	3310      	adds	r3, #16
 80061b6:	4618      	mov	r0, r3
 80061b8:	f000 ff26 	bl	8007008 <xTaskRemoveFromEventList>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00e      	beq.n	80061e0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00b      	beq.n	80061e0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	601a      	str	r2, [r3, #0]
 80061ce:	e007      	b.n	80061e0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80061d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80061d4:	3301      	adds	r3, #1
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	b25a      	sxtb	r2, r3
 80061da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80061e0:	2301      	movs	r3, #1
 80061e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80061e4:	e001      	b.n	80061ea <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80061e6:	2300      	movs	r3, #0
 80061e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80061ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	f383 8811 	msr	BASEPRI, r3
}
 80061f4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80061f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3738      	adds	r7, #56	@ 0x38
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10b      	bne.n	8006226 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800620e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006212:	f383 8811 	msr	BASEPRI, r3
 8006216:	f3bf 8f6f 	isb	sy
 800621a:	f3bf 8f4f 	dsb	sy
 800621e:	60bb      	str	r3, [r7, #8]
}
 8006220:	bf00      	nop
 8006222:	bf00      	nop
 8006224:	e7fd      	b.n	8006222 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006226:	f001 ffbf 	bl	80081a8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800622e:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006230:	f001 ffec 	bl	800820c <vPortExitCritical>

	return uxReturn;
 8006234:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006236:	4618      	mov	r0, r3
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800623e:	b480      	push	{r7}
 8006240:	b087      	sub	sp, #28
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10b      	bne.n	8006268 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 8006250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006254:	f383 8811 	msr	BASEPRI, r3
 8006258:	f3bf 8f6f 	isb	sy
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	60fb      	str	r3, [r7, #12]
}
 8006262:	bf00      	nop
 8006264:	bf00      	nop
 8006266:	e7fd      	b.n	8006264 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800626c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800626e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006270:	4618      	mov	r0, r3
 8006272:	371c      	adds	r7, #28
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10b      	bne.n	80062a6 <vQueueDelete+0x2a>
	__asm volatile
 800628e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006292:	f383 8811 	msr	BASEPRI, r3
 8006296:	f3bf 8f6f 	isb	sy
 800629a:	f3bf 8f4f 	dsb	sy
 800629e:	60bb      	str	r3, [r7, #8]
}
 80062a0:	bf00      	nop
 80062a2:	bf00      	nop
 80062a4:	e7fd      	b.n	80062a2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f000 f95e 	bl	8006568 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d102      	bne.n	80062bc <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f002 f966 	bl	8008588 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80062bc:	bf00      	nop
 80062be:	3710      	adds	r7, #16
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d006      	beq.n	80062e2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80062de:	60fb      	str	r3, [r7, #12]
 80062e0:	e001      	b.n	80062e6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80062e2:	2300      	movs	r3, #0
 80062e4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80062e6:	68fb      	ldr	r3, [r7, #12]
	}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3714      	adds	r7, #20
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b086      	sub	sp, #24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006300:	2300      	movs	r3, #0
 8006302:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006308:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800630e:	2b00      	cmp	r3, #0
 8006310:	d10d      	bne.n	800632e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d14d      	bne.n	80063b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	4618      	mov	r0, r3
 8006320:	f001 f924 	bl	800756c <xTaskPriorityDisinherit>
 8006324:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	609a      	str	r2, [r3, #8]
 800632c:	e043      	b.n	80063b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d119      	bne.n	8006368 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6858      	ldr	r0, [r3, #4]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800633c:	461a      	mov	r2, r3
 800633e:	68b9      	ldr	r1, [r7, #8]
 8006340:	f002 fb10 	bl	8008964 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	685a      	ldr	r2, [r3, #4]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800634c:	441a      	add	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	685a      	ldr	r2, [r3, #4]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	429a      	cmp	r2, r3
 800635c:	d32b      	bcc.n	80063b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	605a      	str	r2, [r3, #4]
 8006366:	e026      	b.n	80063b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	68d8      	ldr	r0, [r3, #12]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006370:	461a      	mov	r2, r3
 8006372:	68b9      	ldr	r1, [r7, #8]
 8006374:	f002 faf6 	bl	8008964 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	68da      	ldr	r2, [r3, #12]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006380:	425b      	negs	r3, r3
 8006382:	441a      	add	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	68da      	ldr	r2, [r3, #12]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	429a      	cmp	r2, r3
 8006392:	d207      	bcs.n	80063a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	689a      	ldr	r2, [r3, #8]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800639c:	425b      	negs	r3, r3
 800639e:	441a      	add	r2, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d105      	bne.n	80063b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d002      	beq.n	80063b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	3b01      	subs	r3, #1
 80063b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	1c5a      	adds	r2, r3, #1
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80063be:	697b      	ldr	r3, [r7, #20]
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3718      	adds	r7, #24
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d018      	beq.n	800640c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	68da      	ldr	r2, [r3, #12]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e2:	441a      	add	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	68da      	ldr	r2, [r3, #12]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d303      	bcc.n	80063fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	68d9      	ldr	r1, [r3, #12]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006404:	461a      	mov	r2, r3
 8006406:	6838      	ldr	r0, [r7, #0]
 8006408:	f002 faac 	bl	8008964 <memcpy>
	}
}
 800640c:	bf00      	nop
 800640e:	3708      	adds	r7, #8
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800641c:	f001 fec4 	bl	80081a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006426:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006428:	e011      	b.n	800644e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800642e:	2b00      	cmp	r3, #0
 8006430:	d012      	beq.n	8006458 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	3324      	adds	r3, #36	@ 0x24
 8006436:	4618      	mov	r0, r3
 8006438:	f000 fde6 	bl	8007008 <xTaskRemoveFromEventList>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d001      	beq.n	8006446 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006442:	f000 ff23 	bl	800728c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006446:	7bfb      	ldrb	r3, [r7, #15]
 8006448:	3b01      	subs	r3, #1
 800644a:	b2db      	uxtb	r3, r3
 800644c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800644e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006452:	2b00      	cmp	r3, #0
 8006454:	dce9      	bgt.n	800642a <prvUnlockQueue+0x16>
 8006456:	e000      	b.n	800645a <prvUnlockQueue+0x46>
					break;
 8006458:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	22ff      	movs	r2, #255	@ 0xff
 800645e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006462:	f001 fed3 	bl	800820c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006466:	f001 fe9f 	bl	80081a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006470:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006472:	e011      	b.n	8006498 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d012      	beq.n	80064a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	3310      	adds	r3, #16
 8006480:	4618      	mov	r0, r3
 8006482:	f000 fdc1 	bl	8007008 <xTaskRemoveFromEventList>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d001      	beq.n	8006490 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800648c:	f000 fefe 	bl	800728c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006490:	7bbb      	ldrb	r3, [r7, #14]
 8006492:	3b01      	subs	r3, #1
 8006494:	b2db      	uxtb	r3, r3
 8006496:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006498:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800649c:	2b00      	cmp	r3, #0
 800649e:	dce9      	bgt.n	8006474 <prvUnlockQueue+0x60>
 80064a0:	e000      	b.n	80064a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80064a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	22ff      	movs	r2, #255	@ 0xff
 80064a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80064ac:	f001 feae 	bl	800820c <vPortExitCritical>
}
 80064b0:	bf00      	nop
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80064c0:	f001 fe72 	bl	80081a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d102      	bne.n	80064d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80064cc:	2301      	movs	r3, #1
 80064ce:	60fb      	str	r3, [r7, #12]
 80064d0:	e001      	b.n	80064d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80064d2:	2300      	movs	r3, #0
 80064d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064d6:	f001 fe99 	bl	800820c <vPortExitCritical>

	return xReturn;
 80064da:	68fb      	ldr	r3, [r7, #12]
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3710      	adds	r7, #16
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80064ec:	f001 fe5c 	bl	80081a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d102      	bne.n	8006502 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80064fc:	2301      	movs	r3, #1
 80064fe:	60fb      	str	r3, [r7, #12]
 8006500:	e001      	b.n	8006506 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006502:	2300      	movs	r3, #0
 8006504:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006506:	f001 fe81 	bl	800820c <vPortExitCritical>

	return xReturn;
 800650a:	68fb      	ldr	r3, [r7, #12]
}
 800650c:	4618      	mov	r0, r3
 800650e:	3710      	adds	r7, #16
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006514:	b480      	push	{r7}
 8006516:	b085      	sub	sp, #20
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800651e:	2300      	movs	r3, #0
 8006520:	60fb      	str	r3, [r7, #12]
 8006522:	e014      	b.n	800654e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006524:	4a0f      	ldr	r2, [pc, #60]	@ (8006564 <vQueueAddToRegistry+0x50>)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10b      	bne.n	8006548 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006530:	490c      	ldr	r1, [pc, #48]	@ (8006564 <vQueueAddToRegistry+0x50>)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	683a      	ldr	r2, [r7, #0]
 8006536:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800653a:	4a0a      	ldr	r2, [pc, #40]	@ (8006564 <vQueueAddToRegistry+0x50>)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	00db      	lsls	r3, r3, #3
 8006540:	4413      	add	r3, r2
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006546:	e006      	b.n	8006556 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	3301      	adds	r3, #1
 800654c:	60fb      	str	r3, [r7, #12]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2b07      	cmp	r3, #7
 8006552:	d9e7      	bls.n	8006524 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006554:	bf00      	nop
 8006556:	bf00      	nop
 8006558:	3714      	adds	r7, #20
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	20001058 	.word	0x20001058

08006568 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006570:	2300      	movs	r3, #0
 8006572:	60fb      	str	r3, [r7, #12]
 8006574:	e016      	b.n	80065a4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006576:	4a10      	ldr	r2, [pc, #64]	@ (80065b8 <vQueueUnregisterQueue+0x50>)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	00db      	lsls	r3, r3, #3
 800657c:	4413      	add	r3, r2
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	429a      	cmp	r2, r3
 8006584:	d10b      	bne.n	800659e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006586:	4a0c      	ldr	r2, [pc, #48]	@ (80065b8 <vQueueUnregisterQueue+0x50>)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2100      	movs	r1, #0
 800658c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006590:	4a09      	ldr	r2, [pc, #36]	@ (80065b8 <vQueueUnregisterQueue+0x50>)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	00db      	lsls	r3, r3, #3
 8006596:	4413      	add	r3, r2
 8006598:	2200      	movs	r2, #0
 800659a:	605a      	str	r2, [r3, #4]
				break;
 800659c:	e006      	b.n	80065ac <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	3301      	adds	r3, #1
 80065a2:	60fb      	str	r3, [r7, #12]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2b07      	cmp	r3, #7
 80065a8:	d9e5      	bls.n	8006576 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80065aa:	bf00      	nop
 80065ac:	bf00      	nop
 80065ae:	3714      	adds	r7, #20
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr
 80065b8:	20001058 	.word	0x20001058

080065bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80065cc:	f001 fdec 	bl	80081a8 <vPortEnterCritical>
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80065d6:	b25b      	sxtb	r3, r3
 80065d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065dc:	d103      	bne.n	80065e6 <vQueueWaitForMessageRestricted+0x2a>
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065ec:	b25b      	sxtb	r3, r3
 80065ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f2:	d103      	bne.n	80065fc <vQueueWaitForMessageRestricted+0x40>
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80065fc:	f001 fe06 	bl	800820c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006604:	2b00      	cmp	r3, #0
 8006606:	d106      	bne.n	8006616 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	3324      	adds	r3, #36	@ 0x24
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	68b9      	ldr	r1, [r7, #8]
 8006610:	4618      	mov	r0, r3
 8006612:	f000 fccd 	bl	8006fb0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006616:	6978      	ldr	r0, [r7, #20]
 8006618:	f7ff fefc 	bl	8006414 <prvUnlockQueue>
	}
 800661c:	bf00      	nop
 800661e:	3718      	adds	r7, #24
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006624:	b580      	push	{r7, lr}
 8006626:	b08e      	sub	sp, #56	@ 0x38
 8006628:	af04      	add	r7, sp, #16
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]
 8006630:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006634:	2b00      	cmp	r3, #0
 8006636:	d10b      	bne.n	8006650 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800663c:	f383 8811 	msr	BASEPRI, r3
 8006640:	f3bf 8f6f 	isb	sy
 8006644:	f3bf 8f4f 	dsb	sy
 8006648:	623b      	str	r3, [r7, #32]
}
 800664a:	bf00      	nop
 800664c:	bf00      	nop
 800664e:	e7fd      	b.n	800664c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10b      	bne.n	800666e <xTaskCreateStatic+0x4a>
	__asm volatile
 8006656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800665a:	f383 8811 	msr	BASEPRI, r3
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	f3bf 8f4f 	dsb	sy
 8006666:	61fb      	str	r3, [r7, #28]
}
 8006668:	bf00      	nop
 800666a:	bf00      	nop
 800666c:	e7fd      	b.n	800666a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800666e:	23c0      	movs	r3, #192	@ 0xc0
 8006670:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	2bc0      	cmp	r3, #192	@ 0xc0
 8006676:	d00b      	beq.n	8006690 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800667c:	f383 8811 	msr	BASEPRI, r3
 8006680:	f3bf 8f6f 	isb	sy
 8006684:	f3bf 8f4f 	dsb	sy
 8006688:	61bb      	str	r3, [r7, #24]
}
 800668a:	bf00      	nop
 800668c:	bf00      	nop
 800668e:	e7fd      	b.n	800668c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006690:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006694:	2b00      	cmp	r3, #0
 8006696:	d01e      	beq.n	80066d6 <xTaskCreateStatic+0xb2>
 8006698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800669a:	2b00      	cmp	r3, #0
 800669c:	d01b      	beq.n	80066d6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800669e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80066a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80066a6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80066a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066aa:	2202      	movs	r2, #2
 80066ac:	f883 20bd 	strb.w	r2, [r3, #189]	@ 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80066b0:	2300      	movs	r3, #0
 80066b2:	9303      	str	r3, [sp, #12]
 80066b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b6:	9302      	str	r3, [sp, #8]
 80066b8:	f107 0314 	add.w	r3, r7, #20
 80066bc:	9301      	str	r3, [sp, #4]
 80066be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c0:	9300      	str	r3, [sp, #0]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	68b9      	ldr	r1, [r7, #8]
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f000 f851 	bl	8006770 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80066d0:	f000 f8fc 	bl	80068cc <prvAddNewTaskToReadyList>
 80066d4:	e001      	b.n	80066da <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80066d6:	2300      	movs	r3, #0
 80066d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80066da:	697b      	ldr	r3, [r7, #20]
	}
 80066dc:	4618      	mov	r0, r3
 80066de:	3728      	adds	r7, #40	@ 0x28
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b08c      	sub	sp, #48	@ 0x30
 80066e8:	af04      	add	r7, sp, #16
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	603b      	str	r3, [r7, #0]
 80066f0:	4613      	mov	r3, r2
 80066f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80066f4:	88fb      	ldrh	r3, [r7, #6]
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4618      	mov	r0, r3
 80066fa:	f001 fe77 	bl	80083ec <pvPortMalloc>
 80066fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00e      	beq.n	8006724 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006706:	20c0      	movs	r0, #192	@ 0xc0
 8006708:	f001 fe70 	bl	80083ec <pvPortMalloc>
 800670c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d003      	beq.n	800671c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	697a      	ldr	r2, [r7, #20]
 8006718:	631a      	str	r2, [r3, #48]	@ 0x30
 800671a:	e005      	b.n	8006728 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800671c:	6978      	ldr	r0, [r7, #20]
 800671e:	f001 ff33 	bl	8008588 <vPortFree>
 8006722:	e001      	b.n	8006728 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006724:	2300      	movs	r3, #0
 8006726:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d017      	beq.n	800675e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 20bd 	strb.w	r2, [r3, #189]	@ 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006736:	88fa      	ldrh	r2, [r7, #6]
 8006738:	2300      	movs	r3, #0
 800673a:	9303      	str	r3, [sp, #12]
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	9302      	str	r3, [sp, #8]
 8006740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006742:	9301      	str	r3, [sp, #4]
 8006744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006746:	9300      	str	r3, [sp, #0]
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	68b9      	ldr	r1, [r7, #8]
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f000 f80f 	bl	8006770 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006752:	69f8      	ldr	r0, [r7, #28]
 8006754:	f000 f8ba 	bl	80068cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006758:	2301      	movs	r3, #1
 800675a:	61bb      	str	r3, [r7, #24]
 800675c:	e002      	b.n	8006764 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800675e:	f04f 33ff 	mov.w	r3, #4294967295
 8006762:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006764:	69bb      	ldr	r3, [r7, #24]
	}
 8006766:	4618      	mov	r0, r3
 8006768:	3720      	adds	r7, #32
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
	...

08006770 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b088      	sub	sp, #32
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
 800677c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800677e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006780:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	461a      	mov	r2, r3
 8006788:	21a5      	movs	r1, #165	@ 0xa5
 800678a:	f002 f859 	bl	8008840 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800678e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006790:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006798:	3b01      	subs	r3, #1
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	4413      	add	r3, r2
 800679e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	f023 0307 	bic.w	r3, r3, #7
 80067a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	f003 0307 	and.w	r3, r3, #7
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00b      	beq.n	80067ca <prvInitialiseNewTask+0x5a>
	__asm volatile
 80067b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b6:	f383 8811 	msr	BASEPRI, r3
 80067ba:	f3bf 8f6f 	isb	sy
 80067be:	f3bf 8f4f 	dsb	sy
 80067c2:	617b      	str	r3, [r7, #20]
}
 80067c4:	bf00      	nop
 80067c6:	bf00      	nop
 80067c8:	e7fd      	b.n	80067c6 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 80067ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067cc:	69ba      	ldr	r2, [r7, #24]
 80067ce:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d01f      	beq.n	8006816 <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067d6:	2300      	movs	r3, #0
 80067d8:	61fb      	str	r3, [r7, #28]
 80067da:	e012      	b.n	8006802 <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067dc:	68ba      	ldr	r2, [r7, #8]
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	4413      	add	r3, r2
 80067e2:	7819      	ldrb	r1, [r3, #0]
 80067e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	4413      	add	r3, r2
 80067ea:	3334      	adds	r3, #52	@ 0x34
 80067ec:	460a      	mov	r2, r1
 80067ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	4413      	add	r3, r2
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d006      	beq.n	800680a <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	3301      	adds	r3, #1
 8006800:	61fb      	str	r3, [r7, #28]
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	2b1f      	cmp	r3, #31
 8006806:	d9e9      	bls.n	80067dc <prvInitialiseNewTask+0x6c>
 8006808:	e000      	b.n	800680c <prvInitialiseNewTask+0x9c>
			{
				break;
 800680a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800680c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800680e:	2200      	movs	r2, #0
 8006810:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8006814:	e003      	b.n	800681e <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006818:	2200      	movs	r2, #0
 800681a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800681e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006820:	2b37      	cmp	r3, #55	@ 0x37
 8006822:	d901      	bls.n	8006828 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006824:	2337      	movs	r3, #55	@ 0x37
 8006826:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800682a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800682c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800682e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006830:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006832:	661a      	str	r2, [r3, #96]	@ 0x60
		pxNewTCB->uxMutexesHeld = 0;
 8006834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006836:	2200      	movs	r2, #0
 8006838:	665a      	str	r2, [r3, #100]	@ 0x64
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800683a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800683c:	3304      	adds	r3, #4
 800683e:	4618      	mov	r0, r3
 8006840:	f7fe fdf2 	bl	8005428 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006846:	3318      	adds	r3, #24
 8006848:	4618      	mov	r0, r3
 800684a:	f7fe fded 	bl	8005428 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800684e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006850:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006852:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006856:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800685a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800685c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800685e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006860:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006862:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8006864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006866:	2200      	movs	r2, #0
 8006868:	669a      	str	r2, [r3, #104]	@ 0x68
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800686a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686c:	2200      	movs	r2, #0
 800686e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006874:	2200      	movs	r2, #0
 8006876:	f883 20bc 	strb.w	r2, [r3, #188]	@ 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800687a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800687c:	336c      	adds	r3, #108	@ 0x6c
 800687e:	224c      	movs	r2, #76	@ 0x4c
 8006880:	2100      	movs	r1, #0
 8006882:	4618      	mov	r0, r3
 8006884:	f001 ffdc 	bl	8008840 <memset>
 8006888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688a:	4a0d      	ldr	r2, [pc, #52]	@ (80068c0 <prvInitialiseNewTask+0x150>)
 800688c:	671a      	str	r2, [r3, #112]	@ 0x70
 800688e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006890:	4a0c      	ldr	r2, [pc, #48]	@ (80068c4 <prvInitialiseNewTask+0x154>)
 8006892:	675a      	str	r2, [r3, #116]	@ 0x74
 8006894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006896:	4a0c      	ldr	r2, [pc, #48]	@ (80068c8 <prvInitialiseNewTask+0x158>)
 8006898:	679a      	str	r2, [r3, #120]	@ 0x78
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800689a:	683a      	ldr	r2, [r7, #0]
 800689c:	68f9      	ldr	r1, [r7, #12]
 800689e:	69b8      	ldr	r0, [r7, #24]
 80068a0:	f001 fb52 	bl	8007f48 <pxPortInitialiseStack>
 80068a4:	4602      	mov	r2, r0
 80068a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80068aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d002      	beq.n	80068b6 <prvInitialiseNewTask+0x146>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80068b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068b6:	bf00      	nop
 80068b8:	3720      	adds	r7, #32
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	20008c24 	.word	0x20008c24
 80068c4:	20008c8c 	.word	0x20008c8c
 80068c8:	20008cf4 	.word	0x20008cf4

080068cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80068d4:	f001 fc68 	bl	80081a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80068d8:	4b2d      	ldr	r3, [pc, #180]	@ (8006990 <prvAddNewTaskToReadyList+0xc4>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	3301      	adds	r3, #1
 80068de:	4a2c      	ldr	r2, [pc, #176]	@ (8006990 <prvAddNewTaskToReadyList+0xc4>)
 80068e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80068e2:	4b2c      	ldr	r3, [pc, #176]	@ (8006994 <prvAddNewTaskToReadyList+0xc8>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d109      	bne.n	80068fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80068ea:	4a2a      	ldr	r2, [pc, #168]	@ (8006994 <prvAddNewTaskToReadyList+0xc8>)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80068f0:	4b27      	ldr	r3, [pc, #156]	@ (8006990 <prvAddNewTaskToReadyList+0xc4>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d110      	bne.n	800691a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80068f8:	f000 fcee 	bl	80072d8 <prvInitialiseTaskLists>
 80068fc:	e00d      	b.n	800691a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80068fe:	4b26      	ldr	r3, [pc, #152]	@ (8006998 <prvAddNewTaskToReadyList+0xcc>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d109      	bne.n	800691a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006906:	4b23      	ldr	r3, [pc, #140]	@ (8006994 <prvAddNewTaskToReadyList+0xc8>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006910:	429a      	cmp	r2, r3
 8006912:	d802      	bhi.n	800691a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006914:	4a1f      	ldr	r2, [pc, #124]	@ (8006994 <prvAddNewTaskToReadyList+0xc8>)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800691a:	4b20      	ldr	r3, [pc, #128]	@ (800699c <prvAddNewTaskToReadyList+0xd0>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	3301      	adds	r3, #1
 8006920:	4a1e      	ldr	r2, [pc, #120]	@ (800699c <prvAddNewTaskToReadyList+0xd0>)
 8006922:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006924:	4b1d      	ldr	r3, [pc, #116]	@ (800699c <prvAddNewTaskToReadyList+0xd0>)
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	659a      	str	r2, [r3, #88]	@ 0x58
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006930:	4b1b      	ldr	r3, [pc, #108]	@ (80069a0 <prvAddNewTaskToReadyList+0xd4>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	429a      	cmp	r2, r3
 8006936:	d903      	bls.n	8006940 <prvAddNewTaskToReadyList+0x74>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800693c:	4a18      	ldr	r2, [pc, #96]	@ (80069a0 <prvAddNewTaskToReadyList+0xd4>)
 800693e:	6013      	str	r3, [r2, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006944:	4613      	mov	r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4413      	add	r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4a15      	ldr	r2, [pc, #84]	@ (80069a4 <prvAddNewTaskToReadyList+0xd8>)
 800694e:	441a      	add	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	3304      	adds	r3, #4
 8006954:	4619      	mov	r1, r3
 8006956:	4610      	mov	r0, r2
 8006958:	f7fe fd73 	bl	8005442 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800695c:	f001 fc56 	bl	800820c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006960:	4b0d      	ldr	r3, [pc, #52]	@ (8006998 <prvAddNewTaskToReadyList+0xcc>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00e      	beq.n	8006986 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006968:	4b0a      	ldr	r3, [pc, #40]	@ (8006994 <prvAddNewTaskToReadyList+0xc8>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006972:	429a      	cmp	r2, r3
 8006974:	d207      	bcs.n	8006986 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006976:	4b0c      	ldr	r3, [pc, #48]	@ (80069a8 <prvAddNewTaskToReadyList+0xdc>)
 8006978:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800697c:	601a      	str	r2, [r3, #0]
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006986:	bf00      	nop
 8006988:	3708      	adds	r7, #8
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	2000156c 	.word	0x2000156c
 8006994:	20001098 	.word	0x20001098
 8006998:	20001578 	.word	0x20001578
 800699c:	20001588 	.word	0x20001588
 80069a0:	20001574 	.word	0x20001574
 80069a4:	2000109c 	.word	0x2000109c
 80069a8:	e000ed04 	.word	0xe000ed04

080069ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80069b4:	2300      	movs	r3, #0
 80069b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d018      	beq.n	80069f0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80069be:	4b14      	ldr	r3, [pc, #80]	@ (8006a10 <vTaskDelay+0x64>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00b      	beq.n	80069de <vTaskDelay+0x32>
	__asm volatile
 80069c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ca:	f383 8811 	msr	BASEPRI, r3
 80069ce:	f3bf 8f6f 	isb	sy
 80069d2:	f3bf 8f4f 	dsb	sy
 80069d6:	60bb      	str	r3, [r7, #8]
}
 80069d8:	bf00      	nop
 80069da:	bf00      	nop
 80069dc:	e7fd      	b.n	80069da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80069de:	f000 f88d 	bl	8006afc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80069e2:	2100      	movs	r1, #0
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 fee1 	bl	80077ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80069ea:	f000 f895 	bl	8006b18 <xTaskResumeAll>
 80069ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d107      	bne.n	8006a06 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80069f6:	4b07      	ldr	r3, [pc, #28]	@ (8006a14 <vTaskDelay+0x68>)
 80069f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069fc:	601a      	str	r2, [r3, #0]
 80069fe:	f3bf 8f4f 	dsb	sy
 8006a02:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a06:	bf00      	nop
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	20001594 	.word	0x20001594
 8006a14:	e000ed04 	.word	0xe000ed04

08006a18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b08a      	sub	sp, #40	@ 0x28
 8006a1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a22:	2300      	movs	r3, #0
 8006a24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a26:	463a      	mov	r2, r7
 8006a28:	1d39      	adds	r1, r7, #4
 8006a2a:	f107 0308 	add.w	r3, r7, #8
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7fe fa32 	bl	8004e98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a34:	6839      	ldr	r1, [r7, #0]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	68ba      	ldr	r2, [r7, #8]
 8006a3a:	9202      	str	r2, [sp, #8]
 8006a3c:	9301      	str	r3, [sp, #4]
 8006a3e:	2300      	movs	r3, #0
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	2300      	movs	r3, #0
 8006a44:	460a      	mov	r2, r1
 8006a46:	4925      	ldr	r1, [pc, #148]	@ (8006adc <vTaskStartScheduler+0xc4>)
 8006a48:	4825      	ldr	r0, [pc, #148]	@ (8006ae0 <vTaskStartScheduler+0xc8>)
 8006a4a:	f7ff fdeb 	bl	8006624 <xTaskCreateStatic>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	4a24      	ldr	r2, [pc, #144]	@ (8006ae4 <vTaskStartScheduler+0xcc>)
 8006a52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006a54:	4b23      	ldr	r3, [pc, #140]	@ (8006ae4 <vTaskStartScheduler+0xcc>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d002      	beq.n	8006a62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	617b      	str	r3, [r7, #20]
 8006a60:	e001      	b.n	8006a66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006a62:	2300      	movs	r3, #0
 8006a64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d102      	bne.n	8006a72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006a6c:	f000 fef2 	bl	8007854 <xTimerCreateTimerTask>
 8006a70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d11d      	bne.n	8006ab4 <vTaskStartScheduler+0x9c>
	__asm volatile
 8006a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a7c:	f383 8811 	msr	BASEPRI, r3
 8006a80:	f3bf 8f6f 	isb	sy
 8006a84:	f3bf 8f4f 	dsb	sy
 8006a88:	613b      	str	r3, [r7, #16]
}
 8006a8a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006a8c:	4b16      	ldr	r3, [pc, #88]	@ (8006ae8 <vTaskStartScheduler+0xd0>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	336c      	adds	r3, #108	@ 0x6c
 8006a92:	4a16      	ldr	r2, [pc, #88]	@ (8006aec <vTaskStartScheduler+0xd4>)
 8006a94:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006a96:	4b16      	ldr	r3, [pc, #88]	@ (8006af0 <vTaskStartScheduler+0xd8>)
 8006a98:	f04f 32ff 	mov.w	r2, #4294967295
 8006a9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006a9e:	4b15      	ldr	r3, [pc, #84]	@ (8006af4 <vTaskStartScheduler+0xdc>)
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006aa4:	4b14      	ldr	r3, [pc, #80]	@ (8006af8 <vTaskStartScheduler+0xe0>)
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8006aaa:	f7fa f9a1 	bl	8000df0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006aae:	f001 fad7 	bl	8008060 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006ab2:	e00f      	b.n	8006ad4 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aba:	d10b      	bne.n	8006ad4 <vTaskStartScheduler+0xbc>
	__asm volatile
 8006abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac0:	f383 8811 	msr	BASEPRI, r3
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	60fb      	str	r3, [r7, #12]
}
 8006ace:	bf00      	nop
 8006ad0:	bf00      	nop
 8006ad2:	e7fd      	b.n	8006ad0 <vTaskStartScheduler+0xb8>
}
 8006ad4:	bf00      	nop
 8006ad6:	3718      	adds	r7, #24
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	08009310 	.word	0x08009310
 8006ae0:	080072a5 	.word	0x080072a5
 8006ae4:	20001590 	.word	0x20001590
 8006ae8:	20001098 	.word	0x20001098
 8006aec:	20000084 	.word	0x20000084
 8006af0:	2000158c 	.word	0x2000158c
 8006af4:	20001578 	.word	0x20001578
 8006af8:	20001570 	.word	0x20001570

08006afc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006afc:	b480      	push	{r7}
 8006afe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006b00:	4b04      	ldr	r3, [pc, #16]	@ (8006b14 <vTaskSuspendAll+0x18>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	3301      	adds	r3, #1
 8006b06:	4a03      	ldr	r2, [pc, #12]	@ (8006b14 <vTaskSuspendAll+0x18>)
 8006b08:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006b0a:	bf00      	nop
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr
 8006b14:	20001594 	.word	0x20001594

08006b18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b22:	2300      	movs	r3, #0
 8006b24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b26:	4b42      	ldr	r3, [pc, #264]	@ (8006c30 <xTaskResumeAll+0x118>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10b      	bne.n	8006b46 <xTaskResumeAll+0x2e>
	__asm volatile
 8006b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b32:	f383 8811 	msr	BASEPRI, r3
 8006b36:	f3bf 8f6f 	isb	sy
 8006b3a:	f3bf 8f4f 	dsb	sy
 8006b3e:	603b      	str	r3, [r7, #0]
}
 8006b40:	bf00      	nop
 8006b42:	bf00      	nop
 8006b44:	e7fd      	b.n	8006b42 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b46:	f001 fb2f 	bl	80081a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b4a:	4b39      	ldr	r3, [pc, #228]	@ (8006c30 <xTaskResumeAll+0x118>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	4a37      	ldr	r2, [pc, #220]	@ (8006c30 <xTaskResumeAll+0x118>)
 8006b52:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b54:	4b36      	ldr	r3, [pc, #216]	@ (8006c30 <xTaskResumeAll+0x118>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d162      	bne.n	8006c22 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b5c:	4b35      	ldr	r3, [pc, #212]	@ (8006c34 <xTaskResumeAll+0x11c>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d05e      	beq.n	8006c22 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b64:	e02f      	b.n	8006bc6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b66:	4b34      	ldr	r3, [pc, #208]	@ (8006c38 <xTaskResumeAll+0x120>)
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	3318      	adds	r3, #24
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7fe fcc2 	bl	80054fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	3304      	adds	r3, #4
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7fe fcbd 	bl	80054fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b86:	4b2d      	ldr	r3, [pc, #180]	@ (8006c3c <xTaskResumeAll+0x124>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d903      	bls.n	8006b96 <xTaskResumeAll+0x7e>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b92:	4a2a      	ldr	r2, [pc, #168]	@ (8006c3c <xTaskResumeAll+0x124>)
 8006b94:	6013      	str	r3, [r2, #0]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	4413      	add	r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	4a27      	ldr	r2, [pc, #156]	@ (8006c40 <xTaskResumeAll+0x128>)
 8006ba4:	441a      	add	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	3304      	adds	r3, #4
 8006baa:	4619      	mov	r1, r3
 8006bac:	4610      	mov	r0, r2
 8006bae:	f7fe fc48 	bl	8005442 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bb6:	4b23      	ldr	r3, [pc, #140]	@ (8006c44 <xTaskResumeAll+0x12c>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d302      	bcc.n	8006bc6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006bc0:	4b21      	ldr	r3, [pc, #132]	@ (8006c48 <xTaskResumeAll+0x130>)
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8006c38 <xTaskResumeAll+0x120>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1cb      	bne.n	8006b66 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d001      	beq.n	8006bd8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006bd4:	f000 fc24 	bl	8007420 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006bd8:	4b1c      	ldr	r3, [pc, #112]	@ (8006c4c <xTaskResumeAll+0x134>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d010      	beq.n	8006c06 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006be4:	f000 f846 	bl	8006c74 <xTaskIncrementTick>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d002      	beq.n	8006bf4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006bee:	4b16      	ldr	r3, [pc, #88]	@ (8006c48 <xTaskResumeAll+0x130>)
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d1f1      	bne.n	8006be4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006c00:	4b12      	ldr	r3, [pc, #72]	@ (8006c4c <xTaskResumeAll+0x134>)
 8006c02:	2200      	movs	r2, #0
 8006c04:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006c06:	4b10      	ldr	r3, [pc, #64]	@ (8006c48 <xTaskResumeAll+0x130>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d009      	beq.n	8006c22 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c12:	4b0f      	ldr	r3, [pc, #60]	@ (8006c50 <xTaskResumeAll+0x138>)
 8006c14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c18:	601a      	str	r2, [r3, #0]
 8006c1a:	f3bf 8f4f 	dsb	sy
 8006c1e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c22:	f001 faf3 	bl	800820c <vPortExitCritical>

	return xAlreadyYielded;
 8006c26:	68bb      	ldr	r3, [r7, #8]
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3710      	adds	r7, #16
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	20001594 	.word	0x20001594
 8006c34:	2000156c 	.word	0x2000156c
 8006c38:	2000152c 	.word	0x2000152c
 8006c3c:	20001574 	.word	0x20001574
 8006c40:	2000109c 	.word	0x2000109c
 8006c44:	20001098 	.word	0x20001098
 8006c48:	20001580 	.word	0x20001580
 8006c4c:	2000157c 	.word	0x2000157c
 8006c50:	e000ed04 	.word	0xe000ed04

08006c54 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006c5a:	4b05      	ldr	r3, [pc, #20]	@ (8006c70 <xTaskGetTickCount+0x1c>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006c60:	687b      	ldr	r3, [r7, #4]
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	370c      	adds	r7, #12
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	20001570 	.word	0x20001570

08006c74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b086      	sub	sp, #24
 8006c78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c7e:	4b4f      	ldr	r3, [pc, #316]	@ (8006dbc <xTaskIncrementTick+0x148>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f040 8090 	bne.w	8006da8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c88:	4b4d      	ldr	r3, [pc, #308]	@ (8006dc0 <xTaskIncrementTick+0x14c>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006c90:	4a4b      	ldr	r2, [pc, #300]	@ (8006dc0 <xTaskIncrementTick+0x14c>)
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d121      	bne.n	8006ce0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006c9c:	4b49      	ldr	r3, [pc, #292]	@ (8006dc4 <xTaskIncrementTick+0x150>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00b      	beq.n	8006cbe <xTaskIncrementTick+0x4a>
	__asm volatile
 8006ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006caa:	f383 8811 	msr	BASEPRI, r3
 8006cae:	f3bf 8f6f 	isb	sy
 8006cb2:	f3bf 8f4f 	dsb	sy
 8006cb6:	603b      	str	r3, [r7, #0]
}
 8006cb8:	bf00      	nop
 8006cba:	bf00      	nop
 8006cbc:	e7fd      	b.n	8006cba <xTaskIncrementTick+0x46>
 8006cbe:	4b41      	ldr	r3, [pc, #260]	@ (8006dc4 <xTaskIncrementTick+0x150>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	60fb      	str	r3, [r7, #12]
 8006cc4:	4b40      	ldr	r3, [pc, #256]	@ (8006dc8 <xTaskIncrementTick+0x154>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a3e      	ldr	r2, [pc, #248]	@ (8006dc4 <xTaskIncrementTick+0x150>)
 8006cca:	6013      	str	r3, [r2, #0]
 8006ccc:	4a3e      	ldr	r2, [pc, #248]	@ (8006dc8 <xTaskIncrementTick+0x154>)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6013      	str	r3, [r2, #0]
 8006cd2:	4b3e      	ldr	r3, [pc, #248]	@ (8006dcc <xTaskIncrementTick+0x158>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	4a3c      	ldr	r2, [pc, #240]	@ (8006dcc <xTaskIncrementTick+0x158>)
 8006cda:	6013      	str	r3, [r2, #0]
 8006cdc:	f000 fba0 	bl	8007420 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ce0:	4b3b      	ldr	r3, [pc, #236]	@ (8006dd0 <xTaskIncrementTick+0x15c>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d349      	bcc.n	8006d7e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cea:	4b36      	ldr	r3, [pc, #216]	@ (8006dc4 <xTaskIncrementTick+0x150>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d104      	bne.n	8006cfe <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cf4:	4b36      	ldr	r3, [pc, #216]	@ (8006dd0 <xTaskIncrementTick+0x15c>)
 8006cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cfa:	601a      	str	r2, [r3, #0]
					break;
 8006cfc:	e03f      	b.n	8006d7e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cfe:	4b31      	ldr	r3, [pc, #196]	@ (8006dc4 <xTaskIncrementTick+0x150>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d0e:	693a      	ldr	r2, [r7, #16]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d203      	bcs.n	8006d1e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d16:	4a2e      	ldr	r2, [pc, #184]	@ (8006dd0 <xTaskIncrementTick+0x15c>)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006d1c:	e02f      	b.n	8006d7e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	3304      	adds	r3, #4
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7fe fbea 	bl	80054fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d004      	beq.n	8006d3a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	3318      	adds	r3, #24
 8006d34:	4618      	mov	r0, r3
 8006d36:	f7fe fbe1 	bl	80054fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d3e:	4b25      	ldr	r3, [pc, #148]	@ (8006dd4 <xTaskIncrementTick+0x160>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d903      	bls.n	8006d4e <xTaskIncrementTick+0xda>
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d4a:	4a22      	ldr	r2, [pc, #136]	@ (8006dd4 <xTaskIncrementTick+0x160>)
 8006d4c:	6013      	str	r3, [r2, #0]
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d52:	4613      	mov	r3, r2
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4413      	add	r3, r2
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	4a1f      	ldr	r2, [pc, #124]	@ (8006dd8 <xTaskIncrementTick+0x164>)
 8006d5c:	441a      	add	r2, r3
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	3304      	adds	r3, #4
 8006d62:	4619      	mov	r1, r3
 8006d64:	4610      	mov	r0, r2
 8006d66:	f7fe fb6c 	bl	8005442 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d6e:	4b1b      	ldr	r3, [pc, #108]	@ (8006ddc <xTaskIncrementTick+0x168>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d3b8      	bcc.n	8006cea <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d7c:	e7b5      	b.n	8006cea <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006d7e:	4b17      	ldr	r3, [pc, #92]	@ (8006ddc <xTaskIncrementTick+0x168>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d84:	4914      	ldr	r1, [pc, #80]	@ (8006dd8 <xTaskIncrementTick+0x164>)
 8006d86:	4613      	mov	r3, r2
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	4413      	add	r3, r2
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	440b      	add	r3, r1
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d901      	bls.n	8006d9a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006d96:	2301      	movs	r3, #1
 8006d98:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006d9a:	4b11      	ldr	r3, [pc, #68]	@ (8006de0 <xTaskIncrementTick+0x16c>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d007      	beq.n	8006db2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006da2:	2301      	movs	r3, #1
 8006da4:	617b      	str	r3, [r7, #20]
 8006da6:	e004      	b.n	8006db2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006da8:	4b0e      	ldr	r3, [pc, #56]	@ (8006de4 <xTaskIncrementTick+0x170>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	3301      	adds	r3, #1
 8006dae:	4a0d      	ldr	r2, [pc, #52]	@ (8006de4 <xTaskIncrementTick+0x170>)
 8006db0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006db2:	697b      	ldr	r3, [r7, #20]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3718      	adds	r7, #24
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	20001594 	.word	0x20001594
 8006dc0:	20001570 	.word	0x20001570
 8006dc4:	20001524 	.word	0x20001524
 8006dc8:	20001528 	.word	0x20001528
 8006dcc:	20001584 	.word	0x20001584
 8006dd0:	2000158c 	.word	0x2000158c
 8006dd4:	20001574 	.word	0x20001574
 8006dd8:	2000109c 	.word	0x2000109c
 8006ddc:	20001098 	.word	0x20001098
 8006de0:	20001580 	.word	0x20001580
 8006de4:	2000157c 	.word	0x2000157c

08006de8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006dee:	4b36      	ldr	r3, [pc, #216]	@ (8006ec8 <vTaskSwitchContext+0xe0>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d003      	beq.n	8006dfe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006df6:	4b35      	ldr	r3, [pc, #212]	@ (8006ecc <vTaskSwitchContext+0xe4>)
 8006df8:	2201      	movs	r2, #1
 8006dfa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006dfc:	e060      	b.n	8006ec0 <vTaskSwitchContext+0xd8>
		xYieldPending = pdFALSE;
 8006dfe:	4b33      	ldr	r3, [pc, #204]	@ (8006ecc <vTaskSwitchContext+0xe4>)
 8006e00:	2200      	movs	r2, #0
 8006e02:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8006e04:	f7f9 fffb 	bl	8000dfe <getRunTimeCounterValue>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	4a31      	ldr	r2, [pc, #196]	@ (8006ed0 <vTaskSwitchContext+0xe8>)
 8006e0c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8006e0e:	4b30      	ldr	r3, [pc, #192]	@ (8006ed0 <vTaskSwitchContext+0xe8>)
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	4b30      	ldr	r3, [pc, #192]	@ (8006ed4 <vTaskSwitchContext+0xec>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d909      	bls.n	8006e2e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8006e1a:	4b2f      	ldr	r3, [pc, #188]	@ (8006ed8 <vTaskSwitchContext+0xf0>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8006e20:	4a2b      	ldr	r2, [pc, #172]	@ (8006ed0 <vTaskSwitchContext+0xe8>)
 8006e22:	6810      	ldr	r0, [r2, #0]
 8006e24:	4a2b      	ldr	r2, [pc, #172]	@ (8006ed4 <vTaskSwitchContext+0xec>)
 8006e26:	6812      	ldr	r2, [r2, #0]
 8006e28:	1a82      	subs	r2, r0, r2
 8006e2a:	440a      	add	r2, r1
 8006e2c:	669a      	str	r2, [r3, #104]	@ 0x68
			ulTaskSwitchedInTime = ulTotalRunTime;
 8006e2e:	4b28      	ldr	r3, [pc, #160]	@ (8006ed0 <vTaskSwitchContext+0xe8>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a28      	ldr	r2, [pc, #160]	@ (8006ed4 <vTaskSwitchContext+0xec>)
 8006e34:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e36:	4b29      	ldr	r3, [pc, #164]	@ (8006edc <vTaskSwitchContext+0xf4>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	60fb      	str	r3, [r7, #12]
 8006e3c:	e011      	b.n	8006e62 <vTaskSwitchContext+0x7a>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d10b      	bne.n	8006e5c <vTaskSwitchContext+0x74>
	__asm volatile
 8006e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e48:	f383 8811 	msr	BASEPRI, r3
 8006e4c:	f3bf 8f6f 	isb	sy
 8006e50:	f3bf 8f4f 	dsb	sy
 8006e54:	607b      	str	r3, [r7, #4]
}
 8006e56:	bf00      	nop
 8006e58:	bf00      	nop
 8006e5a:	e7fd      	b.n	8006e58 <vTaskSwitchContext+0x70>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	60fb      	str	r3, [r7, #12]
 8006e62:	491f      	ldr	r1, [pc, #124]	@ (8006ee0 <vTaskSwitchContext+0xf8>)
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	4613      	mov	r3, r2
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	4413      	add	r3, r2
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	440b      	add	r3, r1
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d0e3      	beq.n	8006e3e <vTaskSwitchContext+0x56>
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	4413      	add	r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4a17      	ldr	r2, [pc, #92]	@ (8006ee0 <vTaskSwitchContext+0xf8>)
 8006e82:	4413      	add	r3, r2
 8006e84:	60bb      	str	r3, [r7, #8]
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	685a      	ldr	r2, [r3, #4]
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	605a      	str	r2, [r3, #4]
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	685a      	ldr	r2, [r3, #4]
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	3308      	adds	r3, #8
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d104      	bne.n	8006ea6 <vTaskSwitchContext+0xbe>
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	685a      	ldr	r2, [r3, #4]
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	605a      	str	r2, [r3, #4]
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	4a0a      	ldr	r2, [pc, #40]	@ (8006ed8 <vTaskSwitchContext+0xf0>)
 8006eae:	6013      	str	r3, [r2, #0]
 8006eb0:	4a0a      	ldr	r2, [pc, #40]	@ (8006edc <vTaskSwitchContext+0xf4>)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006eb6:	4b08      	ldr	r3, [pc, #32]	@ (8006ed8 <vTaskSwitchContext+0xf0>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	336c      	adds	r3, #108	@ 0x6c
 8006ebc:	4a09      	ldr	r2, [pc, #36]	@ (8006ee4 <vTaskSwitchContext+0xfc>)
 8006ebe:	6013      	str	r3, [r2, #0]
}
 8006ec0:	bf00      	nop
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	20001594 	.word	0x20001594
 8006ecc:	20001580 	.word	0x20001580
 8006ed0:	2000159c 	.word	0x2000159c
 8006ed4:	20001598 	.word	0x20001598
 8006ed8:	20001098 	.word	0x20001098
 8006edc:	20001574 	.word	0x20001574
 8006ee0:	2000109c 	.word	0x2000109c
 8006ee4:	20000084 	.word	0x20000084

08006ee8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10b      	bne.n	8006f10 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006efc:	f383 8811 	msr	BASEPRI, r3
 8006f00:	f3bf 8f6f 	isb	sy
 8006f04:	f3bf 8f4f 	dsb	sy
 8006f08:	60fb      	str	r3, [r7, #12]
}
 8006f0a:	bf00      	nop
 8006f0c:	bf00      	nop
 8006f0e:	e7fd      	b.n	8006f0c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f10:	4b07      	ldr	r3, [pc, #28]	@ (8006f30 <vTaskPlaceOnEventList+0x48>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	3318      	adds	r3, #24
 8006f16:	4619      	mov	r1, r3
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f7fe fab6 	bl	800548a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f1e:	2101      	movs	r1, #1
 8006f20:	6838      	ldr	r0, [r7, #0]
 8006f22:	f000 fc43 	bl	80077ac <prvAddCurrentTaskToDelayedList>
}
 8006f26:	bf00      	nop
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	20001098 	.word	0x20001098

08006f34 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b086      	sub	sp, #24
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10b      	bne.n	8006f5e <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8006f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f4a:	f383 8811 	msr	BASEPRI, r3
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	f3bf 8f4f 	dsb	sy
 8006f56:	617b      	str	r3, [r7, #20]
}
 8006f58:	bf00      	nop
 8006f5a:	bf00      	nop
 8006f5c:	e7fd      	b.n	8006f5a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8006f5e:	4b12      	ldr	r3, [pc, #72]	@ (8006fa8 <vTaskPlaceOnUnorderedEventList+0x74>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10b      	bne.n	8006f7e <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 8006f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f6a:	f383 8811 	msr	BASEPRI, r3
 8006f6e:	f3bf 8f6f 	isb	sy
 8006f72:	f3bf 8f4f 	dsb	sy
 8006f76:	613b      	str	r3, [r7, #16]
}
 8006f78:	bf00      	nop
 8006f7a:	bf00      	nop
 8006f7c:	e7fd      	b.n	8006f7a <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8006fac <vTaskPlaceOnUnorderedEventList+0x78>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68ba      	ldr	r2, [r7, #8]
 8006f84:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006f88:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f8a:	4b08      	ldr	r3, [pc, #32]	@ (8006fac <vTaskPlaceOnUnorderedEventList+0x78>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	3318      	adds	r3, #24
 8006f90:	4619      	mov	r1, r3
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f7fe fa55 	bl	8005442 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f98:	2101      	movs	r1, #1
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 fc06 	bl	80077ac <prvAddCurrentTaskToDelayedList>
}
 8006fa0:	bf00      	nop
 8006fa2:	3718      	adds	r7, #24
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	20001594 	.word	0x20001594
 8006fac:	20001098 	.word	0x20001098

08006fb0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10b      	bne.n	8006fda <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc6:	f383 8811 	msr	BASEPRI, r3
 8006fca:	f3bf 8f6f 	isb	sy
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	617b      	str	r3, [r7, #20]
}
 8006fd4:	bf00      	nop
 8006fd6:	bf00      	nop
 8006fd8:	e7fd      	b.n	8006fd6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006fda:	4b0a      	ldr	r3, [pc, #40]	@ (8007004 <vTaskPlaceOnEventListRestricted+0x54>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	3318      	adds	r3, #24
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f7fe fa2d 	bl	8005442 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d002      	beq.n	8006ff4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006fee:	f04f 33ff 	mov.w	r3, #4294967295
 8006ff2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006ff4:	6879      	ldr	r1, [r7, #4]
 8006ff6:	68b8      	ldr	r0, [r7, #8]
 8006ff8:	f000 fbd8 	bl	80077ac <prvAddCurrentTaskToDelayedList>
	}
 8006ffc:	bf00      	nop
 8006ffe:	3718      	adds	r7, #24
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}
 8007004:	20001098 	.word	0x20001098

08007008 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b086      	sub	sp, #24
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d10b      	bne.n	8007036 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800701e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007022:	f383 8811 	msr	BASEPRI, r3
 8007026:	f3bf 8f6f 	isb	sy
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	60fb      	str	r3, [r7, #12]
}
 8007030:	bf00      	nop
 8007032:	bf00      	nop
 8007034:	e7fd      	b.n	8007032 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	3318      	adds	r3, #24
 800703a:	4618      	mov	r0, r3
 800703c:	f7fe fa5e 	bl	80054fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007040:	4b1d      	ldr	r3, [pc, #116]	@ (80070b8 <xTaskRemoveFromEventList+0xb0>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d11d      	bne.n	8007084 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	3304      	adds	r3, #4
 800704c:	4618      	mov	r0, r3
 800704e:	f7fe fa55 	bl	80054fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007056:	4b19      	ldr	r3, [pc, #100]	@ (80070bc <xTaskRemoveFromEventList+0xb4>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	429a      	cmp	r2, r3
 800705c:	d903      	bls.n	8007066 <xTaskRemoveFromEventList+0x5e>
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007062:	4a16      	ldr	r2, [pc, #88]	@ (80070bc <xTaskRemoveFromEventList+0xb4>)
 8007064:	6013      	str	r3, [r2, #0]
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800706a:	4613      	mov	r3, r2
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4413      	add	r3, r2
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	4a13      	ldr	r2, [pc, #76]	@ (80070c0 <xTaskRemoveFromEventList+0xb8>)
 8007074:	441a      	add	r2, r3
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	3304      	adds	r3, #4
 800707a:	4619      	mov	r1, r3
 800707c:	4610      	mov	r0, r2
 800707e:	f7fe f9e0 	bl	8005442 <vListInsertEnd>
 8007082:	e005      	b.n	8007090 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	3318      	adds	r3, #24
 8007088:	4619      	mov	r1, r3
 800708a:	480e      	ldr	r0, [pc, #56]	@ (80070c4 <xTaskRemoveFromEventList+0xbc>)
 800708c:	f7fe f9d9 	bl	8005442 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007094:	4b0c      	ldr	r3, [pc, #48]	@ (80070c8 <xTaskRemoveFromEventList+0xc0>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800709a:	429a      	cmp	r2, r3
 800709c:	d905      	bls.n	80070aa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800709e:	2301      	movs	r3, #1
 80070a0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80070a2:	4b0a      	ldr	r3, [pc, #40]	@ (80070cc <xTaskRemoveFromEventList+0xc4>)
 80070a4:	2201      	movs	r2, #1
 80070a6:	601a      	str	r2, [r3, #0]
 80070a8:	e001      	b.n	80070ae <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80070aa:	2300      	movs	r3, #0
 80070ac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80070ae:	697b      	ldr	r3, [r7, #20]
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3718      	adds	r7, #24
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	20001594 	.word	0x20001594
 80070bc:	20001574 	.word	0x20001574
 80070c0:	2000109c 	.word	0x2000109c
 80070c4:	2000152c 	.word	0x2000152c
 80070c8:	20001098 	.word	0x20001098
 80070cc:	20001580 	.word	0x20001580

080070d0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b086      	sub	sp, #24
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80070da:	4b2a      	ldr	r3, [pc, #168]	@ (8007184 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d10b      	bne.n	80070fa <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 80070e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e6:	f383 8811 	msr	BASEPRI, r3
 80070ea:	f3bf 8f6f 	isb	sy
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	613b      	str	r3, [r7, #16]
}
 80070f4:	bf00      	nop
 80070f6:	bf00      	nop
 80070f8:	e7fd      	b.n	80070f6 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10b      	bne.n	8007128 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 8007110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007114:	f383 8811 	msr	BASEPRI, r3
 8007118:	f3bf 8f6f 	isb	sy
 800711c:	f3bf 8f4f 	dsb	sy
 8007120:	60fb      	str	r3, [r7, #12]
}
 8007122:	bf00      	nop
 8007124:	bf00      	nop
 8007126:	e7fd      	b.n	8007124 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f7fe f9e7 	bl	80054fc <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	3304      	adds	r3, #4
 8007132:	4618      	mov	r0, r3
 8007134:	f7fe f9e2 	bl	80054fc <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800713c:	4b12      	ldr	r3, [pc, #72]	@ (8007188 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	429a      	cmp	r2, r3
 8007142:	d903      	bls.n	800714c <vTaskRemoveFromUnorderedEventList+0x7c>
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007148:	4a0f      	ldr	r2, [pc, #60]	@ (8007188 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800714a:	6013      	str	r3, [r2, #0]
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007150:	4613      	mov	r3, r2
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	4413      	add	r3, r2
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	4a0c      	ldr	r2, [pc, #48]	@ (800718c <vTaskRemoveFromUnorderedEventList+0xbc>)
 800715a:	441a      	add	r2, r3
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	3304      	adds	r3, #4
 8007160:	4619      	mov	r1, r3
 8007162:	4610      	mov	r0, r2
 8007164:	f7fe f96d 	bl	8005442 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800716c:	4b08      	ldr	r3, [pc, #32]	@ (8007190 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007172:	429a      	cmp	r2, r3
 8007174:	d902      	bls.n	800717c <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8007176:	4b07      	ldr	r3, [pc, #28]	@ (8007194 <vTaskRemoveFromUnorderedEventList+0xc4>)
 8007178:	2201      	movs	r2, #1
 800717a:	601a      	str	r2, [r3, #0]
	}
}
 800717c:	bf00      	nop
 800717e:	3718      	adds	r7, #24
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}
 8007184:	20001594 	.word	0x20001594
 8007188:	20001574 	.word	0x20001574
 800718c:	2000109c 	.word	0x2000109c
 8007190:	20001098 	.word	0x20001098
 8007194:	20001580 	.word	0x20001580

08007198 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80071a0:	4b06      	ldr	r3, [pc, #24]	@ (80071bc <vTaskInternalSetTimeOutState+0x24>)
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80071a8:	4b05      	ldr	r3, [pc, #20]	@ (80071c0 <vTaskInternalSetTimeOutState+0x28>)
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	605a      	str	r2, [r3, #4]
}
 80071b0:	bf00      	nop
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr
 80071bc:	20001584 	.word	0x20001584
 80071c0:	20001570 	.word	0x20001570

080071c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b088      	sub	sp, #32
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10b      	bne.n	80071ec <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80071d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d8:	f383 8811 	msr	BASEPRI, r3
 80071dc:	f3bf 8f6f 	isb	sy
 80071e0:	f3bf 8f4f 	dsb	sy
 80071e4:	613b      	str	r3, [r7, #16]
}
 80071e6:	bf00      	nop
 80071e8:	bf00      	nop
 80071ea:	e7fd      	b.n	80071e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10b      	bne.n	800720a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80071f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071f6:	f383 8811 	msr	BASEPRI, r3
 80071fa:	f3bf 8f6f 	isb	sy
 80071fe:	f3bf 8f4f 	dsb	sy
 8007202:	60fb      	str	r3, [r7, #12]
}
 8007204:	bf00      	nop
 8007206:	bf00      	nop
 8007208:	e7fd      	b.n	8007206 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800720a:	f000 ffcd 	bl	80081a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800720e:	4b1d      	ldr	r3, [pc, #116]	@ (8007284 <xTaskCheckForTimeOut+0xc0>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	69ba      	ldr	r2, [r7, #24]
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007226:	d102      	bne.n	800722e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007228:	2300      	movs	r3, #0
 800722a:	61fb      	str	r3, [r7, #28]
 800722c:	e023      	b.n	8007276 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	4b15      	ldr	r3, [pc, #84]	@ (8007288 <xTaskCheckForTimeOut+0xc4>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	429a      	cmp	r2, r3
 8007238:	d007      	beq.n	800724a <xTaskCheckForTimeOut+0x86>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	69ba      	ldr	r2, [r7, #24]
 8007240:	429a      	cmp	r2, r3
 8007242:	d302      	bcc.n	800724a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007244:	2301      	movs	r3, #1
 8007246:	61fb      	str	r3, [r7, #28]
 8007248:	e015      	b.n	8007276 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	429a      	cmp	r2, r3
 8007252:	d20b      	bcs.n	800726c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	1ad2      	subs	r2, r2, r3
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f7ff ff99 	bl	8007198 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007266:	2300      	movs	r3, #0
 8007268:	61fb      	str	r3, [r7, #28]
 800726a:	e004      	b.n	8007276 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	2200      	movs	r2, #0
 8007270:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007272:	2301      	movs	r3, #1
 8007274:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007276:	f000 ffc9 	bl	800820c <vPortExitCritical>

	return xReturn;
 800727a:	69fb      	ldr	r3, [r7, #28]
}
 800727c:	4618      	mov	r0, r3
 800727e:	3720      	adds	r7, #32
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	20001570 	.word	0x20001570
 8007288:	20001584 	.word	0x20001584

0800728c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800728c:	b480      	push	{r7}
 800728e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007290:	4b03      	ldr	r3, [pc, #12]	@ (80072a0 <vTaskMissedYield+0x14>)
 8007292:	2201      	movs	r2, #1
 8007294:	601a      	str	r2, [r3, #0]
}
 8007296:	bf00      	nop
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr
 80072a0:	20001580 	.word	0x20001580

080072a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80072ac:	f000 f854 	bl	8007358 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80072b0:	4b07      	ldr	r3, [pc, #28]	@ (80072d0 <prvIdleTask+0x2c>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d907      	bls.n	80072c8 <prvIdleTask+0x24>
			{
				taskYIELD();
 80072b8:	4b06      	ldr	r3, [pc, #24]	@ (80072d4 <prvIdleTask+0x30>)
 80072ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072be:	601a      	str	r2, [r3, #0]
 80072c0:	f3bf 8f4f 	dsb	sy
 80072c4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80072c8:	f7f9 fda1 	bl	8000e0e <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80072cc:	e7ee      	b.n	80072ac <prvIdleTask+0x8>
 80072ce:	bf00      	nop
 80072d0:	2000109c 	.word	0x2000109c
 80072d4:	e000ed04 	.word	0xe000ed04

080072d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072de:	2300      	movs	r3, #0
 80072e0:	607b      	str	r3, [r7, #4]
 80072e2:	e00c      	b.n	80072fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	4613      	mov	r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4413      	add	r3, r2
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	4a12      	ldr	r2, [pc, #72]	@ (8007338 <prvInitialiseTaskLists+0x60>)
 80072f0:	4413      	add	r3, r2
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7fe f878 	bl	80053e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	3301      	adds	r3, #1
 80072fc:	607b      	str	r3, [r7, #4]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2b37      	cmp	r3, #55	@ 0x37
 8007302:	d9ef      	bls.n	80072e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007304:	480d      	ldr	r0, [pc, #52]	@ (800733c <prvInitialiseTaskLists+0x64>)
 8007306:	f7fe f86f 	bl	80053e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800730a:	480d      	ldr	r0, [pc, #52]	@ (8007340 <prvInitialiseTaskLists+0x68>)
 800730c:	f7fe f86c 	bl	80053e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007310:	480c      	ldr	r0, [pc, #48]	@ (8007344 <prvInitialiseTaskLists+0x6c>)
 8007312:	f7fe f869 	bl	80053e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007316:	480c      	ldr	r0, [pc, #48]	@ (8007348 <prvInitialiseTaskLists+0x70>)
 8007318:	f7fe f866 	bl	80053e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800731c:	480b      	ldr	r0, [pc, #44]	@ (800734c <prvInitialiseTaskLists+0x74>)
 800731e:	f7fe f863 	bl	80053e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007322:	4b0b      	ldr	r3, [pc, #44]	@ (8007350 <prvInitialiseTaskLists+0x78>)
 8007324:	4a05      	ldr	r2, [pc, #20]	@ (800733c <prvInitialiseTaskLists+0x64>)
 8007326:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007328:	4b0a      	ldr	r3, [pc, #40]	@ (8007354 <prvInitialiseTaskLists+0x7c>)
 800732a:	4a05      	ldr	r2, [pc, #20]	@ (8007340 <prvInitialiseTaskLists+0x68>)
 800732c:	601a      	str	r2, [r3, #0]
}
 800732e:	bf00      	nop
 8007330:	3708      	adds	r7, #8
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	2000109c 	.word	0x2000109c
 800733c:	200014fc 	.word	0x200014fc
 8007340:	20001510 	.word	0x20001510
 8007344:	2000152c 	.word	0x2000152c
 8007348:	20001540 	.word	0x20001540
 800734c:	20001558 	.word	0x20001558
 8007350:	20001524 	.word	0x20001524
 8007354:	20001528 	.word	0x20001528

08007358 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800735e:	e019      	b.n	8007394 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007360:	f000 ff22 	bl	80081a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007364:	4b10      	ldr	r3, [pc, #64]	@ (80073a8 <prvCheckTasksWaitingTermination+0x50>)
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	3304      	adds	r3, #4
 8007370:	4618      	mov	r0, r3
 8007372:	f7fe f8c3 	bl	80054fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007376:	4b0d      	ldr	r3, [pc, #52]	@ (80073ac <prvCheckTasksWaitingTermination+0x54>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	3b01      	subs	r3, #1
 800737c:	4a0b      	ldr	r2, [pc, #44]	@ (80073ac <prvCheckTasksWaitingTermination+0x54>)
 800737e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007380:	4b0b      	ldr	r3, [pc, #44]	@ (80073b0 <prvCheckTasksWaitingTermination+0x58>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	3b01      	subs	r3, #1
 8007386:	4a0a      	ldr	r2, [pc, #40]	@ (80073b0 <prvCheckTasksWaitingTermination+0x58>)
 8007388:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800738a:	f000 ff3f 	bl	800820c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 f810 	bl	80073b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007394:	4b06      	ldr	r3, [pc, #24]	@ (80073b0 <prvCheckTasksWaitingTermination+0x58>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1e1      	bne.n	8007360 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800739c:	bf00      	nop
 800739e:	bf00      	nop
 80073a0:	3708      	adds	r7, #8
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	20001540 	.word	0x20001540
 80073ac:	2000156c 	.word	0x2000156c
 80073b0:	20001554 	.word	0x20001554

080073b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	336c      	adds	r3, #108	@ 0x6c
 80073c0:	4618      	mov	r0, r3
 80073c2:	f001 fa45 	bl	8008850 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 30bd 	ldrb.w	r3, [r3, #189]	@ 0xbd
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d108      	bne.n	80073e2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073d4:	4618      	mov	r0, r3
 80073d6:	f001 f8d7 	bl	8008588 <vPortFree>
				vPortFree( pxTCB );
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f001 f8d4 	bl	8008588 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80073e0:	e019      	b.n	8007416 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f893 30bd 	ldrb.w	r3, [r3, #189]	@ 0xbd
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d103      	bne.n	80073f4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f001 f8cb 	bl	8008588 <vPortFree>
	}
 80073f2:	e010      	b.n	8007416 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f893 30bd 	ldrb.w	r3, [r3, #189]	@ 0xbd
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d00b      	beq.n	8007416 <prvDeleteTCB+0x62>
	__asm volatile
 80073fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007402:	f383 8811 	msr	BASEPRI, r3
 8007406:	f3bf 8f6f 	isb	sy
 800740a:	f3bf 8f4f 	dsb	sy
 800740e:	60fb      	str	r3, [r7, #12]
}
 8007410:	bf00      	nop
 8007412:	bf00      	nop
 8007414:	e7fd      	b.n	8007412 <prvDeleteTCB+0x5e>
	}
 8007416:	bf00      	nop
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
	...

08007420 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007426:	4b0c      	ldr	r3, [pc, #48]	@ (8007458 <prvResetNextTaskUnblockTime+0x38>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d104      	bne.n	800743a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007430:	4b0a      	ldr	r3, [pc, #40]	@ (800745c <prvResetNextTaskUnblockTime+0x3c>)
 8007432:	f04f 32ff 	mov.w	r2, #4294967295
 8007436:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007438:	e008      	b.n	800744c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800743a:	4b07      	ldr	r3, [pc, #28]	@ (8007458 <prvResetNextTaskUnblockTime+0x38>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	4a04      	ldr	r2, [pc, #16]	@ (800745c <prvResetNextTaskUnblockTime+0x3c>)
 800744a:	6013      	str	r3, [r2, #0]
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr
 8007458:	20001524 	.word	0x20001524
 800745c:	2000158c 	.word	0x2000158c

08007460 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007466:	4b0b      	ldr	r3, [pc, #44]	@ (8007494 <xTaskGetSchedulerState+0x34>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d102      	bne.n	8007474 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800746e:	2301      	movs	r3, #1
 8007470:	607b      	str	r3, [r7, #4]
 8007472:	e008      	b.n	8007486 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007474:	4b08      	ldr	r3, [pc, #32]	@ (8007498 <xTaskGetSchedulerState+0x38>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d102      	bne.n	8007482 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800747c:	2302      	movs	r3, #2
 800747e:	607b      	str	r3, [r7, #4]
 8007480:	e001      	b.n	8007486 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007482:	2300      	movs	r3, #0
 8007484:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007486:	687b      	ldr	r3, [r7, #4]
	}
 8007488:	4618      	mov	r0, r3
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr
 8007494:	20001578 	.word	0x20001578
 8007498:	20001594 	.word	0x20001594

0800749c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80074a8:	2300      	movs	r3, #0
 80074aa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d051      	beq.n	8007556 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074b6:	4b2a      	ldr	r3, [pc, #168]	@ (8007560 <xTaskPriorityInherit+0xc4>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074bc:	429a      	cmp	r2, r3
 80074be:	d241      	bcs.n	8007544 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	699b      	ldr	r3, [r3, #24]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	db06      	blt.n	80074d6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074c8:	4b25      	ldr	r3, [pc, #148]	@ (8007560 <xTaskPriorityInherit+0xc4>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ce:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	6959      	ldr	r1, [r3, #20]
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074de:	4613      	mov	r3, r2
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4413      	add	r3, r2
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	4a1f      	ldr	r2, [pc, #124]	@ (8007564 <xTaskPriorityInherit+0xc8>)
 80074e8:	4413      	add	r3, r2
 80074ea:	4299      	cmp	r1, r3
 80074ec:	d122      	bne.n	8007534 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	3304      	adds	r3, #4
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7fe f802 	bl	80054fc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80074f8:	4b19      	ldr	r3, [pc, #100]	@ (8007560 <xTaskPriorityInherit+0xc4>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007506:	4b18      	ldr	r3, [pc, #96]	@ (8007568 <xTaskPriorityInherit+0xcc>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	429a      	cmp	r2, r3
 800750c:	d903      	bls.n	8007516 <xTaskPriorityInherit+0x7a>
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007512:	4a15      	ldr	r2, [pc, #84]	@ (8007568 <xTaskPriorityInherit+0xcc>)
 8007514:	6013      	str	r3, [r2, #0]
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800751a:	4613      	mov	r3, r2
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	4413      	add	r3, r2
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	4a10      	ldr	r2, [pc, #64]	@ (8007564 <xTaskPriorityInherit+0xc8>)
 8007524:	441a      	add	r2, r3
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	3304      	adds	r3, #4
 800752a:	4619      	mov	r1, r3
 800752c:	4610      	mov	r0, r2
 800752e:	f7fd ff88 	bl	8005442 <vListInsertEnd>
 8007532:	e004      	b.n	800753e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007534:	4b0a      	ldr	r3, [pc, #40]	@ (8007560 <xTaskPriorityInherit+0xc4>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800753e:	2301      	movs	r3, #1
 8007540:	60fb      	str	r3, [r7, #12]
 8007542:	e008      	b.n	8007556 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007548:	4b05      	ldr	r3, [pc, #20]	@ (8007560 <xTaskPriorityInherit+0xc4>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800754e:	429a      	cmp	r2, r3
 8007550:	d201      	bcs.n	8007556 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007552:	2301      	movs	r3, #1
 8007554:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007556:	68fb      	ldr	r3, [r7, #12]
	}
 8007558:	4618      	mov	r0, r3
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	20001098 	.word	0x20001098
 8007564:	2000109c 	.word	0x2000109c
 8007568:	20001574 	.word	0x20001574

0800756c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800756c:	b580      	push	{r7, lr}
 800756e:	b086      	sub	sp, #24
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007578:	2300      	movs	r3, #0
 800757a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d058      	beq.n	8007634 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007582:	4b2f      	ldr	r3, [pc, #188]	@ (8007640 <xTaskPriorityDisinherit+0xd4>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	693a      	ldr	r2, [r7, #16]
 8007588:	429a      	cmp	r2, r3
 800758a:	d00b      	beq.n	80075a4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800758c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007590:	f383 8811 	msr	BASEPRI, r3
 8007594:	f3bf 8f6f 	isb	sy
 8007598:	f3bf 8f4f 	dsb	sy
 800759c:	60fb      	str	r3, [r7, #12]
}
 800759e:	bf00      	nop
 80075a0:	bf00      	nop
 80075a2:	e7fd      	b.n	80075a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d10b      	bne.n	80075c4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80075ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b0:	f383 8811 	msr	BASEPRI, r3
 80075b4:	f3bf 8f6f 	isb	sy
 80075b8:	f3bf 8f4f 	dsb	sy
 80075bc:	60bb      	str	r3, [r7, #8]
}
 80075be:	bf00      	nop
 80075c0:	bf00      	nop
 80075c2:	e7fd      	b.n	80075c0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075c8:	1e5a      	subs	r2, r3, #1
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	665a      	str	r2, [r3, #100]	@ 0x64

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d02c      	beq.n	8007634 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d128      	bne.n	8007634 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	3304      	adds	r3, #4
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7fd ff88 	bl	80054fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007604:	4b0f      	ldr	r3, [pc, #60]	@ (8007644 <xTaskPriorityDisinherit+0xd8>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	429a      	cmp	r2, r3
 800760a:	d903      	bls.n	8007614 <xTaskPriorityDisinherit+0xa8>
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007610:	4a0c      	ldr	r2, [pc, #48]	@ (8007644 <xTaskPriorityDisinherit+0xd8>)
 8007612:	6013      	str	r3, [r2, #0]
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007618:	4613      	mov	r3, r2
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	4413      	add	r3, r2
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	4a09      	ldr	r2, [pc, #36]	@ (8007648 <xTaskPriorityDisinherit+0xdc>)
 8007622:	441a      	add	r2, r3
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	3304      	adds	r3, #4
 8007628:	4619      	mov	r1, r3
 800762a:	4610      	mov	r0, r2
 800762c:	f7fd ff09 	bl	8005442 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007630:	2301      	movs	r3, #1
 8007632:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007634:	697b      	ldr	r3, [r7, #20]
	}
 8007636:	4618      	mov	r0, r3
 8007638:	3718      	adds	r7, #24
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	20001098 	.word	0x20001098
 8007644:	20001574 	.word	0x20001574
 8007648:	2000109c 	.word	0x2000109c

0800764c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800764c:	b580      	push	{r7, lr}
 800764e:	b088      	sub	sp, #32
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800765a:	2301      	movs	r3, #1
 800765c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d06c      	beq.n	800773e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007668:	2b00      	cmp	r3, #0
 800766a:	d10b      	bne.n	8007684 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800766c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007670:	f383 8811 	msr	BASEPRI, r3
 8007674:	f3bf 8f6f 	isb	sy
 8007678:	f3bf 8f4f 	dsb	sy
 800767c:	60fb      	str	r3, [r7, #12]
}
 800767e:	bf00      	nop
 8007680:	bf00      	nop
 8007682:	e7fd      	b.n	8007680 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007688:	683a      	ldr	r2, [r7, #0]
 800768a:	429a      	cmp	r2, r3
 800768c:	d902      	bls.n	8007694 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	61fb      	str	r3, [r7, #28]
 8007692:	e002      	b.n	800769a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007698:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800769e:	69fa      	ldr	r2, [r7, #28]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d04c      	beq.n	800773e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076a8:	697a      	ldr	r2, [r7, #20]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d147      	bne.n	800773e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80076ae:	4b26      	ldr	r3, [pc, #152]	@ (8007748 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	69ba      	ldr	r2, [r7, #24]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d10b      	bne.n	80076d0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80076b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076bc:	f383 8811 	msr	BASEPRI, r3
 80076c0:	f3bf 8f6f 	isb	sy
 80076c4:	f3bf 8f4f 	dsb	sy
 80076c8:	60bb      	str	r3, [r7, #8]
}
 80076ca:	bf00      	nop
 80076cc:	bf00      	nop
 80076ce:	e7fd      	b.n	80076cc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	69fa      	ldr	r2, [r7, #28]
 80076da:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	699b      	ldr	r3, [r3, #24]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	db04      	blt.n	80076ee <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	6959      	ldr	r1, [r3, #20]
 80076f2:	693a      	ldr	r2, [r7, #16]
 80076f4:	4613      	mov	r3, r2
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	4413      	add	r3, r2
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	4a13      	ldr	r2, [pc, #76]	@ (800774c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80076fe:	4413      	add	r3, r2
 8007700:	4299      	cmp	r1, r3
 8007702:	d11c      	bne.n	800773e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	3304      	adds	r3, #4
 8007708:	4618      	mov	r0, r3
 800770a:	f7fd fef7 	bl	80054fc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007712:	4b0f      	ldr	r3, [pc, #60]	@ (8007750 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	429a      	cmp	r2, r3
 8007718:	d903      	bls.n	8007722 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800771e:	4a0c      	ldr	r2, [pc, #48]	@ (8007750 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007720:	6013      	str	r3, [r2, #0]
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007726:	4613      	mov	r3, r2
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	4413      	add	r3, r2
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	4a07      	ldr	r2, [pc, #28]	@ (800774c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007730:	441a      	add	r2, r3
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	3304      	adds	r3, #4
 8007736:	4619      	mov	r1, r3
 8007738:	4610      	mov	r0, r2
 800773a:	f7fd fe82 	bl	8005442 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800773e:	bf00      	nop
 8007740:	3720      	adds	r7, #32
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	20001098 	.word	0x20001098
 800774c:	2000109c 	.word	0x2000109c
 8007750:	20001574 	.word	0x20001574

08007754 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800775a:	4b09      	ldr	r3, [pc, #36]	@ (8007780 <uxTaskResetEventItemValue+0x2c>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007762:	4b07      	ldr	r3, [pc, #28]	@ (8007780 <uxTaskResetEventItemValue+0x2c>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007768:	4b05      	ldr	r3, [pc, #20]	@ (8007780 <uxTaskResetEventItemValue+0x2c>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8007770:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8007772:	687b      	ldr	r3, [r7, #4]
}
 8007774:	4618      	mov	r0, r3
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr
 8007780:	20001098 	.word	0x20001098

08007784 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007784:	b480      	push	{r7}
 8007786:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007788:	4b07      	ldr	r3, [pc, #28]	@ (80077a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d004      	beq.n	800779a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007790:	4b05      	ldr	r3, [pc, #20]	@ (80077a8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007796:	3201      	adds	r2, #1
 8007798:	665a      	str	r2, [r3, #100]	@ 0x64
		}

		return pxCurrentTCB;
 800779a:	4b03      	ldr	r3, [pc, #12]	@ (80077a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800779c:	681b      	ldr	r3, [r3, #0]
	}
 800779e:	4618      	mov	r0, r3
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr
 80077a8:	20001098 	.word	0x20001098

080077ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80077b6:	4b21      	ldr	r3, [pc, #132]	@ (800783c <prvAddCurrentTaskToDelayedList+0x90>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077bc:	4b20      	ldr	r3, [pc, #128]	@ (8007840 <prvAddCurrentTaskToDelayedList+0x94>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	3304      	adds	r3, #4
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7fd fe9a 	bl	80054fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ce:	d10a      	bne.n	80077e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d007      	beq.n	80077e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077d6:	4b1a      	ldr	r3, [pc, #104]	@ (8007840 <prvAddCurrentTaskToDelayedList+0x94>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	3304      	adds	r3, #4
 80077dc:	4619      	mov	r1, r3
 80077de:	4819      	ldr	r0, [pc, #100]	@ (8007844 <prvAddCurrentTaskToDelayedList+0x98>)
 80077e0:	f7fd fe2f 	bl	8005442 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80077e4:	e026      	b.n	8007834 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4413      	add	r3, r2
 80077ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80077ee:	4b14      	ldr	r3, [pc, #80]	@ (8007840 <prvAddCurrentTaskToDelayedList+0x94>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d209      	bcs.n	8007812 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077fe:	4b12      	ldr	r3, [pc, #72]	@ (8007848 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	4b0f      	ldr	r3, [pc, #60]	@ (8007840 <prvAddCurrentTaskToDelayedList+0x94>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	3304      	adds	r3, #4
 8007808:	4619      	mov	r1, r3
 800780a:	4610      	mov	r0, r2
 800780c:	f7fd fe3d 	bl	800548a <vListInsert>
}
 8007810:	e010      	b.n	8007834 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007812:	4b0e      	ldr	r3, [pc, #56]	@ (800784c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	4b0a      	ldr	r3, [pc, #40]	@ (8007840 <prvAddCurrentTaskToDelayedList+0x94>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	3304      	adds	r3, #4
 800781c:	4619      	mov	r1, r3
 800781e:	4610      	mov	r0, r2
 8007820:	f7fd fe33 	bl	800548a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007824:	4b0a      	ldr	r3, [pc, #40]	@ (8007850 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68ba      	ldr	r2, [r7, #8]
 800782a:	429a      	cmp	r2, r3
 800782c:	d202      	bcs.n	8007834 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800782e:	4a08      	ldr	r2, [pc, #32]	@ (8007850 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	6013      	str	r3, [r2, #0]
}
 8007834:	bf00      	nop
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}
 800783c:	20001570 	.word	0x20001570
 8007840:	20001098 	.word	0x20001098
 8007844:	20001558 	.word	0x20001558
 8007848:	20001528 	.word	0x20001528
 800784c:	20001524 	.word	0x20001524
 8007850:	2000158c 	.word	0x2000158c

08007854 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b08a      	sub	sp, #40	@ 0x28
 8007858:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800785a:	2300      	movs	r3, #0
 800785c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800785e:	f000 fb13 	bl	8007e88 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007862:	4b1d      	ldr	r3, [pc, #116]	@ (80078d8 <xTimerCreateTimerTask+0x84>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d021      	beq.n	80078ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800786a:	2300      	movs	r3, #0
 800786c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800786e:	2300      	movs	r3, #0
 8007870:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007872:	1d3a      	adds	r2, r7, #4
 8007874:	f107 0108 	add.w	r1, r7, #8
 8007878:	f107 030c 	add.w	r3, r7, #12
 800787c:	4618      	mov	r0, r3
 800787e:	f7fd fb25 	bl	8004ecc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007882:	6879      	ldr	r1, [r7, #4]
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	68fa      	ldr	r2, [r7, #12]
 8007888:	9202      	str	r2, [sp, #8]
 800788a:	9301      	str	r3, [sp, #4]
 800788c:	2302      	movs	r3, #2
 800788e:	9300      	str	r3, [sp, #0]
 8007890:	2300      	movs	r3, #0
 8007892:	460a      	mov	r2, r1
 8007894:	4911      	ldr	r1, [pc, #68]	@ (80078dc <xTimerCreateTimerTask+0x88>)
 8007896:	4812      	ldr	r0, [pc, #72]	@ (80078e0 <xTimerCreateTimerTask+0x8c>)
 8007898:	f7fe fec4 	bl	8006624 <xTaskCreateStatic>
 800789c:	4603      	mov	r3, r0
 800789e:	4a11      	ldr	r2, [pc, #68]	@ (80078e4 <xTimerCreateTimerTask+0x90>)
 80078a0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80078a2:	4b10      	ldr	r3, [pc, #64]	@ (80078e4 <xTimerCreateTimerTask+0x90>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d001      	beq.n	80078ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80078aa:	2301      	movs	r3, #1
 80078ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d10b      	bne.n	80078cc <xTimerCreateTimerTask+0x78>
	__asm volatile
 80078b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b8:	f383 8811 	msr	BASEPRI, r3
 80078bc:	f3bf 8f6f 	isb	sy
 80078c0:	f3bf 8f4f 	dsb	sy
 80078c4:	613b      	str	r3, [r7, #16]
}
 80078c6:	bf00      	nop
 80078c8:	bf00      	nop
 80078ca:	e7fd      	b.n	80078c8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80078cc:	697b      	ldr	r3, [r7, #20]
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3718      	adds	r7, #24
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	200015d0 	.word	0x200015d0
 80078dc:	08009318 	.word	0x08009318
 80078e0:	08007a21 	.word	0x08007a21
 80078e4:	200015d4 	.word	0x200015d4

080078e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b08a      	sub	sp, #40	@ 0x28
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	607a      	str	r2, [r7, #4]
 80078f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80078f6:	2300      	movs	r3, #0
 80078f8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d10b      	bne.n	8007918 <xTimerGenericCommand+0x30>
	__asm volatile
 8007900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007904:	f383 8811 	msr	BASEPRI, r3
 8007908:	f3bf 8f6f 	isb	sy
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	623b      	str	r3, [r7, #32]
}
 8007912:	bf00      	nop
 8007914:	bf00      	nop
 8007916:	e7fd      	b.n	8007914 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007918:	4b19      	ldr	r3, [pc, #100]	@ (8007980 <xTimerGenericCommand+0x98>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d02a      	beq.n	8007976 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	2b05      	cmp	r3, #5
 8007930:	dc18      	bgt.n	8007964 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007932:	f7ff fd95 	bl	8007460 <xTaskGetSchedulerState>
 8007936:	4603      	mov	r3, r0
 8007938:	2b02      	cmp	r3, #2
 800793a:	d109      	bne.n	8007950 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800793c:	4b10      	ldr	r3, [pc, #64]	@ (8007980 <xTimerGenericCommand+0x98>)
 800793e:	6818      	ldr	r0, [r3, #0]
 8007940:	f107 0110 	add.w	r1, r7, #16
 8007944:	2300      	movs	r3, #0
 8007946:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007948:	f7fd ffb6 	bl	80058b8 <xQueueGenericSend>
 800794c:	6278      	str	r0, [r7, #36]	@ 0x24
 800794e:	e012      	b.n	8007976 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007950:	4b0b      	ldr	r3, [pc, #44]	@ (8007980 <xTimerGenericCommand+0x98>)
 8007952:	6818      	ldr	r0, [r3, #0]
 8007954:	f107 0110 	add.w	r1, r7, #16
 8007958:	2300      	movs	r3, #0
 800795a:	2200      	movs	r2, #0
 800795c:	f7fd ffac 	bl	80058b8 <xQueueGenericSend>
 8007960:	6278      	str	r0, [r7, #36]	@ 0x24
 8007962:	e008      	b.n	8007976 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007964:	4b06      	ldr	r3, [pc, #24]	@ (8007980 <xTimerGenericCommand+0x98>)
 8007966:	6818      	ldr	r0, [r3, #0]
 8007968:	f107 0110 	add.w	r1, r7, #16
 800796c:	2300      	movs	r3, #0
 800796e:	683a      	ldr	r2, [r7, #0]
 8007970:	f7fe f8a4 	bl	8005abc <xQueueGenericSendFromISR>
 8007974:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007978:	4618      	mov	r0, r3
 800797a:	3728      	adds	r7, #40	@ 0x28
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}
 8007980:	200015d0 	.word	0x200015d0

08007984 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b088      	sub	sp, #32
 8007988:	af02      	add	r7, sp, #8
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800798e:	4b23      	ldr	r3, [pc, #140]	@ (8007a1c <prvProcessExpiredTimer+0x98>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	3304      	adds	r3, #4
 800799c:	4618      	mov	r0, r3
 800799e:	f7fd fdad 	bl	80054fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80079a8:	f003 0304 	and.w	r3, r3, #4
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d023      	beq.n	80079f8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	699a      	ldr	r2, [r3, #24]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	18d1      	adds	r1, r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	683a      	ldr	r2, [r7, #0]
 80079bc:	6978      	ldr	r0, [r7, #20]
 80079be:	f000 f8d5 	bl	8007b6c <prvInsertTimerInActiveList>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d020      	beq.n	8007a0a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80079c8:	2300      	movs	r3, #0
 80079ca:	9300      	str	r3, [sp, #0]
 80079cc:	2300      	movs	r3, #0
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	2100      	movs	r1, #0
 80079d2:	6978      	ldr	r0, [r7, #20]
 80079d4:	f7ff ff88 	bl	80078e8 <xTimerGenericCommand>
 80079d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d114      	bne.n	8007a0a <prvProcessExpiredTimer+0x86>
	__asm volatile
 80079e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079e4:	f383 8811 	msr	BASEPRI, r3
 80079e8:	f3bf 8f6f 	isb	sy
 80079ec:	f3bf 8f4f 	dsb	sy
 80079f0:	60fb      	str	r3, [r7, #12]
}
 80079f2:	bf00      	nop
 80079f4:	bf00      	nop
 80079f6:	e7fd      	b.n	80079f4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80079fe:	f023 0301 	bic.w	r3, r3, #1
 8007a02:	b2da      	uxtb	r2, r3
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	6a1b      	ldr	r3, [r3, #32]
 8007a0e:	6978      	ldr	r0, [r7, #20]
 8007a10:	4798      	blx	r3
}
 8007a12:	bf00      	nop
 8007a14:	3718      	adds	r7, #24
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	200015c8 	.word	0x200015c8

08007a20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a28:	f107 0308 	add.w	r3, r7, #8
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f000 f859 	bl	8007ae4 <prvGetNextExpireTime>
 8007a32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	4619      	mov	r1, r3
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f000 f805 	bl	8007a48 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007a3e:	f000 f8d7 	bl	8007bf0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a42:	bf00      	nop
 8007a44:	e7f0      	b.n	8007a28 <prvTimerTask+0x8>
	...

08007a48 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007a52:	f7ff f853 	bl	8006afc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a56:	f107 0308 	add.w	r3, r7, #8
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f000 f866 	bl	8007b2c <prvSampleTimeNow>
 8007a60:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d130      	bne.n	8007aca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10a      	bne.n	8007a84 <prvProcessTimerOrBlockTask+0x3c>
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d806      	bhi.n	8007a84 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007a76:	f7ff f84f 	bl	8006b18 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007a7a:	68f9      	ldr	r1, [r7, #12]
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f7ff ff81 	bl	8007984 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007a82:	e024      	b.n	8007ace <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d008      	beq.n	8007a9c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007a8a:	4b13      	ldr	r3, [pc, #76]	@ (8007ad8 <prvProcessTimerOrBlockTask+0x90>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d101      	bne.n	8007a98 <prvProcessTimerOrBlockTask+0x50>
 8007a94:	2301      	movs	r3, #1
 8007a96:	e000      	b.n	8007a9a <prvProcessTimerOrBlockTask+0x52>
 8007a98:	2300      	movs	r3, #0
 8007a9a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8007adc <prvProcessTimerOrBlockTask+0x94>)
 8007a9e:	6818      	ldr	r0, [r3, #0]
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	683a      	ldr	r2, [r7, #0]
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	f7fe fd87 	bl	80065bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007aae:	f7ff f833 	bl	8006b18 <xTaskResumeAll>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d10a      	bne.n	8007ace <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007ab8:	4b09      	ldr	r3, [pc, #36]	@ (8007ae0 <prvProcessTimerOrBlockTask+0x98>)
 8007aba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007abe:	601a      	str	r2, [r3, #0]
 8007ac0:	f3bf 8f4f 	dsb	sy
 8007ac4:	f3bf 8f6f 	isb	sy
}
 8007ac8:	e001      	b.n	8007ace <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007aca:	f7ff f825 	bl	8006b18 <xTaskResumeAll>
}
 8007ace:	bf00      	nop
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	200015cc 	.word	0x200015cc
 8007adc:	200015d0 	.word	0x200015d0
 8007ae0:	e000ed04 	.word	0xe000ed04

08007ae4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007aec:	4b0e      	ldr	r3, [pc, #56]	@ (8007b28 <prvGetNextExpireTime+0x44>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d101      	bne.n	8007afa <prvGetNextExpireTime+0x16>
 8007af6:	2201      	movs	r2, #1
 8007af8:	e000      	b.n	8007afc <prvGetNextExpireTime+0x18>
 8007afa:	2200      	movs	r2, #0
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d105      	bne.n	8007b14 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b08:	4b07      	ldr	r3, [pc, #28]	@ (8007b28 <prvGetNextExpireTime+0x44>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	60fb      	str	r3, [r7, #12]
 8007b12:	e001      	b.n	8007b18 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007b14:	2300      	movs	r3, #0
 8007b16:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007b18:	68fb      	ldr	r3, [r7, #12]
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3714      	adds	r7, #20
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	200015c8 	.word	0x200015c8

08007b2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007b34:	f7ff f88e 	bl	8006c54 <xTaskGetTickCount>
 8007b38:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8007b68 <prvSampleTimeNow+0x3c>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68fa      	ldr	r2, [r7, #12]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d205      	bcs.n	8007b50 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007b44:	f000 f93a 	bl	8007dbc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	601a      	str	r2, [r3, #0]
 8007b4e:	e002      	b.n	8007b56 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007b56:	4a04      	ldr	r2, [pc, #16]	@ (8007b68 <prvSampleTimeNow+0x3c>)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	200015d8 	.word	0x200015d8

08007b6c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b086      	sub	sp, #24
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	607a      	str	r2, [r7, #4]
 8007b78:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	68ba      	ldr	r2, [r7, #8]
 8007b82:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	68fa      	ldr	r2, [r7, #12]
 8007b88:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007b8a:	68ba      	ldr	r2, [r7, #8]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d812      	bhi.n	8007bb8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	1ad2      	subs	r2, r2, r3
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d302      	bcc.n	8007ba6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	617b      	str	r3, [r7, #20]
 8007ba4:	e01b      	b.n	8007bde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007ba6:	4b10      	ldr	r3, [pc, #64]	@ (8007be8 <prvInsertTimerInActiveList+0x7c>)
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	3304      	adds	r3, #4
 8007bae:	4619      	mov	r1, r3
 8007bb0:	4610      	mov	r0, r2
 8007bb2:	f7fd fc6a 	bl	800548a <vListInsert>
 8007bb6:	e012      	b.n	8007bde <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d206      	bcs.n	8007bce <prvInsertTimerInActiveList+0x62>
 8007bc0:	68ba      	ldr	r2, [r7, #8]
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d302      	bcc.n	8007bce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	617b      	str	r3, [r7, #20]
 8007bcc:	e007      	b.n	8007bde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007bce:	4b07      	ldr	r3, [pc, #28]	@ (8007bec <prvInsertTimerInActiveList+0x80>)
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	3304      	adds	r3, #4
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	4610      	mov	r0, r2
 8007bda:	f7fd fc56 	bl	800548a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007bde:	697b      	ldr	r3, [r7, #20]
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3718      	adds	r7, #24
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	200015cc 	.word	0x200015cc
 8007bec:	200015c8 	.word	0x200015c8

08007bf0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b08e      	sub	sp, #56	@ 0x38
 8007bf4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007bf6:	e0ce      	b.n	8007d96 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	da19      	bge.n	8007c32 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007bfe:	1d3b      	adds	r3, r7, #4
 8007c00:	3304      	adds	r3, #4
 8007c02:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d10b      	bne.n	8007c22 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c0e:	f383 8811 	msr	BASEPRI, r3
 8007c12:	f3bf 8f6f 	isb	sy
 8007c16:	f3bf 8f4f 	dsb	sy
 8007c1a:	61fb      	str	r3, [r7, #28]
}
 8007c1c:	bf00      	nop
 8007c1e:	bf00      	nop
 8007c20:	e7fd      	b.n	8007c1e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c28:	6850      	ldr	r0, [r2, #4]
 8007c2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c2c:	6892      	ldr	r2, [r2, #8]
 8007c2e:	4611      	mov	r1, r2
 8007c30:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f2c0 80ae 	blt.w	8007d96 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c40:	695b      	ldr	r3, [r3, #20]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d004      	beq.n	8007c50 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c48:	3304      	adds	r3, #4
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7fd fc56 	bl	80054fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c50:	463b      	mov	r3, r7
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7ff ff6a 	bl	8007b2c <prvSampleTimeNow>
 8007c58:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2b09      	cmp	r3, #9
 8007c5e:	f200 8097 	bhi.w	8007d90 <prvProcessReceivedCommands+0x1a0>
 8007c62:	a201      	add	r2, pc, #4	@ (adr r2, 8007c68 <prvProcessReceivedCommands+0x78>)
 8007c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c68:	08007c91 	.word	0x08007c91
 8007c6c:	08007c91 	.word	0x08007c91
 8007c70:	08007c91 	.word	0x08007c91
 8007c74:	08007d07 	.word	0x08007d07
 8007c78:	08007d1b 	.word	0x08007d1b
 8007c7c:	08007d67 	.word	0x08007d67
 8007c80:	08007c91 	.word	0x08007c91
 8007c84:	08007c91 	.word	0x08007c91
 8007c88:	08007d07 	.word	0x08007d07
 8007c8c:	08007d1b 	.word	0x08007d1b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c96:	f043 0301 	orr.w	r3, r3, #1
 8007c9a:	b2da      	uxtb	r2, r3
 8007c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007ca2:	68ba      	ldr	r2, [r7, #8]
 8007ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca6:	699b      	ldr	r3, [r3, #24]
 8007ca8:	18d1      	adds	r1, r2, r3
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cb0:	f7ff ff5c 	bl	8007b6c <prvInsertTimerInActiveList>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d06c      	beq.n	8007d94 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cbc:	6a1b      	ldr	r3, [r3, #32]
 8007cbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cc0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007cc8:	f003 0304 	and.w	r3, r3, #4
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d061      	beq.n	8007d94 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007cd0:	68ba      	ldr	r2, [r7, #8]
 8007cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cd4:	699b      	ldr	r3, [r3, #24]
 8007cd6:	441a      	add	r2, r3
 8007cd8:	2300      	movs	r3, #0
 8007cda:	9300      	str	r3, [sp, #0]
 8007cdc:	2300      	movs	r3, #0
 8007cde:	2100      	movs	r1, #0
 8007ce0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ce2:	f7ff fe01 	bl	80078e8 <xTimerGenericCommand>
 8007ce6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007ce8:	6a3b      	ldr	r3, [r7, #32]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d152      	bne.n	8007d94 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cf2:	f383 8811 	msr	BASEPRI, r3
 8007cf6:	f3bf 8f6f 	isb	sy
 8007cfa:	f3bf 8f4f 	dsb	sy
 8007cfe:	61bb      	str	r3, [r7, #24]
}
 8007d00:	bf00      	nop
 8007d02:	bf00      	nop
 8007d04:	e7fd      	b.n	8007d02 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d0c:	f023 0301 	bic.w	r3, r3, #1
 8007d10:	b2da      	uxtb	r2, r3
 8007d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d14:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007d18:	e03d      	b.n	8007d96 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d20:	f043 0301 	orr.w	r3, r3, #1
 8007d24:	b2da      	uxtb	r2, r3
 8007d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d28:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007d2c:	68ba      	ldr	r2, [r7, #8]
 8007d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d30:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d34:	699b      	ldr	r3, [r3, #24]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d10b      	bne.n	8007d52 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d3e:	f383 8811 	msr	BASEPRI, r3
 8007d42:	f3bf 8f6f 	isb	sy
 8007d46:	f3bf 8f4f 	dsb	sy
 8007d4a:	617b      	str	r3, [r7, #20]
}
 8007d4c:	bf00      	nop
 8007d4e:	bf00      	nop
 8007d50:	e7fd      	b.n	8007d4e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d54:	699a      	ldr	r2, [r3, #24]
 8007d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d58:	18d1      	adds	r1, r2, r3
 8007d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d60:	f7ff ff04 	bl	8007b6c <prvInsertTimerInActiveList>
					break;
 8007d64:	e017      	b.n	8007d96 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d6c:	f003 0302 	and.w	r3, r3, #2
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d103      	bne.n	8007d7c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007d74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d76:	f000 fc07 	bl	8008588 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007d7a:	e00c      	b.n	8007d96 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d7e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d82:	f023 0301 	bic.w	r3, r3, #1
 8007d86:	b2da      	uxtb	r2, r3
 8007d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007d8e:	e002      	b.n	8007d96 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007d90:	bf00      	nop
 8007d92:	e000      	b.n	8007d96 <prvProcessReceivedCommands+0x1a6>
					break;
 8007d94:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d96:	4b08      	ldr	r3, [pc, #32]	@ (8007db8 <prvProcessReceivedCommands+0x1c8>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	1d39      	adds	r1, r7, #4
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7fd ffba 	bl	8005d18 <xQueueReceive>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	f47f af26 	bne.w	8007bf8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007dac:	bf00      	nop
 8007dae:	bf00      	nop
 8007db0:	3730      	adds	r7, #48	@ 0x30
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	200015d0 	.word	0x200015d0

08007dbc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b088      	sub	sp, #32
 8007dc0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007dc2:	e049      	b.n	8007e58 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007dc4:	4b2e      	ldr	r3, [pc, #184]	@ (8007e80 <prvSwitchTimerLists+0xc4>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dce:	4b2c      	ldr	r3, [pc, #176]	@ (8007e80 <prvSwitchTimerLists+0xc4>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	68db      	ldr	r3, [r3, #12]
 8007dd6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	3304      	adds	r3, #4
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f7fd fb8d 	bl	80054fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6a1b      	ldr	r3, [r3, #32]
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007df0:	f003 0304 	and.w	r3, r3, #4
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d02f      	beq.n	8007e58 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	699b      	ldr	r3, [r3, #24]
 8007dfc:	693a      	ldr	r2, [r7, #16]
 8007dfe:	4413      	add	r3, r2
 8007e00:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007e02:	68ba      	ldr	r2, [r7, #8]
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d90e      	bls.n	8007e28 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	68ba      	ldr	r2, [r7, #8]
 8007e0e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	68fa      	ldr	r2, [r7, #12]
 8007e14:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e16:	4b1a      	ldr	r3, [pc, #104]	@ (8007e80 <prvSwitchTimerLists+0xc4>)
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	3304      	adds	r3, #4
 8007e1e:	4619      	mov	r1, r3
 8007e20:	4610      	mov	r0, r2
 8007e22:	f7fd fb32 	bl	800548a <vListInsert>
 8007e26:	e017      	b.n	8007e58 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e28:	2300      	movs	r3, #0
 8007e2a:	9300      	str	r3, [sp, #0]
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	693a      	ldr	r2, [r7, #16]
 8007e30:	2100      	movs	r1, #0
 8007e32:	68f8      	ldr	r0, [r7, #12]
 8007e34:	f7ff fd58 	bl	80078e8 <xTimerGenericCommand>
 8007e38:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d10b      	bne.n	8007e58 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e44:	f383 8811 	msr	BASEPRI, r3
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	603b      	str	r3, [r7, #0]
}
 8007e52:	bf00      	nop
 8007e54:	bf00      	nop
 8007e56:	e7fd      	b.n	8007e54 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e58:	4b09      	ldr	r3, [pc, #36]	@ (8007e80 <prvSwitchTimerLists+0xc4>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d1b0      	bne.n	8007dc4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007e62:	4b07      	ldr	r3, [pc, #28]	@ (8007e80 <prvSwitchTimerLists+0xc4>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007e68:	4b06      	ldr	r3, [pc, #24]	@ (8007e84 <prvSwitchTimerLists+0xc8>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a04      	ldr	r2, [pc, #16]	@ (8007e80 <prvSwitchTimerLists+0xc4>)
 8007e6e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007e70:	4a04      	ldr	r2, [pc, #16]	@ (8007e84 <prvSwitchTimerLists+0xc8>)
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	6013      	str	r3, [r2, #0]
}
 8007e76:	bf00      	nop
 8007e78:	3718      	adds	r7, #24
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	200015c8 	.word	0x200015c8
 8007e84:	200015cc 	.word	0x200015cc

08007e88 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007e8e:	f000 f98b 	bl	80081a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007e92:	4b15      	ldr	r3, [pc, #84]	@ (8007ee8 <prvCheckForValidListAndQueue+0x60>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d120      	bne.n	8007edc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007e9a:	4814      	ldr	r0, [pc, #80]	@ (8007eec <prvCheckForValidListAndQueue+0x64>)
 8007e9c:	f7fd faa4 	bl	80053e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007ea0:	4813      	ldr	r0, [pc, #76]	@ (8007ef0 <prvCheckForValidListAndQueue+0x68>)
 8007ea2:	f7fd faa1 	bl	80053e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007ea6:	4b13      	ldr	r3, [pc, #76]	@ (8007ef4 <prvCheckForValidListAndQueue+0x6c>)
 8007ea8:	4a10      	ldr	r2, [pc, #64]	@ (8007eec <prvCheckForValidListAndQueue+0x64>)
 8007eaa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007eac:	4b12      	ldr	r3, [pc, #72]	@ (8007ef8 <prvCheckForValidListAndQueue+0x70>)
 8007eae:	4a10      	ldr	r2, [pc, #64]	@ (8007ef0 <prvCheckForValidListAndQueue+0x68>)
 8007eb0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	9300      	str	r3, [sp, #0]
 8007eb6:	4b11      	ldr	r3, [pc, #68]	@ (8007efc <prvCheckForValidListAndQueue+0x74>)
 8007eb8:	4a11      	ldr	r2, [pc, #68]	@ (8007f00 <prvCheckForValidListAndQueue+0x78>)
 8007eba:	2110      	movs	r1, #16
 8007ebc:	200a      	movs	r0, #10
 8007ebe:	f7fd fbb1 	bl	8005624 <xQueueGenericCreateStatic>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	4a08      	ldr	r2, [pc, #32]	@ (8007ee8 <prvCheckForValidListAndQueue+0x60>)
 8007ec6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007ec8:	4b07      	ldr	r3, [pc, #28]	@ (8007ee8 <prvCheckForValidListAndQueue+0x60>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d005      	beq.n	8007edc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007ed0:	4b05      	ldr	r3, [pc, #20]	@ (8007ee8 <prvCheckForValidListAndQueue+0x60>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	490b      	ldr	r1, [pc, #44]	@ (8007f04 <prvCheckForValidListAndQueue+0x7c>)
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7fe fb1c 	bl	8006514 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007edc:	f000 f996 	bl	800820c <vPortExitCritical>
}
 8007ee0:	bf00      	nop
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	200015d0 	.word	0x200015d0
 8007eec:	200015a0 	.word	0x200015a0
 8007ef0:	200015b4 	.word	0x200015b4
 8007ef4:	200015c8 	.word	0x200015c8
 8007ef8:	200015cc 	.word	0x200015cc
 8007efc:	2000167c 	.word	0x2000167c
 8007f00:	200015dc 	.word	0x200015dc
 8007f04:	08009320 	.word	0x08009320

08007f08 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b08a      	sub	sp, #40	@ 0x28
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	607a      	str	r2, [r7, #4]
 8007f14:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8007f16:	f06f 0301 	mvn.w	r3, #1
 8007f1a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007f28:	4b06      	ldr	r3, [pc, #24]	@ (8007f44 <xTimerPendFunctionCallFromISR+0x3c>)
 8007f2a:	6818      	ldr	r0, [r3, #0]
 8007f2c:	f107 0114 	add.w	r1, r7, #20
 8007f30:	2300      	movs	r3, #0
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	f7fd fdc2 	bl	8005abc <xQueueGenericSendFromISR>
 8007f38:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3728      	adds	r7, #40	@ 0x28
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	200015d0 	.word	0x200015d0

08007f48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	3b04      	subs	r3, #4
 8007f58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007f60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	3b04      	subs	r3, #4
 8007f66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	f023 0201 	bic.w	r2, r3, #1
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	3b04      	subs	r3, #4
 8007f76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007f78:	4a0c      	ldr	r2, [pc, #48]	@ (8007fac <pxPortInitialiseStack+0x64>)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	3b14      	subs	r3, #20
 8007f82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	3b04      	subs	r3, #4
 8007f8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f06f 0202 	mvn.w	r2, #2
 8007f96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	3b20      	subs	r3, #32
 8007f9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3714      	adds	r7, #20
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr
 8007fac:	08007fb1 	.word	0x08007fb1

08007fb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b085      	sub	sp, #20
 8007fb4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007fba:	4b13      	ldr	r3, [pc, #76]	@ (8008008 <prvTaskExitError+0x58>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc2:	d00b      	beq.n	8007fdc <prvTaskExitError+0x2c>
	__asm volatile
 8007fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc8:	f383 8811 	msr	BASEPRI, r3
 8007fcc:	f3bf 8f6f 	isb	sy
 8007fd0:	f3bf 8f4f 	dsb	sy
 8007fd4:	60fb      	str	r3, [r7, #12]
}
 8007fd6:	bf00      	nop
 8007fd8:	bf00      	nop
 8007fda:	e7fd      	b.n	8007fd8 <prvTaskExitError+0x28>
	__asm volatile
 8007fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe0:	f383 8811 	msr	BASEPRI, r3
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	f3bf 8f4f 	dsb	sy
 8007fec:	60bb      	str	r3, [r7, #8]
}
 8007fee:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007ff0:	bf00      	nop
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d0fc      	beq.n	8007ff2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007ff8:	bf00      	nop
 8007ffa:	bf00      	nop
 8007ffc:	3714      	adds	r7, #20
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr
 8008006:	bf00      	nop
 8008008:	20000080 	.word	0x20000080
 800800c:	00000000 	.word	0x00000000

08008010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008010:	4b07      	ldr	r3, [pc, #28]	@ (8008030 <pxCurrentTCBConst2>)
 8008012:	6819      	ldr	r1, [r3, #0]
 8008014:	6808      	ldr	r0, [r1, #0]
 8008016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800801a:	f380 8809 	msr	PSP, r0
 800801e:	f3bf 8f6f 	isb	sy
 8008022:	f04f 0000 	mov.w	r0, #0
 8008026:	f380 8811 	msr	BASEPRI, r0
 800802a:	4770      	bx	lr
 800802c:	f3af 8000 	nop.w

08008030 <pxCurrentTCBConst2>:
 8008030:	20001098 	.word	0x20001098
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008034:	bf00      	nop
 8008036:	bf00      	nop

08008038 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008038:	4808      	ldr	r0, [pc, #32]	@ (800805c <prvPortStartFirstTask+0x24>)
 800803a:	6800      	ldr	r0, [r0, #0]
 800803c:	6800      	ldr	r0, [r0, #0]
 800803e:	f380 8808 	msr	MSP, r0
 8008042:	f04f 0000 	mov.w	r0, #0
 8008046:	f380 8814 	msr	CONTROL, r0
 800804a:	b662      	cpsie	i
 800804c:	b661      	cpsie	f
 800804e:	f3bf 8f4f 	dsb	sy
 8008052:	f3bf 8f6f 	isb	sy
 8008056:	df00      	svc	0
 8008058:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800805a:	bf00      	nop
 800805c:	e000ed08 	.word	0xe000ed08

08008060 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b086      	sub	sp, #24
 8008064:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008066:	4b47      	ldr	r3, [pc, #284]	@ (8008184 <xPortStartScheduler+0x124>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a47      	ldr	r2, [pc, #284]	@ (8008188 <xPortStartScheduler+0x128>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d10b      	bne.n	8008088 <xPortStartScheduler+0x28>
	__asm volatile
 8008070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008074:	f383 8811 	msr	BASEPRI, r3
 8008078:	f3bf 8f6f 	isb	sy
 800807c:	f3bf 8f4f 	dsb	sy
 8008080:	60fb      	str	r3, [r7, #12]
}
 8008082:	bf00      	nop
 8008084:	bf00      	nop
 8008086:	e7fd      	b.n	8008084 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008088:	4b3e      	ldr	r3, [pc, #248]	@ (8008184 <xPortStartScheduler+0x124>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a3f      	ldr	r2, [pc, #252]	@ (800818c <xPortStartScheduler+0x12c>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d10b      	bne.n	80080aa <xPortStartScheduler+0x4a>
	__asm volatile
 8008092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008096:	f383 8811 	msr	BASEPRI, r3
 800809a:	f3bf 8f6f 	isb	sy
 800809e:	f3bf 8f4f 	dsb	sy
 80080a2:	613b      	str	r3, [r7, #16]
}
 80080a4:	bf00      	nop
 80080a6:	bf00      	nop
 80080a8:	e7fd      	b.n	80080a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80080aa:	4b39      	ldr	r3, [pc, #228]	@ (8008190 <xPortStartScheduler+0x130>)
 80080ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	22ff      	movs	r2, #255	@ 0xff
 80080ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80080c4:	78fb      	ldrb	r3, [r7, #3]
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80080cc:	b2da      	uxtb	r2, r3
 80080ce:	4b31      	ldr	r3, [pc, #196]	@ (8008194 <xPortStartScheduler+0x134>)
 80080d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80080d2:	4b31      	ldr	r3, [pc, #196]	@ (8008198 <xPortStartScheduler+0x138>)
 80080d4:	2207      	movs	r2, #7
 80080d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80080d8:	e009      	b.n	80080ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80080da:	4b2f      	ldr	r3, [pc, #188]	@ (8008198 <xPortStartScheduler+0x138>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	3b01      	subs	r3, #1
 80080e0:	4a2d      	ldr	r2, [pc, #180]	@ (8008198 <xPortStartScheduler+0x138>)
 80080e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80080e4:	78fb      	ldrb	r3, [r7, #3]
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	005b      	lsls	r3, r3, #1
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80080ee:	78fb      	ldrb	r3, [r7, #3]
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080f6:	2b80      	cmp	r3, #128	@ 0x80
 80080f8:	d0ef      	beq.n	80080da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80080fa:	4b27      	ldr	r3, [pc, #156]	@ (8008198 <xPortStartScheduler+0x138>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f1c3 0307 	rsb	r3, r3, #7
 8008102:	2b04      	cmp	r3, #4
 8008104:	d00b      	beq.n	800811e <xPortStartScheduler+0xbe>
	__asm volatile
 8008106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800810a:	f383 8811 	msr	BASEPRI, r3
 800810e:	f3bf 8f6f 	isb	sy
 8008112:	f3bf 8f4f 	dsb	sy
 8008116:	60bb      	str	r3, [r7, #8]
}
 8008118:	bf00      	nop
 800811a:	bf00      	nop
 800811c:	e7fd      	b.n	800811a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800811e:	4b1e      	ldr	r3, [pc, #120]	@ (8008198 <xPortStartScheduler+0x138>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	021b      	lsls	r3, r3, #8
 8008124:	4a1c      	ldr	r2, [pc, #112]	@ (8008198 <xPortStartScheduler+0x138>)
 8008126:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008128:	4b1b      	ldr	r3, [pc, #108]	@ (8008198 <xPortStartScheduler+0x138>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008130:	4a19      	ldr	r2, [pc, #100]	@ (8008198 <xPortStartScheduler+0x138>)
 8008132:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	b2da      	uxtb	r2, r3
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800813c:	4b17      	ldr	r3, [pc, #92]	@ (800819c <xPortStartScheduler+0x13c>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a16      	ldr	r2, [pc, #88]	@ (800819c <xPortStartScheduler+0x13c>)
 8008142:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008146:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008148:	4b14      	ldr	r3, [pc, #80]	@ (800819c <xPortStartScheduler+0x13c>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a13      	ldr	r2, [pc, #76]	@ (800819c <xPortStartScheduler+0x13c>)
 800814e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008152:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008154:	f000 f8da 	bl	800830c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008158:	4b11      	ldr	r3, [pc, #68]	@ (80081a0 <xPortStartScheduler+0x140>)
 800815a:	2200      	movs	r2, #0
 800815c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800815e:	f000 f8f9 	bl	8008354 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008162:	4b10      	ldr	r3, [pc, #64]	@ (80081a4 <xPortStartScheduler+0x144>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a0f      	ldr	r2, [pc, #60]	@ (80081a4 <xPortStartScheduler+0x144>)
 8008168:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800816c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800816e:	f7ff ff63 	bl	8008038 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008172:	f7fe fe39 	bl	8006de8 <vTaskSwitchContext>
	prvTaskExitError();
 8008176:	f7ff ff1b 	bl	8007fb0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3718      	adds	r7, #24
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}
 8008184:	e000ed00 	.word	0xe000ed00
 8008188:	410fc271 	.word	0x410fc271
 800818c:	410fc270 	.word	0x410fc270
 8008190:	e000e400 	.word	0xe000e400
 8008194:	200016cc 	.word	0x200016cc
 8008198:	200016d0 	.word	0x200016d0
 800819c:	e000ed20 	.word	0xe000ed20
 80081a0:	20000080 	.word	0x20000080
 80081a4:	e000ef34 	.word	0xe000ef34

080081a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
	__asm volatile
 80081ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081b2:	f383 8811 	msr	BASEPRI, r3
 80081b6:	f3bf 8f6f 	isb	sy
 80081ba:	f3bf 8f4f 	dsb	sy
 80081be:	607b      	str	r3, [r7, #4]
}
 80081c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80081c2:	4b10      	ldr	r3, [pc, #64]	@ (8008204 <vPortEnterCritical+0x5c>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	3301      	adds	r3, #1
 80081c8:	4a0e      	ldr	r2, [pc, #56]	@ (8008204 <vPortEnterCritical+0x5c>)
 80081ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80081cc:	4b0d      	ldr	r3, [pc, #52]	@ (8008204 <vPortEnterCritical+0x5c>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d110      	bne.n	80081f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80081d4:	4b0c      	ldr	r3, [pc, #48]	@ (8008208 <vPortEnterCritical+0x60>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00b      	beq.n	80081f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80081de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e2:	f383 8811 	msr	BASEPRI, r3
 80081e6:	f3bf 8f6f 	isb	sy
 80081ea:	f3bf 8f4f 	dsb	sy
 80081ee:	603b      	str	r3, [r7, #0]
}
 80081f0:	bf00      	nop
 80081f2:	bf00      	nop
 80081f4:	e7fd      	b.n	80081f2 <vPortEnterCritical+0x4a>
	}
}
 80081f6:	bf00      	nop
 80081f8:	370c      	adds	r7, #12
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr
 8008202:	bf00      	nop
 8008204:	20000080 	.word	0x20000080
 8008208:	e000ed04 	.word	0xe000ed04

0800820c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008212:	4b12      	ldr	r3, [pc, #72]	@ (800825c <vPortExitCritical+0x50>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d10b      	bne.n	8008232 <vPortExitCritical+0x26>
	__asm volatile
 800821a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800821e:	f383 8811 	msr	BASEPRI, r3
 8008222:	f3bf 8f6f 	isb	sy
 8008226:	f3bf 8f4f 	dsb	sy
 800822a:	607b      	str	r3, [r7, #4]
}
 800822c:	bf00      	nop
 800822e:	bf00      	nop
 8008230:	e7fd      	b.n	800822e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008232:	4b0a      	ldr	r3, [pc, #40]	@ (800825c <vPortExitCritical+0x50>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	3b01      	subs	r3, #1
 8008238:	4a08      	ldr	r2, [pc, #32]	@ (800825c <vPortExitCritical+0x50>)
 800823a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800823c:	4b07      	ldr	r3, [pc, #28]	@ (800825c <vPortExitCritical+0x50>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d105      	bne.n	8008250 <vPortExitCritical+0x44>
 8008244:	2300      	movs	r3, #0
 8008246:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	f383 8811 	msr	BASEPRI, r3
}
 800824e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr
 800825c:	20000080 	.word	0x20000080

08008260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008260:	f3ef 8009 	mrs	r0, PSP
 8008264:	f3bf 8f6f 	isb	sy
 8008268:	4b15      	ldr	r3, [pc, #84]	@ (80082c0 <pxCurrentTCBConst>)
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	f01e 0f10 	tst.w	lr, #16
 8008270:	bf08      	it	eq
 8008272:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008276:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800827a:	6010      	str	r0, [r2, #0]
 800827c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008280:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008284:	f380 8811 	msr	BASEPRI, r0
 8008288:	f3bf 8f4f 	dsb	sy
 800828c:	f3bf 8f6f 	isb	sy
 8008290:	f7fe fdaa 	bl	8006de8 <vTaskSwitchContext>
 8008294:	f04f 0000 	mov.w	r0, #0
 8008298:	f380 8811 	msr	BASEPRI, r0
 800829c:	bc09      	pop	{r0, r3}
 800829e:	6819      	ldr	r1, [r3, #0]
 80082a0:	6808      	ldr	r0, [r1, #0]
 80082a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082a6:	f01e 0f10 	tst.w	lr, #16
 80082aa:	bf08      	it	eq
 80082ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80082b0:	f380 8809 	msr	PSP, r0
 80082b4:	f3bf 8f6f 	isb	sy
 80082b8:	4770      	bx	lr
 80082ba:	bf00      	nop
 80082bc:	f3af 8000 	nop.w

080082c0 <pxCurrentTCBConst>:
 80082c0:	20001098 	.word	0x20001098
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80082c4:	bf00      	nop
 80082c6:	bf00      	nop

080082c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
	__asm volatile
 80082ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082d2:	f383 8811 	msr	BASEPRI, r3
 80082d6:	f3bf 8f6f 	isb	sy
 80082da:	f3bf 8f4f 	dsb	sy
 80082de:	607b      	str	r3, [r7, #4]
}
 80082e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80082e2:	f7fe fcc7 	bl	8006c74 <xTaskIncrementTick>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d003      	beq.n	80082f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80082ec:	4b06      	ldr	r3, [pc, #24]	@ (8008308 <xPortSysTickHandler+0x40>)
 80082ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082f2:	601a      	str	r2, [r3, #0]
 80082f4:	2300      	movs	r3, #0
 80082f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	f383 8811 	msr	BASEPRI, r3
}
 80082fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008300:	bf00      	nop
 8008302:	3708      	adds	r7, #8
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}
 8008308:	e000ed04 	.word	0xe000ed04

0800830c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800830c:	b480      	push	{r7}
 800830e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008310:	4b0b      	ldr	r3, [pc, #44]	@ (8008340 <vPortSetupTimerInterrupt+0x34>)
 8008312:	2200      	movs	r2, #0
 8008314:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008316:	4b0b      	ldr	r3, [pc, #44]	@ (8008344 <vPortSetupTimerInterrupt+0x38>)
 8008318:	2200      	movs	r2, #0
 800831a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800831c:	4b0a      	ldr	r3, [pc, #40]	@ (8008348 <vPortSetupTimerInterrupt+0x3c>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a0a      	ldr	r2, [pc, #40]	@ (800834c <vPortSetupTimerInterrupt+0x40>)
 8008322:	fba2 2303 	umull	r2, r3, r2, r3
 8008326:	099b      	lsrs	r3, r3, #6
 8008328:	4a09      	ldr	r2, [pc, #36]	@ (8008350 <vPortSetupTimerInterrupt+0x44>)
 800832a:	3b01      	subs	r3, #1
 800832c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800832e:	4b04      	ldr	r3, [pc, #16]	@ (8008340 <vPortSetupTimerInterrupt+0x34>)
 8008330:	2207      	movs	r2, #7
 8008332:	601a      	str	r2, [r3, #0]
}
 8008334:	bf00      	nop
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr
 800833e:	bf00      	nop
 8008340:	e000e010 	.word	0xe000e010
 8008344:	e000e018 	.word	0xe000e018
 8008348:	20000074 	.word	0x20000074
 800834c:	10624dd3 	.word	0x10624dd3
 8008350:	e000e014 	.word	0xe000e014

08008354 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008354:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008364 <vPortEnableVFP+0x10>
 8008358:	6801      	ldr	r1, [r0, #0]
 800835a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800835e:	6001      	str	r1, [r0, #0]
 8008360:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008362:	bf00      	nop
 8008364:	e000ed88 	.word	0xe000ed88

08008368 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800836e:	f3ef 8305 	mrs	r3, IPSR
 8008372:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2b0f      	cmp	r3, #15
 8008378:	d915      	bls.n	80083a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800837a:	4a18      	ldr	r2, [pc, #96]	@ (80083dc <vPortValidateInterruptPriority+0x74>)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	4413      	add	r3, r2
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008384:	4b16      	ldr	r3, [pc, #88]	@ (80083e0 <vPortValidateInterruptPriority+0x78>)
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	7afa      	ldrb	r2, [r7, #11]
 800838a:	429a      	cmp	r2, r3
 800838c:	d20b      	bcs.n	80083a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800838e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008392:	f383 8811 	msr	BASEPRI, r3
 8008396:	f3bf 8f6f 	isb	sy
 800839a:	f3bf 8f4f 	dsb	sy
 800839e:	607b      	str	r3, [r7, #4]
}
 80083a0:	bf00      	nop
 80083a2:	bf00      	nop
 80083a4:	e7fd      	b.n	80083a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80083a6:	4b0f      	ldr	r3, [pc, #60]	@ (80083e4 <vPortValidateInterruptPriority+0x7c>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80083ae:	4b0e      	ldr	r3, [pc, #56]	@ (80083e8 <vPortValidateInterruptPriority+0x80>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d90b      	bls.n	80083ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80083b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ba:	f383 8811 	msr	BASEPRI, r3
 80083be:	f3bf 8f6f 	isb	sy
 80083c2:	f3bf 8f4f 	dsb	sy
 80083c6:	603b      	str	r3, [r7, #0]
}
 80083c8:	bf00      	nop
 80083ca:	bf00      	nop
 80083cc:	e7fd      	b.n	80083ca <vPortValidateInterruptPriority+0x62>
	}
 80083ce:	bf00      	nop
 80083d0:	3714      	adds	r7, #20
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	e000e3f0 	.word	0xe000e3f0
 80083e0:	200016cc 	.word	0x200016cc
 80083e4:	e000ed0c 	.word	0xe000ed0c
 80083e8:	200016d0 	.word	0x200016d0

080083ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b08a      	sub	sp, #40	@ 0x28
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80083f4:	2300      	movs	r3, #0
 80083f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80083f8:	f7fe fb80 	bl	8006afc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80083fc:	4b5c      	ldr	r3, [pc, #368]	@ (8008570 <pvPortMalloc+0x184>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d101      	bne.n	8008408 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008404:	f000 f924 	bl	8008650 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008408:	4b5a      	ldr	r3, [pc, #360]	@ (8008574 <pvPortMalloc+0x188>)
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4013      	ands	r3, r2
 8008410:	2b00      	cmp	r3, #0
 8008412:	f040 8095 	bne.w	8008540 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d01e      	beq.n	800845a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800841c:	2208      	movs	r2, #8
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4413      	add	r3, r2
 8008422:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f003 0307 	and.w	r3, r3, #7
 800842a:	2b00      	cmp	r3, #0
 800842c:	d015      	beq.n	800845a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f023 0307 	bic.w	r3, r3, #7
 8008434:	3308      	adds	r3, #8
 8008436:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f003 0307 	and.w	r3, r3, #7
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00b      	beq.n	800845a <pvPortMalloc+0x6e>
	__asm volatile
 8008442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008446:	f383 8811 	msr	BASEPRI, r3
 800844a:	f3bf 8f6f 	isb	sy
 800844e:	f3bf 8f4f 	dsb	sy
 8008452:	617b      	str	r3, [r7, #20]
}
 8008454:	bf00      	nop
 8008456:	bf00      	nop
 8008458:	e7fd      	b.n	8008456 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d06f      	beq.n	8008540 <pvPortMalloc+0x154>
 8008460:	4b45      	ldr	r3, [pc, #276]	@ (8008578 <pvPortMalloc+0x18c>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	429a      	cmp	r2, r3
 8008468:	d86a      	bhi.n	8008540 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800846a:	4b44      	ldr	r3, [pc, #272]	@ (800857c <pvPortMalloc+0x190>)
 800846c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800846e:	4b43      	ldr	r3, [pc, #268]	@ (800857c <pvPortMalloc+0x190>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008474:	e004      	b.n	8008480 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008478:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800847a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	429a      	cmp	r2, r3
 8008488:	d903      	bls.n	8008492 <pvPortMalloc+0xa6>
 800848a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d1f1      	bne.n	8008476 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008492:	4b37      	ldr	r3, [pc, #220]	@ (8008570 <pvPortMalloc+0x184>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008498:	429a      	cmp	r2, r3
 800849a:	d051      	beq.n	8008540 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800849c:	6a3b      	ldr	r3, [r7, #32]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2208      	movs	r2, #8
 80084a2:	4413      	add	r3, r2
 80084a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80084a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	6a3b      	ldr	r3, [r7, #32]
 80084ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80084ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b0:	685a      	ldr	r2, [r3, #4]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	1ad2      	subs	r2, r2, r3
 80084b6:	2308      	movs	r3, #8
 80084b8:	005b      	lsls	r3, r3, #1
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d920      	bls.n	8008500 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80084be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	4413      	add	r3, r2
 80084c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084c6:	69bb      	ldr	r3, [r7, #24]
 80084c8:	f003 0307 	and.w	r3, r3, #7
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d00b      	beq.n	80084e8 <pvPortMalloc+0xfc>
	__asm volatile
 80084d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084d4:	f383 8811 	msr	BASEPRI, r3
 80084d8:	f3bf 8f6f 	isb	sy
 80084dc:	f3bf 8f4f 	dsb	sy
 80084e0:	613b      	str	r3, [r7, #16]
}
 80084e2:	bf00      	nop
 80084e4:	bf00      	nop
 80084e6:	e7fd      	b.n	80084e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80084e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ea:	685a      	ldr	r2, [r3, #4]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	1ad2      	subs	r2, r2, r3
 80084f0:	69bb      	ldr	r3, [r7, #24]
 80084f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80084f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80084fa:	69b8      	ldr	r0, [r7, #24]
 80084fc:	f000 f90a 	bl	8008714 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008500:	4b1d      	ldr	r3, [pc, #116]	@ (8008578 <pvPortMalloc+0x18c>)
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	1ad3      	subs	r3, r2, r3
 800850a:	4a1b      	ldr	r2, [pc, #108]	@ (8008578 <pvPortMalloc+0x18c>)
 800850c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800850e:	4b1a      	ldr	r3, [pc, #104]	@ (8008578 <pvPortMalloc+0x18c>)
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	4b1b      	ldr	r3, [pc, #108]	@ (8008580 <pvPortMalloc+0x194>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	429a      	cmp	r2, r3
 8008518:	d203      	bcs.n	8008522 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800851a:	4b17      	ldr	r3, [pc, #92]	@ (8008578 <pvPortMalloc+0x18c>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a18      	ldr	r2, [pc, #96]	@ (8008580 <pvPortMalloc+0x194>)
 8008520:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008524:	685a      	ldr	r2, [r3, #4]
 8008526:	4b13      	ldr	r3, [pc, #76]	@ (8008574 <pvPortMalloc+0x188>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	431a      	orrs	r2, r3
 800852c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800852e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008532:	2200      	movs	r2, #0
 8008534:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008536:	4b13      	ldr	r3, [pc, #76]	@ (8008584 <pvPortMalloc+0x198>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	3301      	adds	r3, #1
 800853c:	4a11      	ldr	r2, [pc, #68]	@ (8008584 <pvPortMalloc+0x198>)
 800853e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008540:	f7fe faea 	bl	8006b18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	f003 0307 	and.w	r3, r3, #7
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00b      	beq.n	8008566 <pvPortMalloc+0x17a>
	__asm volatile
 800854e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008552:	f383 8811 	msr	BASEPRI, r3
 8008556:	f3bf 8f6f 	isb	sy
 800855a:	f3bf 8f4f 	dsb	sy
 800855e:	60fb      	str	r3, [r7, #12]
}
 8008560:	bf00      	nop
 8008562:	bf00      	nop
 8008564:	e7fd      	b.n	8008562 <pvPortMalloc+0x176>
	return pvReturn;
 8008566:	69fb      	ldr	r3, [r7, #28]
}
 8008568:	4618      	mov	r0, r3
 800856a:	3728      	adds	r7, #40	@ 0x28
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}
 8008570:	20008c0c 	.word	0x20008c0c
 8008574:	20008c20 	.word	0x20008c20
 8008578:	20008c10 	.word	0x20008c10
 800857c:	20008c04 	.word	0x20008c04
 8008580:	20008c14 	.word	0x20008c14
 8008584:	20008c18 	.word	0x20008c18

08008588 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b086      	sub	sp, #24
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d04f      	beq.n	800863a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800859a:	2308      	movs	r3, #8
 800859c:	425b      	negs	r3, r3
 800859e:	697a      	ldr	r2, [r7, #20]
 80085a0:	4413      	add	r3, r2
 80085a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	685a      	ldr	r2, [r3, #4]
 80085ac:	4b25      	ldr	r3, [pc, #148]	@ (8008644 <vPortFree+0xbc>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4013      	ands	r3, r2
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d10b      	bne.n	80085ce <vPortFree+0x46>
	__asm volatile
 80085b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ba:	f383 8811 	msr	BASEPRI, r3
 80085be:	f3bf 8f6f 	isb	sy
 80085c2:	f3bf 8f4f 	dsb	sy
 80085c6:	60fb      	str	r3, [r7, #12]
}
 80085c8:	bf00      	nop
 80085ca:	bf00      	nop
 80085cc:	e7fd      	b.n	80085ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00b      	beq.n	80085ee <vPortFree+0x66>
	__asm volatile
 80085d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085da:	f383 8811 	msr	BASEPRI, r3
 80085de:	f3bf 8f6f 	isb	sy
 80085e2:	f3bf 8f4f 	dsb	sy
 80085e6:	60bb      	str	r3, [r7, #8]
}
 80085e8:	bf00      	nop
 80085ea:	bf00      	nop
 80085ec:	e7fd      	b.n	80085ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	685a      	ldr	r2, [r3, #4]
 80085f2:	4b14      	ldr	r3, [pc, #80]	@ (8008644 <vPortFree+0xbc>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4013      	ands	r3, r2
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d01e      	beq.n	800863a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d11a      	bne.n	800863a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	685a      	ldr	r2, [r3, #4]
 8008608:	4b0e      	ldr	r3, [pc, #56]	@ (8008644 <vPortFree+0xbc>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	43db      	mvns	r3, r3
 800860e:	401a      	ands	r2, r3
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008614:	f7fe fa72 	bl	8006afc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	685a      	ldr	r2, [r3, #4]
 800861c:	4b0a      	ldr	r3, [pc, #40]	@ (8008648 <vPortFree+0xc0>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4413      	add	r3, r2
 8008622:	4a09      	ldr	r2, [pc, #36]	@ (8008648 <vPortFree+0xc0>)
 8008624:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008626:	6938      	ldr	r0, [r7, #16]
 8008628:	f000 f874 	bl	8008714 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800862c:	4b07      	ldr	r3, [pc, #28]	@ (800864c <vPortFree+0xc4>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	3301      	adds	r3, #1
 8008632:	4a06      	ldr	r2, [pc, #24]	@ (800864c <vPortFree+0xc4>)
 8008634:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008636:	f7fe fa6f 	bl	8006b18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800863a:	bf00      	nop
 800863c:	3718      	adds	r7, #24
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	20008c20 	.word	0x20008c20
 8008648:	20008c10 	.word	0x20008c10
 800864c:	20008c1c 	.word	0x20008c1c

08008650 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008650:	b480      	push	{r7}
 8008652:	b085      	sub	sp, #20
 8008654:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008656:	f247 5330 	movw	r3, #30000	@ 0x7530
 800865a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800865c:	4b27      	ldr	r3, [pc, #156]	@ (80086fc <prvHeapInit+0xac>)
 800865e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f003 0307 	and.w	r3, r3, #7
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00c      	beq.n	8008684 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	3307      	adds	r3, #7
 800866e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f023 0307 	bic.w	r3, r3, #7
 8008676:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008678:	68ba      	ldr	r2, [r7, #8]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	1ad3      	subs	r3, r2, r3
 800867e:	4a1f      	ldr	r2, [pc, #124]	@ (80086fc <prvHeapInit+0xac>)
 8008680:	4413      	add	r3, r2
 8008682:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008688:	4a1d      	ldr	r2, [pc, #116]	@ (8008700 <prvHeapInit+0xb0>)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800868e:	4b1c      	ldr	r3, [pc, #112]	@ (8008700 <prvHeapInit+0xb0>)
 8008690:	2200      	movs	r2, #0
 8008692:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	68ba      	ldr	r2, [r7, #8]
 8008698:	4413      	add	r3, r2
 800869a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800869c:	2208      	movs	r2, #8
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	1a9b      	subs	r3, r3, r2
 80086a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f023 0307 	bic.w	r3, r3, #7
 80086aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	4a15      	ldr	r2, [pc, #84]	@ (8008704 <prvHeapInit+0xb4>)
 80086b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80086b2:	4b14      	ldr	r3, [pc, #80]	@ (8008704 <prvHeapInit+0xb4>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2200      	movs	r2, #0
 80086b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80086ba:	4b12      	ldr	r3, [pc, #72]	@ (8008704 <prvHeapInit+0xb4>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2200      	movs	r2, #0
 80086c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	1ad2      	subs	r2, r2, r3
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80086d0:	4b0c      	ldr	r3, [pc, #48]	@ (8008704 <prvHeapInit+0xb4>)
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	4a0a      	ldr	r2, [pc, #40]	@ (8008708 <prvHeapInit+0xb8>)
 80086de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	4a09      	ldr	r2, [pc, #36]	@ (800870c <prvHeapInit+0xbc>)
 80086e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80086e8:	4b09      	ldr	r3, [pc, #36]	@ (8008710 <prvHeapInit+0xc0>)
 80086ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80086ee:	601a      	str	r2, [r3, #0]
}
 80086f0:	bf00      	nop
 80086f2:	3714      	adds	r7, #20
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr
 80086fc:	200016d4 	.word	0x200016d4
 8008700:	20008c04 	.word	0x20008c04
 8008704:	20008c0c 	.word	0x20008c0c
 8008708:	20008c14 	.word	0x20008c14
 800870c:	20008c10 	.word	0x20008c10
 8008710:	20008c20 	.word	0x20008c20

08008714 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008714:	b480      	push	{r7}
 8008716:	b085      	sub	sp, #20
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800871c:	4b28      	ldr	r3, [pc, #160]	@ (80087c0 <prvInsertBlockIntoFreeList+0xac>)
 800871e:	60fb      	str	r3, [r7, #12]
 8008720:	e002      	b.n	8008728 <prvInsertBlockIntoFreeList+0x14>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	60fb      	str	r3, [r7, #12]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	429a      	cmp	r2, r3
 8008730:	d8f7      	bhi.n	8008722 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	68ba      	ldr	r2, [r7, #8]
 800873c:	4413      	add	r3, r2
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	429a      	cmp	r2, r3
 8008742:	d108      	bne.n	8008756 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	685a      	ldr	r2, [r3, #4]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	441a      	add	r2, r3
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	68ba      	ldr	r2, [r7, #8]
 8008760:	441a      	add	r2, r3
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	429a      	cmp	r2, r3
 8008768:	d118      	bne.n	800879c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	4b15      	ldr	r3, [pc, #84]	@ (80087c4 <prvInsertBlockIntoFreeList+0xb0>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	429a      	cmp	r2, r3
 8008774:	d00d      	beq.n	8008792 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	685a      	ldr	r2, [r3, #4]
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	441a      	add	r2, r3
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	601a      	str	r2, [r3, #0]
 8008790:	e008      	b.n	80087a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008792:	4b0c      	ldr	r3, [pc, #48]	@ (80087c4 <prvInsertBlockIntoFreeList+0xb0>)
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	601a      	str	r2, [r3, #0]
 800879a:	e003      	b.n	80087a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80087a4:	68fa      	ldr	r2, [r7, #12]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d002      	beq.n	80087b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087b2:	bf00      	nop
 80087b4:	3714      	adds	r7, #20
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr
 80087be:	bf00      	nop
 80087c0:	20008c04 	.word	0x20008c04
 80087c4:	20008c0c 	.word	0x20008c0c

080087c8 <_vsniprintf_r>:
 80087c8:	b530      	push	{r4, r5, lr}
 80087ca:	4614      	mov	r4, r2
 80087cc:	2c00      	cmp	r4, #0
 80087ce:	b09b      	sub	sp, #108	@ 0x6c
 80087d0:	4605      	mov	r5, r0
 80087d2:	461a      	mov	r2, r3
 80087d4:	da05      	bge.n	80087e2 <_vsniprintf_r+0x1a>
 80087d6:	238b      	movs	r3, #139	@ 0x8b
 80087d8:	6003      	str	r3, [r0, #0]
 80087da:	f04f 30ff 	mov.w	r0, #4294967295
 80087de:	b01b      	add	sp, #108	@ 0x6c
 80087e0:	bd30      	pop	{r4, r5, pc}
 80087e2:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80087e6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80087ea:	f04f 0300 	mov.w	r3, #0
 80087ee:	9319      	str	r3, [sp, #100]	@ 0x64
 80087f0:	bf14      	ite	ne
 80087f2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80087f6:	4623      	moveq	r3, r4
 80087f8:	9302      	str	r3, [sp, #8]
 80087fa:	9305      	str	r3, [sp, #20]
 80087fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008800:	9100      	str	r1, [sp, #0]
 8008802:	9104      	str	r1, [sp, #16]
 8008804:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008808:	4669      	mov	r1, sp
 800880a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800880c:	f000 fa0c 	bl	8008c28 <_svfiprintf_r>
 8008810:	1c43      	adds	r3, r0, #1
 8008812:	bfbc      	itt	lt
 8008814:	238b      	movlt	r3, #139	@ 0x8b
 8008816:	602b      	strlt	r3, [r5, #0]
 8008818:	2c00      	cmp	r4, #0
 800881a:	d0e0      	beq.n	80087de <_vsniprintf_r+0x16>
 800881c:	9b00      	ldr	r3, [sp, #0]
 800881e:	2200      	movs	r2, #0
 8008820:	701a      	strb	r2, [r3, #0]
 8008822:	e7dc      	b.n	80087de <_vsniprintf_r+0x16>

08008824 <vsniprintf>:
 8008824:	b507      	push	{r0, r1, r2, lr}
 8008826:	9300      	str	r3, [sp, #0]
 8008828:	4613      	mov	r3, r2
 800882a:	460a      	mov	r2, r1
 800882c:	4601      	mov	r1, r0
 800882e:	4803      	ldr	r0, [pc, #12]	@ (800883c <vsniprintf+0x18>)
 8008830:	6800      	ldr	r0, [r0, #0]
 8008832:	f7ff ffc9 	bl	80087c8 <_vsniprintf_r>
 8008836:	b003      	add	sp, #12
 8008838:	f85d fb04 	ldr.w	pc, [sp], #4
 800883c:	20000084 	.word	0x20000084

08008840 <memset>:
 8008840:	4402      	add	r2, r0
 8008842:	4603      	mov	r3, r0
 8008844:	4293      	cmp	r3, r2
 8008846:	d100      	bne.n	800884a <memset+0xa>
 8008848:	4770      	bx	lr
 800884a:	f803 1b01 	strb.w	r1, [r3], #1
 800884e:	e7f9      	b.n	8008844 <memset+0x4>

08008850 <_reclaim_reent>:
 8008850:	4b2d      	ldr	r3, [pc, #180]	@ (8008908 <_reclaim_reent+0xb8>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4283      	cmp	r3, r0
 8008856:	b570      	push	{r4, r5, r6, lr}
 8008858:	4604      	mov	r4, r0
 800885a:	d053      	beq.n	8008904 <_reclaim_reent+0xb4>
 800885c:	69c3      	ldr	r3, [r0, #28]
 800885e:	b31b      	cbz	r3, 80088a8 <_reclaim_reent+0x58>
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	b163      	cbz	r3, 800887e <_reclaim_reent+0x2e>
 8008864:	2500      	movs	r5, #0
 8008866:	69e3      	ldr	r3, [r4, #28]
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	5959      	ldr	r1, [r3, r5]
 800886c:	b9b1      	cbnz	r1, 800889c <_reclaim_reent+0x4c>
 800886e:	3504      	adds	r5, #4
 8008870:	2d80      	cmp	r5, #128	@ 0x80
 8008872:	d1f8      	bne.n	8008866 <_reclaim_reent+0x16>
 8008874:	69e3      	ldr	r3, [r4, #28]
 8008876:	4620      	mov	r0, r4
 8008878:	68d9      	ldr	r1, [r3, #12]
 800887a:	f000 f881 	bl	8008980 <_free_r>
 800887e:	69e3      	ldr	r3, [r4, #28]
 8008880:	6819      	ldr	r1, [r3, #0]
 8008882:	b111      	cbz	r1, 800888a <_reclaim_reent+0x3a>
 8008884:	4620      	mov	r0, r4
 8008886:	f000 f87b 	bl	8008980 <_free_r>
 800888a:	69e3      	ldr	r3, [r4, #28]
 800888c:	689d      	ldr	r5, [r3, #8]
 800888e:	b15d      	cbz	r5, 80088a8 <_reclaim_reent+0x58>
 8008890:	4629      	mov	r1, r5
 8008892:	4620      	mov	r0, r4
 8008894:	682d      	ldr	r5, [r5, #0]
 8008896:	f000 f873 	bl	8008980 <_free_r>
 800889a:	e7f8      	b.n	800888e <_reclaim_reent+0x3e>
 800889c:	680e      	ldr	r6, [r1, #0]
 800889e:	4620      	mov	r0, r4
 80088a0:	f000 f86e 	bl	8008980 <_free_r>
 80088a4:	4631      	mov	r1, r6
 80088a6:	e7e1      	b.n	800886c <_reclaim_reent+0x1c>
 80088a8:	6961      	ldr	r1, [r4, #20]
 80088aa:	b111      	cbz	r1, 80088b2 <_reclaim_reent+0x62>
 80088ac:	4620      	mov	r0, r4
 80088ae:	f000 f867 	bl	8008980 <_free_r>
 80088b2:	69e1      	ldr	r1, [r4, #28]
 80088b4:	b111      	cbz	r1, 80088bc <_reclaim_reent+0x6c>
 80088b6:	4620      	mov	r0, r4
 80088b8:	f000 f862 	bl	8008980 <_free_r>
 80088bc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80088be:	b111      	cbz	r1, 80088c6 <_reclaim_reent+0x76>
 80088c0:	4620      	mov	r0, r4
 80088c2:	f000 f85d 	bl	8008980 <_free_r>
 80088c6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088c8:	b111      	cbz	r1, 80088d0 <_reclaim_reent+0x80>
 80088ca:	4620      	mov	r0, r4
 80088cc:	f000 f858 	bl	8008980 <_free_r>
 80088d0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80088d2:	b111      	cbz	r1, 80088da <_reclaim_reent+0x8a>
 80088d4:	4620      	mov	r0, r4
 80088d6:	f000 f853 	bl	8008980 <_free_r>
 80088da:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80088dc:	b111      	cbz	r1, 80088e4 <_reclaim_reent+0x94>
 80088de:	4620      	mov	r0, r4
 80088e0:	f000 f84e 	bl	8008980 <_free_r>
 80088e4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80088e6:	b111      	cbz	r1, 80088ee <_reclaim_reent+0x9e>
 80088e8:	4620      	mov	r0, r4
 80088ea:	f000 f849 	bl	8008980 <_free_r>
 80088ee:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80088f0:	b111      	cbz	r1, 80088f8 <_reclaim_reent+0xa8>
 80088f2:	4620      	mov	r0, r4
 80088f4:	f000 f844 	bl	8008980 <_free_r>
 80088f8:	6a23      	ldr	r3, [r4, #32]
 80088fa:	b11b      	cbz	r3, 8008904 <_reclaim_reent+0xb4>
 80088fc:	4620      	mov	r0, r4
 80088fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008902:	4718      	bx	r3
 8008904:	bd70      	pop	{r4, r5, r6, pc}
 8008906:	bf00      	nop
 8008908:	20000084 	.word	0x20000084

0800890c <__errno>:
 800890c:	4b01      	ldr	r3, [pc, #4]	@ (8008914 <__errno+0x8>)
 800890e:	6818      	ldr	r0, [r3, #0]
 8008910:	4770      	bx	lr
 8008912:	bf00      	nop
 8008914:	20000084 	.word	0x20000084

08008918 <__libc_init_array>:
 8008918:	b570      	push	{r4, r5, r6, lr}
 800891a:	4d0d      	ldr	r5, [pc, #52]	@ (8008950 <__libc_init_array+0x38>)
 800891c:	4c0d      	ldr	r4, [pc, #52]	@ (8008954 <__libc_init_array+0x3c>)
 800891e:	1b64      	subs	r4, r4, r5
 8008920:	10a4      	asrs	r4, r4, #2
 8008922:	2600      	movs	r6, #0
 8008924:	42a6      	cmp	r6, r4
 8008926:	d109      	bne.n	800893c <__libc_init_array+0x24>
 8008928:	4d0b      	ldr	r5, [pc, #44]	@ (8008958 <__libc_init_array+0x40>)
 800892a:	4c0c      	ldr	r4, [pc, #48]	@ (800895c <__libc_init_array+0x44>)
 800892c:	f000 fc64 	bl	80091f8 <_init>
 8008930:	1b64      	subs	r4, r4, r5
 8008932:	10a4      	asrs	r4, r4, #2
 8008934:	2600      	movs	r6, #0
 8008936:	42a6      	cmp	r6, r4
 8008938:	d105      	bne.n	8008946 <__libc_init_array+0x2e>
 800893a:	bd70      	pop	{r4, r5, r6, pc}
 800893c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008940:	4798      	blx	r3
 8008942:	3601      	adds	r6, #1
 8008944:	e7ee      	b.n	8008924 <__libc_init_array+0xc>
 8008946:	f855 3b04 	ldr.w	r3, [r5], #4
 800894a:	4798      	blx	r3
 800894c:	3601      	adds	r6, #1
 800894e:	e7f2      	b.n	8008936 <__libc_init_array+0x1e>
 8008950:	080093a8 	.word	0x080093a8
 8008954:	080093a8 	.word	0x080093a8
 8008958:	080093a8 	.word	0x080093a8
 800895c:	080093ac 	.word	0x080093ac

08008960 <__retarget_lock_acquire_recursive>:
 8008960:	4770      	bx	lr

08008962 <__retarget_lock_release_recursive>:
 8008962:	4770      	bx	lr

08008964 <memcpy>:
 8008964:	440a      	add	r2, r1
 8008966:	4291      	cmp	r1, r2
 8008968:	f100 33ff 	add.w	r3, r0, #4294967295
 800896c:	d100      	bne.n	8008970 <memcpy+0xc>
 800896e:	4770      	bx	lr
 8008970:	b510      	push	{r4, lr}
 8008972:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008976:	f803 4f01 	strb.w	r4, [r3, #1]!
 800897a:	4291      	cmp	r1, r2
 800897c:	d1f9      	bne.n	8008972 <memcpy+0xe>
 800897e:	bd10      	pop	{r4, pc}

08008980 <_free_r>:
 8008980:	b538      	push	{r3, r4, r5, lr}
 8008982:	4605      	mov	r5, r0
 8008984:	2900      	cmp	r1, #0
 8008986:	d041      	beq.n	8008a0c <_free_r+0x8c>
 8008988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800898c:	1f0c      	subs	r4, r1, #4
 800898e:	2b00      	cmp	r3, #0
 8008990:	bfb8      	it	lt
 8008992:	18e4      	addlt	r4, r4, r3
 8008994:	f000 f8e0 	bl	8008b58 <__malloc_lock>
 8008998:	4a1d      	ldr	r2, [pc, #116]	@ (8008a10 <_free_r+0x90>)
 800899a:	6813      	ldr	r3, [r2, #0]
 800899c:	b933      	cbnz	r3, 80089ac <_free_r+0x2c>
 800899e:	6063      	str	r3, [r4, #4]
 80089a0:	6014      	str	r4, [r2, #0]
 80089a2:	4628      	mov	r0, r5
 80089a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089a8:	f000 b8dc 	b.w	8008b64 <__malloc_unlock>
 80089ac:	42a3      	cmp	r3, r4
 80089ae:	d908      	bls.n	80089c2 <_free_r+0x42>
 80089b0:	6820      	ldr	r0, [r4, #0]
 80089b2:	1821      	adds	r1, r4, r0
 80089b4:	428b      	cmp	r3, r1
 80089b6:	bf01      	itttt	eq
 80089b8:	6819      	ldreq	r1, [r3, #0]
 80089ba:	685b      	ldreq	r3, [r3, #4]
 80089bc:	1809      	addeq	r1, r1, r0
 80089be:	6021      	streq	r1, [r4, #0]
 80089c0:	e7ed      	b.n	800899e <_free_r+0x1e>
 80089c2:	461a      	mov	r2, r3
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	b10b      	cbz	r3, 80089cc <_free_r+0x4c>
 80089c8:	42a3      	cmp	r3, r4
 80089ca:	d9fa      	bls.n	80089c2 <_free_r+0x42>
 80089cc:	6811      	ldr	r1, [r2, #0]
 80089ce:	1850      	adds	r0, r2, r1
 80089d0:	42a0      	cmp	r0, r4
 80089d2:	d10b      	bne.n	80089ec <_free_r+0x6c>
 80089d4:	6820      	ldr	r0, [r4, #0]
 80089d6:	4401      	add	r1, r0
 80089d8:	1850      	adds	r0, r2, r1
 80089da:	4283      	cmp	r3, r0
 80089dc:	6011      	str	r1, [r2, #0]
 80089de:	d1e0      	bne.n	80089a2 <_free_r+0x22>
 80089e0:	6818      	ldr	r0, [r3, #0]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	6053      	str	r3, [r2, #4]
 80089e6:	4408      	add	r0, r1
 80089e8:	6010      	str	r0, [r2, #0]
 80089ea:	e7da      	b.n	80089a2 <_free_r+0x22>
 80089ec:	d902      	bls.n	80089f4 <_free_r+0x74>
 80089ee:	230c      	movs	r3, #12
 80089f0:	602b      	str	r3, [r5, #0]
 80089f2:	e7d6      	b.n	80089a2 <_free_r+0x22>
 80089f4:	6820      	ldr	r0, [r4, #0]
 80089f6:	1821      	adds	r1, r4, r0
 80089f8:	428b      	cmp	r3, r1
 80089fa:	bf04      	itt	eq
 80089fc:	6819      	ldreq	r1, [r3, #0]
 80089fe:	685b      	ldreq	r3, [r3, #4]
 8008a00:	6063      	str	r3, [r4, #4]
 8008a02:	bf04      	itt	eq
 8008a04:	1809      	addeq	r1, r1, r0
 8008a06:	6021      	streq	r1, [r4, #0]
 8008a08:	6054      	str	r4, [r2, #4]
 8008a0a:	e7ca      	b.n	80089a2 <_free_r+0x22>
 8008a0c:	bd38      	pop	{r3, r4, r5, pc}
 8008a0e:	bf00      	nop
 8008a10:	20008d68 	.word	0x20008d68

08008a14 <sbrk_aligned>:
 8008a14:	b570      	push	{r4, r5, r6, lr}
 8008a16:	4e0f      	ldr	r6, [pc, #60]	@ (8008a54 <sbrk_aligned+0x40>)
 8008a18:	460c      	mov	r4, r1
 8008a1a:	6831      	ldr	r1, [r6, #0]
 8008a1c:	4605      	mov	r5, r0
 8008a1e:	b911      	cbnz	r1, 8008a26 <sbrk_aligned+0x12>
 8008a20:	f000 fba4 	bl	800916c <_sbrk_r>
 8008a24:	6030      	str	r0, [r6, #0]
 8008a26:	4621      	mov	r1, r4
 8008a28:	4628      	mov	r0, r5
 8008a2a:	f000 fb9f 	bl	800916c <_sbrk_r>
 8008a2e:	1c43      	adds	r3, r0, #1
 8008a30:	d103      	bne.n	8008a3a <sbrk_aligned+0x26>
 8008a32:	f04f 34ff 	mov.w	r4, #4294967295
 8008a36:	4620      	mov	r0, r4
 8008a38:	bd70      	pop	{r4, r5, r6, pc}
 8008a3a:	1cc4      	adds	r4, r0, #3
 8008a3c:	f024 0403 	bic.w	r4, r4, #3
 8008a40:	42a0      	cmp	r0, r4
 8008a42:	d0f8      	beq.n	8008a36 <sbrk_aligned+0x22>
 8008a44:	1a21      	subs	r1, r4, r0
 8008a46:	4628      	mov	r0, r5
 8008a48:	f000 fb90 	bl	800916c <_sbrk_r>
 8008a4c:	3001      	adds	r0, #1
 8008a4e:	d1f2      	bne.n	8008a36 <sbrk_aligned+0x22>
 8008a50:	e7ef      	b.n	8008a32 <sbrk_aligned+0x1e>
 8008a52:	bf00      	nop
 8008a54:	20008d64 	.word	0x20008d64

08008a58 <_malloc_r>:
 8008a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a5c:	1ccd      	adds	r5, r1, #3
 8008a5e:	f025 0503 	bic.w	r5, r5, #3
 8008a62:	3508      	adds	r5, #8
 8008a64:	2d0c      	cmp	r5, #12
 8008a66:	bf38      	it	cc
 8008a68:	250c      	movcc	r5, #12
 8008a6a:	2d00      	cmp	r5, #0
 8008a6c:	4606      	mov	r6, r0
 8008a6e:	db01      	blt.n	8008a74 <_malloc_r+0x1c>
 8008a70:	42a9      	cmp	r1, r5
 8008a72:	d904      	bls.n	8008a7e <_malloc_r+0x26>
 8008a74:	230c      	movs	r3, #12
 8008a76:	6033      	str	r3, [r6, #0]
 8008a78:	2000      	movs	r0, #0
 8008a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b54 <_malloc_r+0xfc>
 8008a82:	f000 f869 	bl	8008b58 <__malloc_lock>
 8008a86:	f8d8 3000 	ldr.w	r3, [r8]
 8008a8a:	461c      	mov	r4, r3
 8008a8c:	bb44      	cbnz	r4, 8008ae0 <_malloc_r+0x88>
 8008a8e:	4629      	mov	r1, r5
 8008a90:	4630      	mov	r0, r6
 8008a92:	f7ff ffbf 	bl	8008a14 <sbrk_aligned>
 8008a96:	1c43      	adds	r3, r0, #1
 8008a98:	4604      	mov	r4, r0
 8008a9a:	d158      	bne.n	8008b4e <_malloc_r+0xf6>
 8008a9c:	f8d8 4000 	ldr.w	r4, [r8]
 8008aa0:	4627      	mov	r7, r4
 8008aa2:	2f00      	cmp	r7, #0
 8008aa4:	d143      	bne.n	8008b2e <_malloc_r+0xd6>
 8008aa6:	2c00      	cmp	r4, #0
 8008aa8:	d04b      	beq.n	8008b42 <_malloc_r+0xea>
 8008aaa:	6823      	ldr	r3, [r4, #0]
 8008aac:	4639      	mov	r1, r7
 8008aae:	4630      	mov	r0, r6
 8008ab0:	eb04 0903 	add.w	r9, r4, r3
 8008ab4:	f000 fb5a 	bl	800916c <_sbrk_r>
 8008ab8:	4581      	cmp	r9, r0
 8008aba:	d142      	bne.n	8008b42 <_malloc_r+0xea>
 8008abc:	6821      	ldr	r1, [r4, #0]
 8008abe:	1a6d      	subs	r5, r5, r1
 8008ac0:	4629      	mov	r1, r5
 8008ac2:	4630      	mov	r0, r6
 8008ac4:	f7ff ffa6 	bl	8008a14 <sbrk_aligned>
 8008ac8:	3001      	adds	r0, #1
 8008aca:	d03a      	beq.n	8008b42 <_malloc_r+0xea>
 8008acc:	6823      	ldr	r3, [r4, #0]
 8008ace:	442b      	add	r3, r5
 8008ad0:	6023      	str	r3, [r4, #0]
 8008ad2:	f8d8 3000 	ldr.w	r3, [r8]
 8008ad6:	685a      	ldr	r2, [r3, #4]
 8008ad8:	bb62      	cbnz	r2, 8008b34 <_malloc_r+0xdc>
 8008ada:	f8c8 7000 	str.w	r7, [r8]
 8008ade:	e00f      	b.n	8008b00 <_malloc_r+0xa8>
 8008ae0:	6822      	ldr	r2, [r4, #0]
 8008ae2:	1b52      	subs	r2, r2, r5
 8008ae4:	d420      	bmi.n	8008b28 <_malloc_r+0xd0>
 8008ae6:	2a0b      	cmp	r2, #11
 8008ae8:	d917      	bls.n	8008b1a <_malloc_r+0xc2>
 8008aea:	1961      	adds	r1, r4, r5
 8008aec:	42a3      	cmp	r3, r4
 8008aee:	6025      	str	r5, [r4, #0]
 8008af0:	bf18      	it	ne
 8008af2:	6059      	strne	r1, [r3, #4]
 8008af4:	6863      	ldr	r3, [r4, #4]
 8008af6:	bf08      	it	eq
 8008af8:	f8c8 1000 	streq.w	r1, [r8]
 8008afc:	5162      	str	r2, [r4, r5]
 8008afe:	604b      	str	r3, [r1, #4]
 8008b00:	4630      	mov	r0, r6
 8008b02:	f000 f82f 	bl	8008b64 <__malloc_unlock>
 8008b06:	f104 000b 	add.w	r0, r4, #11
 8008b0a:	1d23      	adds	r3, r4, #4
 8008b0c:	f020 0007 	bic.w	r0, r0, #7
 8008b10:	1ac2      	subs	r2, r0, r3
 8008b12:	bf1c      	itt	ne
 8008b14:	1a1b      	subne	r3, r3, r0
 8008b16:	50a3      	strne	r3, [r4, r2]
 8008b18:	e7af      	b.n	8008a7a <_malloc_r+0x22>
 8008b1a:	6862      	ldr	r2, [r4, #4]
 8008b1c:	42a3      	cmp	r3, r4
 8008b1e:	bf0c      	ite	eq
 8008b20:	f8c8 2000 	streq.w	r2, [r8]
 8008b24:	605a      	strne	r2, [r3, #4]
 8008b26:	e7eb      	b.n	8008b00 <_malloc_r+0xa8>
 8008b28:	4623      	mov	r3, r4
 8008b2a:	6864      	ldr	r4, [r4, #4]
 8008b2c:	e7ae      	b.n	8008a8c <_malloc_r+0x34>
 8008b2e:	463c      	mov	r4, r7
 8008b30:	687f      	ldr	r7, [r7, #4]
 8008b32:	e7b6      	b.n	8008aa2 <_malloc_r+0x4a>
 8008b34:	461a      	mov	r2, r3
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	42a3      	cmp	r3, r4
 8008b3a:	d1fb      	bne.n	8008b34 <_malloc_r+0xdc>
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	6053      	str	r3, [r2, #4]
 8008b40:	e7de      	b.n	8008b00 <_malloc_r+0xa8>
 8008b42:	230c      	movs	r3, #12
 8008b44:	6033      	str	r3, [r6, #0]
 8008b46:	4630      	mov	r0, r6
 8008b48:	f000 f80c 	bl	8008b64 <__malloc_unlock>
 8008b4c:	e794      	b.n	8008a78 <_malloc_r+0x20>
 8008b4e:	6005      	str	r5, [r0, #0]
 8008b50:	e7d6      	b.n	8008b00 <_malloc_r+0xa8>
 8008b52:	bf00      	nop
 8008b54:	20008d68 	.word	0x20008d68

08008b58 <__malloc_lock>:
 8008b58:	4801      	ldr	r0, [pc, #4]	@ (8008b60 <__malloc_lock+0x8>)
 8008b5a:	f7ff bf01 	b.w	8008960 <__retarget_lock_acquire_recursive>
 8008b5e:	bf00      	nop
 8008b60:	20008d60 	.word	0x20008d60

08008b64 <__malloc_unlock>:
 8008b64:	4801      	ldr	r0, [pc, #4]	@ (8008b6c <__malloc_unlock+0x8>)
 8008b66:	f7ff befc 	b.w	8008962 <__retarget_lock_release_recursive>
 8008b6a:	bf00      	nop
 8008b6c:	20008d60 	.word	0x20008d60

08008b70 <__ssputs_r>:
 8008b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b74:	688e      	ldr	r6, [r1, #8]
 8008b76:	461f      	mov	r7, r3
 8008b78:	42be      	cmp	r6, r7
 8008b7a:	680b      	ldr	r3, [r1, #0]
 8008b7c:	4682      	mov	sl, r0
 8008b7e:	460c      	mov	r4, r1
 8008b80:	4690      	mov	r8, r2
 8008b82:	d82d      	bhi.n	8008be0 <__ssputs_r+0x70>
 8008b84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008b88:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008b8c:	d026      	beq.n	8008bdc <__ssputs_r+0x6c>
 8008b8e:	6965      	ldr	r5, [r4, #20]
 8008b90:	6909      	ldr	r1, [r1, #16]
 8008b92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b96:	eba3 0901 	sub.w	r9, r3, r1
 8008b9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b9e:	1c7b      	adds	r3, r7, #1
 8008ba0:	444b      	add	r3, r9
 8008ba2:	106d      	asrs	r5, r5, #1
 8008ba4:	429d      	cmp	r5, r3
 8008ba6:	bf38      	it	cc
 8008ba8:	461d      	movcc	r5, r3
 8008baa:	0553      	lsls	r3, r2, #21
 8008bac:	d527      	bpl.n	8008bfe <__ssputs_r+0x8e>
 8008bae:	4629      	mov	r1, r5
 8008bb0:	f7ff ff52 	bl	8008a58 <_malloc_r>
 8008bb4:	4606      	mov	r6, r0
 8008bb6:	b360      	cbz	r0, 8008c12 <__ssputs_r+0xa2>
 8008bb8:	6921      	ldr	r1, [r4, #16]
 8008bba:	464a      	mov	r2, r9
 8008bbc:	f7ff fed2 	bl	8008964 <memcpy>
 8008bc0:	89a3      	ldrh	r3, [r4, #12]
 8008bc2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008bc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bca:	81a3      	strh	r3, [r4, #12]
 8008bcc:	6126      	str	r6, [r4, #16]
 8008bce:	6165      	str	r5, [r4, #20]
 8008bd0:	444e      	add	r6, r9
 8008bd2:	eba5 0509 	sub.w	r5, r5, r9
 8008bd6:	6026      	str	r6, [r4, #0]
 8008bd8:	60a5      	str	r5, [r4, #8]
 8008bda:	463e      	mov	r6, r7
 8008bdc:	42be      	cmp	r6, r7
 8008bde:	d900      	bls.n	8008be2 <__ssputs_r+0x72>
 8008be0:	463e      	mov	r6, r7
 8008be2:	6820      	ldr	r0, [r4, #0]
 8008be4:	4632      	mov	r2, r6
 8008be6:	4641      	mov	r1, r8
 8008be8:	f000 faa6 	bl	8009138 <memmove>
 8008bec:	68a3      	ldr	r3, [r4, #8]
 8008bee:	1b9b      	subs	r3, r3, r6
 8008bf0:	60a3      	str	r3, [r4, #8]
 8008bf2:	6823      	ldr	r3, [r4, #0]
 8008bf4:	4433      	add	r3, r6
 8008bf6:	6023      	str	r3, [r4, #0]
 8008bf8:	2000      	movs	r0, #0
 8008bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bfe:	462a      	mov	r2, r5
 8008c00:	f000 fac4 	bl	800918c <_realloc_r>
 8008c04:	4606      	mov	r6, r0
 8008c06:	2800      	cmp	r0, #0
 8008c08:	d1e0      	bne.n	8008bcc <__ssputs_r+0x5c>
 8008c0a:	6921      	ldr	r1, [r4, #16]
 8008c0c:	4650      	mov	r0, sl
 8008c0e:	f7ff feb7 	bl	8008980 <_free_r>
 8008c12:	230c      	movs	r3, #12
 8008c14:	f8ca 3000 	str.w	r3, [sl]
 8008c18:	89a3      	ldrh	r3, [r4, #12]
 8008c1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c1e:	81a3      	strh	r3, [r4, #12]
 8008c20:	f04f 30ff 	mov.w	r0, #4294967295
 8008c24:	e7e9      	b.n	8008bfa <__ssputs_r+0x8a>
	...

08008c28 <_svfiprintf_r>:
 8008c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c2c:	4698      	mov	r8, r3
 8008c2e:	898b      	ldrh	r3, [r1, #12]
 8008c30:	061b      	lsls	r3, r3, #24
 8008c32:	b09d      	sub	sp, #116	@ 0x74
 8008c34:	4607      	mov	r7, r0
 8008c36:	460d      	mov	r5, r1
 8008c38:	4614      	mov	r4, r2
 8008c3a:	d510      	bpl.n	8008c5e <_svfiprintf_r+0x36>
 8008c3c:	690b      	ldr	r3, [r1, #16]
 8008c3e:	b973      	cbnz	r3, 8008c5e <_svfiprintf_r+0x36>
 8008c40:	2140      	movs	r1, #64	@ 0x40
 8008c42:	f7ff ff09 	bl	8008a58 <_malloc_r>
 8008c46:	6028      	str	r0, [r5, #0]
 8008c48:	6128      	str	r0, [r5, #16]
 8008c4a:	b930      	cbnz	r0, 8008c5a <_svfiprintf_r+0x32>
 8008c4c:	230c      	movs	r3, #12
 8008c4e:	603b      	str	r3, [r7, #0]
 8008c50:	f04f 30ff 	mov.w	r0, #4294967295
 8008c54:	b01d      	add	sp, #116	@ 0x74
 8008c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c5a:	2340      	movs	r3, #64	@ 0x40
 8008c5c:	616b      	str	r3, [r5, #20]
 8008c5e:	2300      	movs	r3, #0
 8008c60:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c62:	2320      	movs	r3, #32
 8008c64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008c68:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c6c:	2330      	movs	r3, #48	@ 0x30
 8008c6e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008e0c <_svfiprintf_r+0x1e4>
 8008c72:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008c76:	f04f 0901 	mov.w	r9, #1
 8008c7a:	4623      	mov	r3, r4
 8008c7c:	469a      	mov	sl, r3
 8008c7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c82:	b10a      	cbz	r2, 8008c88 <_svfiprintf_r+0x60>
 8008c84:	2a25      	cmp	r2, #37	@ 0x25
 8008c86:	d1f9      	bne.n	8008c7c <_svfiprintf_r+0x54>
 8008c88:	ebba 0b04 	subs.w	fp, sl, r4
 8008c8c:	d00b      	beq.n	8008ca6 <_svfiprintf_r+0x7e>
 8008c8e:	465b      	mov	r3, fp
 8008c90:	4622      	mov	r2, r4
 8008c92:	4629      	mov	r1, r5
 8008c94:	4638      	mov	r0, r7
 8008c96:	f7ff ff6b 	bl	8008b70 <__ssputs_r>
 8008c9a:	3001      	adds	r0, #1
 8008c9c:	f000 80a7 	beq.w	8008dee <_svfiprintf_r+0x1c6>
 8008ca0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ca2:	445a      	add	r2, fp
 8008ca4:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ca6:	f89a 3000 	ldrb.w	r3, [sl]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f000 809f 	beq.w	8008dee <_svfiprintf_r+0x1c6>
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8008cb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cba:	f10a 0a01 	add.w	sl, sl, #1
 8008cbe:	9304      	str	r3, [sp, #16]
 8008cc0:	9307      	str	r3, [sp, #28]
 8008cc2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008cc6:	931a      	str	r3, [sp, #104]	@ 0x68
 8008cc8:	4654      	mov	r4, sl
 8008cca:	2205      	movs	r2, #5
 8008ccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cd0:	484e      	ldr	r0, [pc, #312]	@ (8008e0c <_svfiprintf_r+0x1e4>)
 8008cd2:	f7f7 faa5 	bl	8000220 <memchr>
 8008cd6:	9a04      	ldr	r2, [sp, #16]
 8008cd8:	b9d8      	cbnz	r0, 8008d12 <_svfiprintf_r+0xea>
 8008cda:	06d0      	lsls	r0, r2, #27
 8008cdc:	bf44      	itt	mi
 8008cde:	2320      	movmi	r3, #32
 8008ce0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ce4:	0711      	lsls	r1, r2, #28
 8008ce6:	bf44      	itt	mi
 8008ce8:	232b      	movmi	r3, #43	@ 0x2b
 8008cea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008cee:	f89a 3000 	ldrb.w	r3, [sl]
 8008cf2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008cf4:	d015      	beq.n	8008d22 <_svfiprintf_r+0xfa>
 8008cf6:	9a07      	ldr	r2, [sp, #28]
 8008cf8:	4654      	mov	r4, sl
 8008cfa:	2000      	movs	r0, #0
 8008cfc:	f04f 0c0a 	mov.w	ip, #10
 8008d00:	4621      	mov	r1, r4
 8008d02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d06:	3b30      	subs	r3, #48	@ 0x30
 8008d08:	2b09      	cmp	r3, #9
 8008d0a:	d94b      	bls.n	8008da4 <_svfiprintf_r+0x17c>
 8008d0c:	b1b0      	cbz	r0, 8008d3c <_svfiprintf_r+0x114>
 8008d0e:	9207      	str	r2, [sp, #28]
 8008d10:	e014      	b.n	8008d3c <_svfiprintf_r+0x114>
 8008d12:	eba0 0308 	sub.w	r3, r0, r8
 8008d16:	fa09 f303 	lsl.w	r3, r9, r3
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	9304      	str	r3, [sp, #16]
 8008d1e:	46a2      	mov	sl, r4
 8008d20:	e7d2      	b.n	8008cc8 <_svfiprintf_r+0xa0>
 8008d22:	9b03      	ldr	r3, [sp, #12]
 8008d24:	1d19      	adds	r1, r3, #4
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	9103      	str	r1, [sp, #12]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	bfbb      	ittet	lt
 8008d2e:	425b      	neglt	r3, r3
 8008d30:	f042 0202 	orrlt.w	r2, r2, #2
 8008d34:	9307      	strge	r3, [sp, #28]
 8008d36:	9307      	strlt	r3, [sp, #28]
 8008d38:	bfb8      	it	lt
 8008d3a:	9204      	strlt	r2, [sp, #16]
 8008d3c:	7823      	ldrb	r3, [r4, #0]
 8008d3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d40:	d10a      	bne.n	8008d58 <_svfiprintf_r+0x130>
 8008d42:	7863      	ldrb	r3, [r4, #1]
 8008d44:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d46:	d132      	bne.n	8008dae <_svfiprintf_r+0x186>
 8008d48:	9b03      	ldr	r3, [sp, #12]
 8008d4a:	1d1a      	adds	r2, r3, #4
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	9203      	str	r2, [sp, #12]
 8008d50:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008d54:	3402      	adds	r4, #2
 8008d56:	9305      	str	r3, [sp, #20]
 8008d58:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008e1c <_svfiprintf_r+0x1f4>
 8008d5c:	7821      	ldrb	r1, [r4, #0]
 8008d5e:	2203      	movs	r2, #3
 8008d60:	4650      	mov	r0, sl
 8008d62:	f7f7 fa5d 	bl	8000220 <memchr>
 8008d66:	b138      	cbz	r0, 8008d78 <_svfiprintf_r+0x150>
 8008d68:	9b04      	ldr	r3, [sp, #16]
 8008d6a:	eba0 000a 	sub.w	r0, r0, sl
 8008d6e:	2240      	movs	r2, #64	@ 0x40
 8008d70:	4082      	lsls	r2, r0
 8008d72:	4313      	orrs	r3, r2
 8008d74:	3401      	adds	r4, #1
 8008d76:	9304      	str	r3, [sp, #16]
 8008d78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d7c:	4824      	ldr	r0, [pc, #144]	@ (8008e10 <_svfiprintf_r+0x1e8>)
 8008d7e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008d82:	2206      	movs	r2, #6
 8008d84:	f7f7 fa4c 	bl	8000220 <memchr>
 8008d88:	2800      	cmp	r0, #0
 8008d8a:	d036      	beq.n	8008dfa <_svfiprintf_r+0x1d2>
 8008d8c:	4b21      	ldr	r3, [pc, #132]	@ (8008e14 <_svfiprintf_r+0x1ec>)
 8008d8e:	bb1b      	cbnz	r3, 8008dd8 <_svfiprintf_r+0x1b0>
 8008d90:	9b03      	ldr	r3, [sp, #12]
 8008d92:	3307      	adds	r3, #7
 8008d94:	f023 0307 	bic.w	r3, r3, #7
 8008d98:	3308      	adds	r3, #8
 8008d9a:	9303      	str	r3, [sp, #12]
 8008d9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d9e:	4433      	add	r3, r6
 8008da0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008da2:	e76a      	b.n	8008c7a <_svfiprintf_r+0x52>
 8008da4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008da8:	460c      	mov	r4, r1
 8008daa:	2001      	movs	r0, #1
 8008dac:	e7a8      	b.n	8008d00 <_svfiprintf_r+0xd8>
 8008dae:	2300      	movs	r3, #0
 8008db0:	3401      	adds	r4, #1
 8008db2:	9305      	str	r3, [sp, #20]
 8008db4:	4619      	mov	r1, r3
 8008db6:	f04f 0c0a 	mov.w	ip, #10
 8008dba:	4620      	mov	r0, r4
 8008dbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dc0:	3a30      	subs	r2, #48	@ 0x30
 8008dc2:	2a09      	cmp	r2, #9
 8008dc4:	d903      	bls.n	8008dce <_svfiprintf_r+0x1a6>
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d0c6      	beq.n	8008d58 <_svfiprintf_r+0x130>
 8008dca:	9105      	str	r1, [sp, #20]
 8008dcc:	e7c4      	b.n	8008d58 <_svfiprintf_r+0x130>
 8008dce:	fb0c 2101 	mla	r1, ip, r1, r2
 8008dd2:	4604      	mov	r4, r0
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	e7f0      	b.n	8008dba <_svfiprintf_r+0x192>
 8008dd8:	ab03      	add	r3, sp, #12
 8008dda:	9300      	str	r3, [sp, #0]
 8008ddc:	462a      	mov	r2, r5
 8008dde:	4b0e      	ldr	r3, [pc, #56]	@ (8008e18 <_svfiprintf_r+0x1f0>)
 8008de0:	a904      	add	r1, sp, #16
 8008de2:	4638      	mov	r0, r7
 8008de4:	f3af 8000 	nop.w
 8008de8:	1c42      	adds	r2, r0, #1
 8008dea:	4606      	mov	r6, r0
 8008dec:	d1d6      	bne.n	8008d9c <_svfiprintf_r+0x174>
 8008dee:	89ab      	ldrh	r3, [r5, #12]
 8008df0:	065b      	lsls	r3, r3, #25
 8008df2:	f53f af2d 	bmi.w	8008c50 <_svfiprintf_r+0x28>
 8008df6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008df8:	e72c      	b.n	8008c54 <_svfiprintf_r+0x2c>
 8008dfa:	ab03      	add	r3, sp, #12
 8008dfc:	9300      	str	r3, [sp, #0]
 8008dfe:	462a      	mov	r2, r5
 8008e00:	4b05      	ldr	r3, [pc, #20]	@ (8008e18 <_svfiprintf_r+0x1f0>)
 8008e02:	a904      	add	r1, sp, #16
 8008e04:	4638      	mov	r0, r7
 8008e06:	f000 f879 	bl	8008efc <_printf_i>
 8008e0a:	e7ed      	b.n	8008de8 <_svfiprintf_r+0x1c0>
 8008e0c:	0800936c 	.word	0x0800936c
 8008e10:	08009376 	.word	0x08009376
 8008e14:	00000000 	.word	0x00000000
 8008e18:	08008b71 	.word	0x08008b71
 8008e1c:	08009372 	.word	0x08009372

08008e20 <_printf_common>:
 8008e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e24:	4616      	mov	r6, r2
 8008e26:	4698      	mov	r8, r3
 8008e28:	688a      	ldr	r2, [r1, #8]
 8008e2a:	690b      	ldr	r3, [r1, #16]
 8008e2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008e30:	4293      	cmp	r3, r2
 8008e32:	bfb8      	it	lt
 8008e34:	4613      	movlt	r3, r2
 8008e36:	6033      	str	r3, [r6, #0]
 8008e38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008e3c:	4607      	mov	r7, r0
 8008e3e:	460c      	mov	r4, r1
 8008e40:	b10a      	cbz	r2, 8008e46 <_printf_common+0x26>
 8008e42:	3301      	adds	r3, #1
 8008e44:	6033      	str	r3, [r6, #0]
 8008e46:	6823      	ldr	r3, [r4, #0]
 8008e48:	0699      	lsls	r1, r3, #26
 8008e4a:	bf42      	ittt	mi
 8008e4c:	6833      	ldrmi	r3, [r6, #0]
 8008e4e:	3302      	addmi	r3, #2
 8008e50:	6033      	strmi	r3, [r6, #0]
 8008e52:	6825      	ldr	r5, [r4, #0]
 8008e54:	f015 0506 	ands.w	r5, r5, #6
 8008e58:	d106      	bne.n	8008e68 <_printf_common+0x48>
 8008e5a:	f104 0a19 	add.w	sl, r4, #25
 8008e5e:	68e3      	ldr	r3, [r4, #12]
 8008e60:	6832      	ldr	r2, [r6, #0]
 8008e62:	1a9b      	subs	r3, r3, r2
 8008e64:	42ab      	cmp	r3, r5
 8008e66:	dc26      	bgt.n	8008eb6 <_printf_common+0x96>
 8008e68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008e6c:	6822      	ldr	r2, [r4, #0]
 8008e6e:	3b00      	subs	r3, #0
 8008e70:	bf18      	it	ne
 8008e72:	2301      	movne	r3, #1
 8008e74:	0692      	lsls	r2, r2, #26
 8008e76:	d42b      	bmi.n	8008ed0 <_printf_common+0xb0>
 8008e78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008e7c:	4641      	mov	r1, r8
 8008e7e:	4638      	mov	r0, r7
 8008e80:	47c8      	blx	r9
 8008e82:	3001      	adds	r0, #1
 8008e84:	d01e      	beq.n	8008ec4 <_printf_common+0xa4>
 8008e86:	6823      	ldr	r3, [r4, #0]
 8008e88:	6922      	ldr	r2, [r4, #16]
 8008e8a:	f003 0306 	and.w	r3, r3, #6
 8008e8e:	2b04      	cmp	r3, #4
 8008e90:	bf02      	ittt	eq
 8008e92:	68e5      	ldreq	r5, [r4, #12]
 8008e94:	6833      	ldreq	r3, [r6, #0]
 8008e96:	1aed      	subeq	r5, r5, r3
 8008e98:	68a3      	ldr	r3, [r4, #8]
 8008e9a:	bf0c      	ite	eq
 8008e9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ea0:	2500      	movne	r5, #0
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	bfc4      	itt	gt
 8008ea6:	1a9b      	subgt	r3, r3, r2
 8008ea8:	18ed      	addgt	r5, r5, r3
 8008eaa:	2600      	movs	r6, #0
 8008eac:	341a      	adds	r4, #26
 8008eae:	42b5      	cmp	r5, r6
 8008eb0:	d11a      	bne.n	8008ee8 <_printf_common+0xc8>
 8008eb2:	2000      	movs	r0, #0
 8008eb4:	e008      	b.n	8008ec8 <_printf_common+0xa8>
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	4652      	mov	r2, sl
 8008eba:	4641      	mov	r1, r8
 8008ebc:	4638      	mov	r0, r7
 8008ebe:	47c8      	blx	r9
 8008ec0:	3001      	adds	r0, #1
 8008ec2:	d103      	bne.n	8008ecc <_printf_common+0xac>
 8008ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ecc:	3501      	adds	r5, #1
 8008ece:	e7c6      	b.n	8008e5e <_printf_common+0x3e>
 8008ed0:	18e1      	adds	r1, r4, r3
 8008ed2:	1c5a      	adds	r2, r3, #1
 8008ed4:	2030      	movs	r0, #48	@ 0x30
 8008ed6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008eda:	4422      	add	r2, r4
 8008edc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008ee0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008ee4:	3302      	adds	r3, #2
 8008ee6:	e7c7      	b.n	8008e78 <_printf_common+0x58>
 8008ee8:	2301      	movs	r3, #1
 8008eea:	4622      	mov	r2, r4
 8008eec:	4641      	mov	r1, r8
 8008eee:	4638      	mov	r0, r7
 8008ef0:	47c8      	blx	r9
 8008ef2:	3001      	adds	r0, #1
 8008ef4:	d0e6      	beq.n	8008ec4 <_printf_common+0xa4>
 8008ef6:	3601      	adds	r6, #1
 8008ef8:	e7d9      	b.n	8008eae <_printf_common+0x8e>
	...

08008efc <_printf_i>:
 8008efc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f00:	7e0f      	ldrb	r7, [r1, #24]
 8008f02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008f04:	2f78      	cmp	r7, #120	@ 0x78
 8008f06:	4691      	mov	r9, r2
 8008f08:	4680      	mov	r8, r0
 8008f0a:	460c      	mov	r4, r1
 8008f0c:	469a      	mov	sl, r3
 8008f0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008f12:	d807      	bhi.n	8008f24 <_printf_i+0x28>
 8008f14:	2f62      	cmp	r7, #98	@ 0x62
 8008f16:	d80a      	bhi.n	8008f2e <_printf_i+0x32>
 8008f18:	2f00      	cmp	r7, #0
 8008f1a:	f000 80d1 	beq.w	80090c0 <_printf_i+0x1c4>
 8008f1e:	2f58      	cmp	r7, #88	@ 0x58
 8008f20:	f000 80b8 	beq.w	8009094 <_printf_i+0x198>
 8008f24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008f2c:	e03a      	b.n	8008fa4 <_printf_i+0xa8>
 8008f2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008f32:	2b15      	cmp	r3, #21
 8008f34:	d8f6      	bhi.n	8008f24 <_printf_i+0x28>
 8008f36:	a101      	add	r1, pc, #4	@ (adr r1, 8008f3c <_printf_i+0x40>)
 8008f38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f3c:	08008f95 	.word	0x08008f95
 8008f40:	08008fa9 	.word	0x08008fa9
 8008f44:	08008f25 	.word	0x08008f25
 8008f48:	08008f25 	.word	0x08008f25
 8008f4c:	08008f25 	.word	0x08008f25
 8008f50:	08008f25 	.word	0x08008f25
 8008f54:	08008fa9 	.word	0x08008fa9
 8008f58:	08008f25 	.word	0x08008f25
 8008f5c:	08008f25 	.word	0x08008f25
 8008f60:	08008f25 	.word	0x08008f25
 8008f64:	08008f25 	.word	0x08008f25
 8008f68:	080090a7 	.word	0x080090a7
 8008f6c:	08008fd3 	.word	0x08008fd3
 8008f70:	08009061 	.word	0x08009061
 8008f74:	08008f25 	.word	0x08008f25
 8008f78:	08008f25 	.word	0x08008f25
 8008f7c:	080090c9 	.word	0x080090c9
 8008f80:	08008f25 	.word	0x08008f25
 8008f84:	08008fd3 	.word	0x08008fd3
 8008f88:	08008f25 	.word	0x08008f25
 8008f8c:	08008f25 	.word	0x08008f25
 8008f90:	08009069 	.word	0x08009069
 8008f94:	6833      	ldr	r3, [r6, #0]
 8008f96:	1d1a      	adds	r2, r3, #4
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	6032      	str	r2, [r6, #0]
 8008f9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008fa0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	e09c      	b.n	80090e2 <_printf_i+0x1e6>
 8008fa8:	6833      	ldr	r3, [r6, #0]
 8008faa:	6820      	ldr	r0, [r4, #0]
 8008fac:	1d19      	adds	r1, r3, #4
 8008fae:	6031      	str	r1, [r6, #0]
 8008fb0:	0606      	lsls	r6, r0, #24
 8008fb2:	d501      	bpl.n	8008fb8 <_printf_i+0xbc>
 8008fb4:	681d      	ldr	r5, [r3, #0]
 8008fb6:	e003      	b.n	8008fc0 <_printf_i+0xc4>
 8008fb8:	0645      	lsls	r5, r0, #25
 8008fba:	d5fb      	bpl.n	8008fb4 <_printf_i+0xb8>
 8008fbc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008fc0:	2d00      	cmp	r5, #0
 8008fc2:	da03      	bge.n	8008fcc <_printf_i+0xd0>
 8008fc4:	232d      	movs	r3, #45	@ 0x2d
 8008fc6:	426d      	negs	r5, r5
 8008fc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008fcc:	4858      	ldr	r0, [pc, #352]	@ (8009130 <_printf_i+0x234>)
 8008fce:	230a      	movs	r3, #10
 8008fd0:	e011      	b.n	8008ff6 <_printf_i+0xfa>
 8008fd2:	6821      	ldr	r1, [r4, #0]
 8008fd4:	6833      	ldr	r3, [r6, #0]
 8008fd6:	0608      	lsls	r0, r1, #24
 8008fd8:	f853 5b04 	ldr.w	r5, [r3], #4
 8008fdc:	d402      	bmi.n	8008fe4 <_printf_i+0xe8>
 8008fde:	0649      	lsls	r1, r1, #25
 8008fe0:	bf48      	it	mi
 8008fe2:	b2ad      	uxthmi	r5, r5
 8008fe4:	2f6f      	cmp	r7, #111	@ 0x6f
 8008fe6:	4852      	ldr	r0, [pc, #328]	@ (8009130 <_printf_i+0x234>)
 8008fe8:	6033      	str	r3, [r6, #0]
 8008fea:	bf14      	ite	ne
 8008fec:	230a      	movne	r3, #10
 8008fee:	2308      	moveq	r3, #8
 8008ff0:	2100      	movs	r1, #0
 8008ff2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008ff6:	6866      	ldr	r6, [r4, #4]
 8008ff8:	60a6      	str	r6, [r4, #8]
 8008ffa:	2e00      	cmp	r6, #0
 8008ffc:	db05      	blt.n	800900a <_printf_i+0x10e>
 8008ffe:	6821      	ldr	r1, [r4, #0]
 8009000:	432e      	orrs	r6, r5
 8009002:	f021 0104 	bic.w	r1, r1, #4
 8009006:	6021      	str	r1, [r4, #0]
 8009008:	d04b      	beq.n	80090a2 <_printf_i+0x1a6>
 800900a:	4616      	mov	r6, r2
 800900c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009010:	fb03 5711 	mls	r7, r3, r1, r5
 8009014:	5dc7      	ldrb	r7, [r0, r7]
 8009016:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800901a:	462f      	mov	r7, r5
 800901c:	42bb      	cmp	r3, r7
 800901e:	460d      	mov	r5, r1
 8009020:	d9f4      	bls.n	800900c <_printf_i+0x110>
 8009022:	2b08      	cmp	r3, #8
 8009024:	d10b      	bne.n	800903e <_printf_i+0x142>
 8009026:	6823      	ldr	r3, [r4, #0]
 8009028:	07df      	lsls	r7, r3, #31
 800902a:	d508      	bpl.n	800903e <_printf_i+0x142>
 800902c:	6923      	ldr	r3, [r4, #16]
 800902e:	6861      	ldr	r1, [r4, #4]
 8009030:	4299      	cmp	r1, r3
 8009032:	bfde      	ittt	le
 8009034:	2330      	movle	r3, #48	@ 0x30
 8009036:	f806 3c01 	strble.w	r3, [r6, #-1]
 800903a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800903e:	1b92      	subs	r2, r2, r6
 8009040:	6122      	str	r2, [r4, #16]
 8009042:	f8cd a000 	str.w	sl, [sp]
 8009046:	464b      	mov	r3, r9
 8009048:	aa03      	add	r2, sp, #12
 800904a:	4621      	mov	r1, r4
 800904c:	4640      	mov	r0, r8
 800904e:	f7ff fee7 	bl	8008e20 <_printf_common>
 8009052:	3001      	adds	r0, #1
 8009054:	d14a      	bne.n	80090ec <_printf_i+0x1f0>
 8009056:	f04f 30ff 	mov.w	r0, #4294967295
 800905a:	b004      	add	sp, #16
 800905c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009060:	6823      	ldr	r3, [r4, #0]
 8009062:	f043 0320 	orr.w	r3, r3, #32
 8009066:	6023      	str	r3, [r4, #0]
 8009068:	4832      	ldr	r0, [pc, #200]	@ (8009134 <_printf_i+0x238>)
 800906a:	2778      	movs	r7, #120	@ 0x78
 800906c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009070:	6823      	ldr	r3, [r4, #0]
 8009072:	6831      	ldr	r1, [r6, #0]
 8009074:	061f      	lsls	r7, r3, #24
 8009076:	f851 5b04 	ldr.w	r5, [r1], #4
 800907a:	d402      	bmi.n	8009082 <_printf_i+0x186>
 800907c:	065f      	lsls	r7, r3, #25
 800907e:	bf48      	it	mi
 8009080:	b2ad      	uxthmi	r5, r5
 8009082:	6031      	str	r1, [r6, #0]
 8009084:	07d9      	lsls	r1, r3, #31
 8009086:	bf44      	itt	mi
 8009088:	f043 0320 	orrmi.w	r3, r3, #32
 800908c:	6023      	strmi	r3, [r4, #0]
 800908e:	b11d      	cbz	r5, 8009098 <_printf_i+0x19c>
 8009090:	2310      	movs	r3, #16
 8009092:	e7ad      	b.n	8008ff0 <_printf_i+0xf4>
 8009094:	4826      	ldr	r0, [pc, #152]	@ (8009130 <_printf_i+0x234>)
 8009096:	e7e9      	b.n	800906c <_printf_i+0x170>
 8009098:	6823      	ldr	r3, [r4, #0]
 800909a:	f023 0320 	bic.w	r3, r3, #32
 800909e:	6023      	str	r3, [r4, #0]
 80090a0:	e7f6      	b.n	8009090 <_printf_i+0x194>
 80090a2:	4616      	mov	r6, r2
 80090a4:	e7bd      	b.n	8009022 <_printf_i+0x126>
 80090a6:	6833      	ldr	r3, [r6, #0]
 80090a8:	6825      	ldr	r5, [r4, #0]
 80090aa:	6961      	ldr	r1, [r4, #20]
 80090ac:	1d18      	adds	r0, r3, #4
 80090ae:	6030      	str	r0, [r6, #0]
 80090b0:	062e      	lsls	r6, r5, #24
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	d501      	bpl.n	80090ba <_printf_i+0x1be>
 80090b6:	6019      	str	r1, [r3, #0]
 80090b8:	e002      	b.n	80090c0 <_printf_i+0x1c4>
 80090ba:	0668      	lsls	r0, r5, #25
 80090bc:	d5fb      	bpl.n	80090b6 <_printf_i+0x1ba>
 80090be:	8019      	strh	r1, [r3, #0]
 80090c0:	2300      	movs	r3, #0
 80090c2:	6123      	str	r3, [r4, #16]
 80090c4:	4616      	mov	r6, r2
 80090c6:	e7bc      	b.n	8009042 <_printf_i+0x146>
 80090c8:	6833      	ldr	r3, [r6, #0]
 80090ca:	1d1a      	adds	r2, r3, #4
 80090cc:	6032      	str	r2, [r6, #0]
 80090ce:	681e      	ldr	r6, [r3, #0]
 80090d0:	6862      	ldr	r2, [r4, #4]
 80090d2:	2100      	movs	r1, #0
 80090d4:	4630      	mov	r0, r6
 80090d6:	f7f7 f8a3 	bl	8000220 <memchr>
 80090da:	b108      	cbz	r0, 80090e0 <_printf_i+0x1e4>
 80090dc:	1b80      	subs	r0, r0, r6
 80090de:	6060      	str	r0, [r4, #4]
 80090e0:	6863      	ldr	r3, [r4, #4]
 80090e2:	6123      	str	r3, [r4, #16]
 80090e4:	2300      	movs	r3, #0
 80090e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090ea:	e7aa      	b.n	8009042 <_printf_i+0x146>
 80090ec:	6923      	ldr	r3, [r4, #16]
 80090ee:	4632      	mov	r2, r6
 80090f0:	4649      	mov	r1, r9
 80090f2:	4640      	mov	r0, r8
 80090f4:	47d0      	blx	sl
 80090f6:	3001      	adds	r0, #1
 80090f8:	d0ad      	beq.n	8009056 <_printf_i+0x15a>
 80090fa:	6823      	ldr	r3, [r4, #0]
 80090fc:	079b      	lsls	r3, r3, #30
 80090fe:	d413      	bmi.n	8009128 <_printf_i+0x22c>
 8009100:	68e0      	ldr	r0, [r4, #12]
 8009102:	9b03      	ldr	r3, [sp, #12]
 8009104:	4298      	cmp	r0, r3
 8009106:	bfb8      	it	lt
 8009108:	4618      	movlt	r0, r3
 800910a:	e7a6      	b.n	800905a <_printf_i+0x15e>
 800910c:	2301      	movs	r3, #1
 800910e:	4632      	mov	r2, r6
 8009110:	4649      	mov	r1, r9
 8009112:	4640      	mov	r0, r8
 8009114:	47d0      	blx	sl
 8009116:	3001      	adds	r0, #1
 8009118:	d09d      	beq.n	8009056 <_printf_i+0x15a>
 800911a:	3501      	adds	r5, #1
 800911c:	68e3      	ldr	r3, [r4, #12]
 800911e:	9903      	ldr	r1, [sp, #12]
 8009120:	1a5b      	subs	r3, r3, r1
 8009122:	42ab      	cmp	r3, r5
 8009124:	dcf2      	bgt.n	800910c <_printf_i+0x210>
 8009126:	e7eb      	b.n	8009100 <_printf_i+0x204>
 8009128:	2500      	movs	r5, #0
 800912a:	f104 0619 	add.w	r6, r4, #25
 800912e:	e7f5      	b.n	800911c <_printf_i+0x220>
 8009130:	0800937d 	.word	0x0800937d
 8009134:	0800938e 	.word	0x0800938e

08009138 <memmove>:
 8009138:	4288      	cmp	r0, r1
 800913a:	b510      	push	{r4, lr}
 800913c:	eb01 0402 	add.w	r4, r1, r2
 8009140:	d902      	bls.n	8009148 <memmove+0x10>
 8009142:	4284      	cmp	r4, r0
 8009144:	4623      	mov	r3, r4
 8009146:	d807      	bhi.n	8009158 <memmove+0x20>
 8009148:	1e43      	subs	r3, r0, #1
 800914a:	42a1      	cmp	r1, r4
 800914c:	d008      	beq.n	8009160 <memmove+0x28>
 800914e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009152:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009156:	e7f8      	b.n	800914a <memmove+0x12>
 8009158:	4402      	add	r2, r0
 800915a:	4601      	mov	r1, r0
 800915c:	428a      	cmp	r2, r1
 800915e:	d100      	bne.n	8009162 <memmove+0x2a>
 8009160:	bd10      	pop	{r4, pc}
 8009162:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009166:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800916a:	e7f7      	b.n	800915c <memmove+0x24>

0800916c <_sbrk_r>:
 800916c:	b538      	push	{r3, r4, r5, lr}
 800916e:	4d06      	ldr	r5, [pc, #24]	@ (8009188 <_sbrk_r+0x1c>)
 8009170:	2300      	movs	r3, #0
 8009172:	4604      	mov	r4, r0
 8009174:	4608      	mov	r0, r1
 8009176:	602b      	str	r3, [r5, #0]
 8009178:	f7f8 f8ae 	bl	80012d8 <_sbrk>
 800917c:	1c43      	adds	r3, r0, #1
 800917e:	d102      	bne.n	8009186 <_sbrk_r+0x1a>
 8009180:	682b      	ldr	r3, [r5, #0]
 8009182:	b103      	cbz	r3, 8009186 <_sbrk_r+0x1a>
 8009184:	6023      	str	r3, [r4, #0]
 8009186:	bd38      	pop	{r3, r4, r5, pc}
 8009188:	20008d5c 	.word	0x20008d5c

0800918c <_realloc_r>:
 800918c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009190:	4607      	mov	r7, r0
 8009192:	4614      	mov	r4, r2
 8009194:	460d      	mov	r5, r1
 8009196:	b921      	cbnz	r1, 80091a2 <_realloc_r+0x16>
 8009198:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800919c:	4611      	mov	r1, r2
 800919e:	f7ff bc5b 	b.w	8008a58 <_malloc_r>
 80091a2:	b92a      	cbnz	r2, 80091b0 <_realloc_r+0x24>
 80091a4:	f7ff fbec 	bl	8008980 <_free_r>
 80091a8:	4625      	mov	r5, r4
 80091aa:	4628      	mov	r0, r5
 80091ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091b0:	f000 f81a 	bl	80091e8 <_malloc_usable_size_r>
 80091b4:	4284      	cmp	r4, r0
 80091b6:	4606      	mov	r6, r0
 80091b8:	d802      	bhi.n	80091c0 <_realloc_r+0x34>
 80091ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80091be:	d8f4      	bhi.n	80091aa <_realloc_r+0x1e>
 80091c0:	4621      	mov	r1, r4
 80091c2:	4638      	mov	r0, r7
 80091c4:	f7ff fc48 	bl	8008a58 <_malloc_r>
 80091c8:	4680      	mov	r8, r0
 80091ca:	b908      	cbnz	r0, 80091d0 <_realloc_r+0x44>
 80091cc:	4645      	mov	r5, r8
 80091ce:	e7ec      	b.n	80091aa <_realloc_r+0x1e>
 80091d0:	42b4      	cmp	r4, r6
 80091d2:	4622      	mov	r2, r4
 80091d4:	4629      	mov	r1, r5
 80091d6:	bf28      	it	cs
 80091d8:	4632      	movcs	r2, r6
 80091da:	f7ff fbc3 	bl	8008964 <memcpy>
 80091de:	4629      	mov	r1, r5
 80091e0:	4638      	mov	r0, r7
 80091e2:	f7ff fbcd 	bl	8008980 <_free_r>
 80091e6:	e7f1      	b.n	80091cc <_realloc_r+0x40>

080091e8 <_malloc_usable_size_r>:
 80091e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091ec:	1f18      	subs	r0, r3, #4
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	bfbc      	itt	lt
 80091f2:	580b      	ldrlt	r3, [r1, r0]
 80091f4:	18c0      	addlt	r0, r0, r3
 80091f6:	4770      	bx	lr

080091f8 <_init>:
 80091f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091fa:	bf00      	nop
 80091fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091fe:	bc08      	pop	{r3}
 8009200:	469e      	mov	lr, r3
 8009202:	4770      	bx	lr

08009204 <_fini>:
 8009204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009206:	bf00      	nop
 8009208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800920a:	bc08      	pop	{r3}
 800920c:	469e      	mov	lr, r3
 800920e:	4770      	bx	lr
